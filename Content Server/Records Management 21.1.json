{
    "openapi": "3.0.1",
    "info": {
        "description": "OpenText Records Management 21.1 REST API",
        "title": "OpenText Records Management",
        "version": "21.1"
    },
    "servers": [
        {
            "url": "https://opentext.com/OTCS/cs.exe/api"
        },
        {
            "url": "http://opentext.com/OTCS/cs.exe/api"
        }
    ],
    "tags": [
        {
            "name": "RM codes",
            "description": "Records Management codes"
        },
        {
            "name": "RSI",
            "description": "Record Series Identifier"
        },
        {
            "name": "RSIs",
            "description": "Record Series Identifiers"
        },
        {
            "name": "RSI Schedules",
            "description": "Record Series Identifier Schedules"
        },
        {
            "name": "Holds",
            "description": "Holds"
        },
        {
            "name": "Hold",
            "description": "Hold"
        },
        {
            "name": "Members",
            "description": "Manage members"
        },
        {
            "name": "Nodes",
            "description": "Manage nodes"
        },
        {
            "name": "PO codes",
            "description": "Physical Objects codes"
        },
        {
            "name": "RMqueues",
            "description": "RM Queues"
        },
        {
            "name": "SecurityClearances",
            "description": "Security Clearance"
        },
        {
            "name": "Xrefs",
            "description": "Cross-References"
        },
        {
            "name": "UserHolds",
            "description": "User Holds"
        },
        {
            "name": "Forms",
            "description": "Forms"
        },
        {
            "name": "ClassifiedItems",
            "description": "Classified Items"
        },
        {
            "name": "Classifications",
            "description": "Classifications"
        },
        {
            "name": "UserSecurity",
            "description": "User Security"
        },
        {
            "name": "StorageManagement",
            "description": "Storage Management"
        },
        {
            "name": "Circulation",
            "description": "Circulation of Physical Items"
        },
        {
            "name": "RecordsManagement",
            "description": "Records Management"
        }
    ],
    "paths": {
        "/v1/poforms/request": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_PORequest"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form to request Physical Items",
                "summary": "Gets the Alpaca form to request Physical Items"
            }
        },
        "/v1/poforms/borrow": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_POBorrow"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form to borrow Physical Items",
                "summary": "Gets the Alpaca form to borrow Physical Items"
            }
        },
        "/v1/poforms/return": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_POReturn"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form to return Physical Items",
                "summary": "Gets the Alpaca form to return Physical Items"
            }
        },
        "/v1/poforms/pometadata": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_POMetadata"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form with Physical Item specific metadata which can be updated in bulk action.",
                "summary": "Gets the Alpaca form with Physical Item specific metadata which can be updated in bulk action."
            }
        },
        "/v1/poforms/assignlocator": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_POAssignLocator"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form with search fields to search locators",
                "summary": "Gets the Alpaca form with search fields to search locators"
            }
        },
        "/v1/poforms/assigntransfer": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_POAssignTransfer"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form with search fields to search transfers",
                "summary": "Gets the Alpaca form with search fields to search transfers"
            }
        },
        "/v1/poforms/assignbox": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_POAssignBox"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form with search fields to search Physical Item boxes",
                "summary": "Gets the Alpaca form with search fields to search Physical Item boxes"
            }
        },
        "/v1/rmforms/nodes/{id}/xref": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_RMXref"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form with fields to assign cross-reference",
                "summary": "Gets the Alpaca form with fields to assign cross-reference"
            }
        },
        "/v1/rmforms/rmmetadata": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_RMMetadata"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form with records management metadata which can be updated in bulk action",
                "summary": "Gets the Alpaca form with records management metadata which can be updated in bulk action   "
            }
        },
        "/v1/rmforms/changeactions/{subtype}": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "subtype",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_RMChangeActions"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form to change disposition action in disposition snapshot search result",
                "summary": "Gets the Alpaca form to change disposition action in disposition snapshot search result   "
            }
        },
        "/v1/scforms/securityclearancelevel": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_SecurityLevel"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form to update Security Clearance Level",
                "summary": "Gets the Alpaca form to update Security Clearance Level  "
            }
        },
        "/v1/scforms/supplementalmarkings": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_SupplementalMarkings"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Forms"
                ],
                "description": "Gets the Alpaca form to update Supplemental Markings",
                "summary": "Gets the Alpaca form to update Supplemental Markings"
            }
        },
        "/v1/classifications/createinfo": {
            "get": {
                "parameters": [
                    {
                        "description": "Sub Type",
                        "in": "query",
                        "name": "objType",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClassificationInfo"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Classifications"
                ],
                "description": "Returns information if user can access Classification Volume and object is managed by Classification module",
                "summary": "Returns information if user can access Classification Volume and object is managed by Classification module"
            }
        },
        "/v1/classifications/settings": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClassificationSettings"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Classifications"
                ],
                "description": "Returns list of managed sub types and Classification Volume ID",
                "summary": "Returns list of managed sub types and Classification Volume ID    "
            }
        },
        "/v1/holds": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SimpleHoldInfo"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not get node for {id}"
                    }
                },
                "tags": [
                    "Holds"
                ],
                "description": "Return list of Holds",
                "summary": "Return list of Holds"
            },
            "post": {
                "parameters": [
                    {
                        "description": "Type of Hold",
                        "in": "query",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Parent node ID",
                        "in": "query",
                        "name": "parent_id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Name of the Hold",
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Comment",
                        "in": "query",
                        "name": "comment",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Alternative ID",
                        "in": "query",
                        "name": "alternate_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Date when the Hold is created",
                        "in": "query",
                        "name": "date_applied",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Date when the Hold is to be suspended",
                        "in": "query",
                        "name": "date_to_remove",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Could not insert into the Hold Disposition table"
                    }
                },
                "tags": [
                    "Holds"
                ],
                "description": "Create a Hold",
                "operationId": "CreateHold",
                "summary": "Create a Hold"
            },
            "put": {
                "parameters": [
                    {
                        "description": "Hold ID",
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Type of the Hold",
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Name of the Hold",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Comment",
                        "in": "query",
                        "name": "comment",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Alternative ID",
                        "in": "query",
                        "name": "alternate_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Date when the Hold is applied",
                        "in": "query",
                        "name": "date_applied",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Date when the Hold is suspended",
                        "in": "query",
                        "name": "date_removed",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Date when the Hold is to be suspended",
                        "in": "query",
                        "name": "date_to_remove",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Could not update Hold Disposition table"
                    }
                },
                "tags": [
                    "Holds"
                ],
                "description": "Update a Hold",
                "operationId": "UpdateHold",
                "summary": "Update a Hold"
            }
        },
        "/v1/holds/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "Hold ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Error deleting Hold. Hold may not exist or is in use."
                    }
                },
                "tags": [
                    "Holds"
                ],
                "description": "Delete a Hold",
                "operationId": "DeleteHold",
                "summary": "Delete a Hold"
            }
        },
        "/v1/members/{id}/grouppicklist": {
            "get": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPickList"
                                }
                            }
                        },
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Gets User's Groups Picklist",
                "operationId": "getGroupPicklist",
                "summary": "Get User's Groups Picklist"
            }
        },
        "/v2/userholds/addusers": {
            "post": {
                "parameters": [
                    {
                        "description": "Hold ID",
                        "in": "query",
                        "name": "holdID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "List of User IDs",
                        "in": "query",
                        "name": "userIDs",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Missing required parameter '[parameter name]'"
                    }
                },
                "tags": [
                    "UserHolds"
                ],
                "description": "Assign user or list of users to specific Hold",
                "operationId": "AddUsers",
                "summary": "Assign user or list of users to specific Hold"
            }
        },
        "/v2/userholds/removeusers": {
            "post": {
                "parameters": [
                    {
                        "description": "Hold ID",
                        "in": "query",
                        "name": "holdID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "List of User IDs",
                        "in": "query",
                        "name": "userIDs",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Missing required parameter '[parameter name]'"
                    }
                },
                "tags": [
                    "UserHolds"
                ],
                "description": "Remove user or list of users from specific Hold",
                "operationId": "RemoveUsers",
                "summary": "Remove user or list of users from specific Hold"
            }
        },
        "/v2/userholds/processhold": {
            "post": {
                "parameters": [
                    {
                        "description": "Hold ID",
                        "in": "query",
                        "name": "holdID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Starting date for date range.",
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "End date for date range.",
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Missing required parameter '[parameter name]'"
                    }
                },
                "tags": [
                    "UserHolds"
                ],
                "description": "Assign or remove specific Hold from objects created or updated by users defined in user holds settings",
                "operationId": "ProcessHold",
                "summary": "Assign or remove specific Hold from objects created or updated by users defined in user holds settings"
            }
        },
        "/v1/members/{id}/physicalitems/borrowed": {
            "delete": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "List of Physical Item IDs",
                        "in": "query",
                        "name": "node_id",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "Current Location of the Physical Item",
                        "in": "query",
                        "name": "location",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Flag to return Physical Items to Home Location",
                        "in": "query",
                        "name": "return_home",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Cancels borrow Physical Items for a user with the given ID",
                "operationId": "cancelBorrow",
                "summary": "Cancel borrow Physical Items"
            },
            "get": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/BorrowedItems"
                                }
                            }
                        },
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Gets a list of borrowed Physical Items for a user with the given ID",
                "operationId": "getBorrowedItems",
                "summary": "Get Borrowed Physical Items"
            }
        },
        "/v1/members/{id}/physicalitems/borrowed/changeReturnDate": {
            "put": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "node_id": {
                                        "description": "List of Physical Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "return_date": {
                                        "description": "A new return date for the Physical Items",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "extend_return_date": {
                                        "description": "Extend the return date by number of days for the Physical Items",
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "description": "Comment for the borrowed Physical Items",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "node_id"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Change a Return Date for Physical Items borrowed by a user with the given ID",
                "operationId": "changeReturnDate",
                "summary": "Change Return Date for borrowed Physical Items"
            }
        },
        "/v1/members/{id}/physicalitems/borrowed/pass": {
            "put": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "node_id": {
                                        "description": "List of Physical Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "location": {
                                        "description": "Current Location of the Physical Item",
                                        "type": "string"
                                    },
                                    "pass_to_name": {
                                        "description": "Name of the new Borrower of the Physical Items",
                                        "type": "string"
                                    },
                                    "pass_to_id": {
                                        "description": "ID of the new Borrower of the Physical Items",
                                        "type": "integer"
                                    },
                                    "obtained_by_name": {
                                        "description": "Name of the person who obtained the Physical Items",
                                        "type": "string"
                                    },
                                    "obtained_by_id": {
                                        "description": "ID of the person who obtained the Physical Items",
                                        "type": "integer"
                                    },
                                    "security_override": {
                                        "description": "Flag to pre-approve Security Overrides",
                                        "type": "boolean"
                                    },
                                    "borrow_date": {
                                        "description": "New borrow date for the Physical Items",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "return_date": {
                                        "description": "New return date for the Physical Items",
                                        "format": "data",
                                        "type": "string"
                                    },
                                    "comment": {
                                        "description": "Comment for the borrowed Physical Items",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "node_id",
                                    "pass_to_name",
                                    "borrow_date",
                                    "return_date"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Passes Physical Items borrowed by a user with the given ID to another user",
                "operationId": "passBorrowed",
                "summary": "Pass borrowed Physical Items"
            }
        },
        "/v1/members/{id}/physicalitems/borrowed/pickup": {
            "put": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "node_id": {
                                        "description": "List of Physical Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Flags to Pick Up Physical Items borrowed by a user with the given ID",
                "operationId": "pickupBorrowed",
                "summary": "Flag to Pick Up borrowed Physical Items"
            }
        },
        "/v1/members/{id}/physicalitems/borrowed/return": {
            "put": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "node_id": {
                                        "description": "List of Physical Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "location": {
                                        "description": "Current Location of the Physical Item",
                                        "type": "string"
                                    },
                                    "return_home": {
                                        "description": "Flag to return Physical Items to Home Location",
                                        "type": "boolean"
                                    },
                                    "return_date": {
                                        "description": "Date when Physical Items were returned",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "comment": {
                                        "description": "Comment for the returned Physical Items",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "node_id",
                                    "return_date"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Returns Physical Items borrowed by a user with the given ID",
                "operationId": "returnBorrowed",
                "summary": "Return borrowed Physical Items"
            }
        },
        "/v1/members/{id}/userpicklist": {
            "get": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPickList"
                                }
                            }
                        },
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Gets User's Picklist, recently used RM Classifications",
                "operationId": "getUserPicklist",
                "summary": "Get User's Picklist"
            }
        },
        "/v1/members/{id}/disposition/changereviewdecision": {
            "post": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "objIdList": {
                                        "description": "List of Item IDs concatenated with stage count",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "applyTo": {
                                        "description": "Scope of changes: Apply change review decision to items on the page (thisPage), or to all items (all).",
                                        "type": "string"
                                    },
                                    "bSingle": {
                                        "description": "Flag indicating if single item was selected for processing",
                                        "type": "boolean"
                                    },
                                    "decision": {
                                        "description": "New review decision",
                                        "type": "string"
                                    },
                                    "dispNodeID": {
                                        "description": "ID of disposition search",
                                        "type": "integer"
                                    },
                                    "qDate": {
                                        "description": "Snapshot date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "reviewComment": {
                                        "description": "Review comments",
                                        "type": "string"
                                    },
                                    "reviewerID": {
                                        "description": "ID of user specified as a reviewer",
                                        "type": "integer"
                                    },
                                    "reviewerstep": {
                                        "description": "First or second review step",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "objIdList",
                                    "decision",
                                    "dispNodeID",
                                    "qDate",
                                    "reviewerID",
                                    "reviewerstep"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Change review decision for items in disposition search",
                "summary": "Change review decision for items in disposition search"
            }
        },
        "/v1/members/{id}/disposition/changeactions": {
            "post": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "objIdList": {
                                        "description": "List of Item IDs concatenated with stage count",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "applyto": {
                                        "description": "Scope of changes: Apply change disposition action to items on the page (thisPage), or to all items (all).",
                                        "type": "string"
                                    },
                                    "bSingle": {
                                        "description": "Flag indicating if single item was selected for processing",
                                        "type": "boolean"
                                    },
                                    "dispAction": {
                                        "description": "* `0`  \"None\" * `1`  \"Change Status\" * `7`  \"Close\" * `8`  \"Finalize Record\" * `9`  \"Mark Official\" * `10` \"Export\" * `11` \"Update Storage Provider\" * `12` \"Delete Electronic Format\" * `15` \"Purge Versions\" * `16` \"Make Rendition\" * `32` \"Destroy\"\n",
                                        "type": "string"
                                    },
                                    "dispNodeID": {
                                        "description": "ID of disposition search",
                                        "type": "integer"
                                    },
                                    "makeRendition": {
                                        "description": "Flag indicating if Mark Official action should include make rendition",
                                        "type": "integer"
                                    },
                                    "qdate": {
                                        "description": "Snapshot date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "reviewerID": {
                                        "description": "ID of user specified as a reviewer",
                                        "type": "integer"
                                    },
                                    "reviewerstep": {
                                        "description": "First or second review step",
                                        "type": "integer"
                                    },
                                    "statusCode": {
                                        "description": "Status code",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "objIdList",
                                    "dispAction",
                                    "dispNodeID",
                                    "qdate",
                                    "reviewerID",
                                    "reviewerstep"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Change disposition action for items in disposition search",
                "summary": "Change disposition action for items in disposition search"
            }
        },
        "/v1/members/{id}/disposition/performactions": {
            "post": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "objIdList": {
                                        "description": "List of Item IDs concatenated with stage count",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "applyto": {
                                        "description": "Scope of changes:Perform disposition actions to items on the page (thisPage), or to all items (all).",
                                        "type": "string"
                                    },
                                    "bSingle": {
                                        "description": "Flag indicating if single item was selected for processing",
                                        "type": "boolean"
                                    },
                                    "dispNodeID": {
                                        "description": "ID of disposition search",
                                        "type": "integer"
                                    },
                                    "qdate": {
                                        "description": "Snapshot date",
                                        "format": "date",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "objIdList",
                                    "dispNodeID",
                                    "qdate",
                                    "reviewerID",
                                    "reviewerstep"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Perform disposition action on items in disposition search",
                "summary": "Perform disposition action on items in disposition search"
            }
        },
        "/v1/members/{id}/disposition/finishreview": {
            "post": {
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "ID of disposition search",
                                        "type": "integer"
                                    },
                                    "qdate": {
                                        "description": "Snapshot date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "reviewerid": {
                                        "description": "ID of user specified as a reviewer",
                                        "type": "integer"
                                    },
                                    "reviewerstep": {
                                        "description": "First or second review step",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id",
                                    "qdate",
                                    "reviewerid",
                                    "reviewerstep"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a member for {id}"
                    }
                },
                "tags": [
                    "Members"
                ],
                "description": "Finish review for specified reviewer",
                "summary": "Finish review for specified reviewer"
            }
        },
        "/v1/nodes/{id}/circulation": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Circulation_info"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Gets borrow and request information of a Physical Item with the given ID",
                "operationId": "getCirculation",
                "summary": "Get borrow and request information of Physical Item with the given ID"
            }
        },
        "/v1/nodes/{id}/assign_locator": {
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "facility": {
                                        "description": "Facility",
                                        "type": "string"
                                    },
                                    "area": {
                                        "description": "Area",
                                        "type": "string"
                                    },
                                    "box_locator": {
                                        "description": "Box Locator",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Failed to assign Locator"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Assign Locator to Physical Item with the given ID",
                "summary": "Assign Locator to Physical Item with the given ID"
            }
        },
        "/v1/nodes/{id}/remove_locator": {
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Failed to remove Locator"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Removes Physical Item with the given ID from Locator",
                "summary": "Removes Physical Item with the given ID from Locator"
            }
        },
        "/v1/nodes/{id}/assign_transfer": {
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "transfer_id": {
                                        "description": "Transfer",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Failed to assign Transfer"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Assign Physical Item with the given ID to Transfer",
                "summary": "Assign Physical Item with the given ID to Transfer"
            }
        },
        "/v1/nodes/{id}/remove_transfer": {
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Failed to remove Transfer"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Removes Physical Item with the given ID from Transfer",
                "summary": "Removes Physical Item with the given ID from Transfer"
            }
        },
        "/v1/nodes/{id}/classifications": {
            "delete": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get node for {id}"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Removes all standard Classifications from the node with the given ID",
                "operationId": "Unclassify",
                "summary": "Unclassify"
            },
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/nodes_Classifications"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not get node for {id}"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Gets a list of Classifications assigned to the node with the given ID",
                "operationId": "getClassifications",
                "summary": "Get Classifications"
            },
            "post": {
                "description": "Applies Classification to the node with the given ID",
                "operationId": "AddClassifications",
                "summary": "Apply Classification",
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "class_id": {
                                        "description": "List of Classification IDs ([id1, id2]), to remove all classifications pass",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Missing required parameter"
                    }
                },
                "tags": [
                    "Nodes"
                ]
            }
        },
        "/v1/nodes/{id}/classifications/{class_id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Classification ID",
                        "in": "path",
                        "name": "class_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get node for {id}"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Removes a Classification from the node with the given ID",
                "operationId": "RemoveClassification",
                "summary": "Remove Classification"
            }
        },
        "/v1/nodes/{id}/classificationmenuitems/addclassification": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/menu_addclassification"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Returns information if Add Classification menu items should be enabled",
                "summary": "Returns information if Add Classification menu items should be enabled"
            }
        },
        "/v1/nodes/{id}/rmmenuitems/addrmclassification": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/menu_addrmclassification"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Returns information if Add RM Classification menu items should be enabled",
                "summary": "Returns information if Add RM Classification menu items should be enabled"
            }
        },
        "/v1/nodes/{id}/holds": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/node_holds"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Gets direct and indirect Holds for the node with the given ID",
                "operationId": "getHoldsForDoc",
                "summary": "Get Holds for a document"
            },
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "ID of a Hold to apply to the node",
                        "in": "query",
                        "name": "hold_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Missing LLPARAMS_LIST"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Applies a Hold to the node with the given ID",
                "operationId": "applyHold",
                "summary": "Apply Hold"
            }
        },
        "/v1/nodes/{id}/holds/{hold_id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "ID of a Hold to remove from the Node",
                        "in": "path",
                        "name": "hold_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Object does not have this Hold"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Removes a Hold from the node with the given ID",
                "operationId": "removeHold",
                "summary": "Remove Hold"
            }
        },
        "/v1/nodes/{id}/po_borrow": {
            "put": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "user_name": {
                                        "description": "Name of a User who is borrowing the Physical Item.",
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "description": "ID of a User who is borrowing the Physical Item.",
                                        "type": "integer"
                                    },
                                    "obtained_by": {
                                        "description": "Name of a user who obtained the Physical Item on behalf of another user.",
                                        "type": "string"
                                    },
                                    "obtained_by_id": {
                                        "description": "ID of a user who obtained the Physical Item on behalf of another user.",
                                        "type": "integer"
                                    },
                                    "location": {
                                        "description": "Location to be updated when item is borrowed.",
                                        "type": "string"
                                    },
                                    "borrow_date": {
                                        "description": "Date when item was borrowed.",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "return_by_date": {
                                        "description": "Date when item is to be returned.",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "borrow_comments": {
                                        "description": "Comments or reasons for borrowing.",
                                        "type": "string"
                                    },
                                    "security_override": {
                                        "description": "Flag indicating that system should allow user with only see permissions to borrow the item.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "user_name",
                                    "user_id"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Item is already borrowed"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Borrow Physical Item with the given ID",
                "operationId": "borrowPO",
                "summary": "Borrow Physical Item"
            }
        },
        "/v1/nodes/{id}/po_cancel": {
            "put": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Physical Item is not borrowed."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Cancels borrowing Physical Item with the given ID",
                "operationId": "cancelPO",
                "summary": "Cancel borrowing Physical Item"
            }
        },
        "/v1/nodes/{id}/po_flagforpickup": {
            "delete": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Object {id} is not a Physical Item or is not borrowed"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Removes Flag for Pickup for Physical Item with the given ID",
                "operationId": "cancelflagforpickupPO",
                "summary": "Remove Flag for Pickup Physical Item"
            },
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Object {id} is not a Physical Item or is not borrowed"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Flags a Physical Item with the given ID for Pickup",
                "operationId": "flagforpickupPO",
                "summary": "Flag Physical Item for Pickup"
            }
        },
        "/v1/nodes/{id}/po_pass": {
            "put": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "user_name": {
                                        "description": "Name of a User who is borrowing the Physical Item.",
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "description": "ID of a User who is borrowing the Physical Item.",
                                        "type": "integer"
                                    },
                                    "obtained_by": {
                                        "description": "Name of a user who obtained the Physical Item on behalf of another user.",
                                        "type": "string"
                                    },
                                    "obtained_by_id": {
                                        "description": "ID of a user who obtained the Physical Item on behalf of another user.",
                                        "type": "integer"
                                    },
                                    "location": {
                                        "description": "Location to be updated when item is borrowed.",
                                        "type": "string"
                                    },
                                    "borrow_date": {
                                        "description": "Date when item was borrowed.",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "return_by_date": {
                                        "description": "Date when item is to be returned.",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "borrow_comments": {
                                        "description": "Comments or reasons for borrowing.",
                                        "type": "string"
                                    },
                                    "security_override": {
                                        "description": "Flag indicating that system should allow user with only see permissions to borrow the item.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "user_name",
                                    "user_id"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Already borrowed by user [user_name]"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Passes borrowed Physical Item with the given ID to another user",
                "operationId": "passPO",
                "summary": "Pass Physical Item"
            }
        },
        "/v1/nodes/{id}/po_request": {
            "delete": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Cancels Request for a Physical Item with the given ID",
                "operationId": "cancelRequestPO",
                "summary": "Cancel Physical Item Request"
            },
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "user_id": {
                                        "description": "ID of user who is requesting Physical Item",
                                        "type": "integer"
                                    },
                                    "request_date": {
                                        "description": "Date for which Physical Item is requested",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "request_type": {
                                        "description": "Type of Request",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "Address of user requesting Physical Item",
                                        "type": "string"
                                    },
                                    "contact_person": {
                                        "description": "Additional contact information",
                                        "type": "string"
                                    },
                                    "date_of_request": {
                                        "description": "Date when request was created",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "Email of user requesting Physical Item",
                                        "type": "string"
                                    },
                                    "fax": {
                                        "description": "Fax number of user requesting Physical Item",
                                        "type": "string"
                                    },
                                    "number_of_times": {
                                        "description": "Number of times to create Request",
                                        "type": "integer"
                                    },
                                    "phone": {
                                        "description": "Phone number of user requesting Physical Item",
                                        "type": "string"
                                    },
                                    "recurrence_type": {
                                        "description": "Type of recurrence which define number of days between requests",
                                        "type": "string"
                                    },
                                    "recurring": {
                                        "description": "Flag indicating that request should be created multipple times",
                                        "type": "boolean"
                                    },
                                    "comment": {
                                        "description": "Comments",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "request_type"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Request already exists"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Requests a Physical Item with the given ID",
                "operationId": "requestPO",
                "summary": "Request Physical Item"
            }
        },
        "/v1/nodes/{id}/po_request/{user_id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Cancels Request for a Physical Item by user with the given ID",
                "operationId": "cancelUserRequestPO",
                "summary": "Cancel Physical Item Request by User"
            }
        },
        "/v1/nodes/{id}/po_return": {
            "put": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "location": {
                                        "description": "Location to be updated when item is return.",
                                        "type": "string"
                                    },
                                    "returned_date": {
                                        "description": "Date when item was returned.",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "returned_comments": {
                                        "description": "Comments added when item was returned.",
                                        "type": "string"
                                    },
                                    "return_home": {
                                        "description": "Flag indicating that item being returned should update current location to home location.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Physical Item is not borrowed."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Returns Physical Item with the given ID",
                "operationId": "returnPO",
                "summary": "Return Physical Item"
            }
        },
        "/v1/nodes/{id}/rmclassifications": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/nodes_RMClassifications"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not get node for {id}"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Gets a list of RM Classifications assigned to the node with the given ID",
                "operationId": "getRMClassifications",
                "summary": "Get RM Classifications of specific node"
            },
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Classification ID",
                        "in": "query",
                        "name": "class_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "List of Classification IDs ([id1, id2])",
                        "in": "query",
                        "name": "secondary_class_ids",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Update Cycle Period",
                        "in": "query",
                        "name": "cycle_period",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Official",
                        "in": "query",
                        "name": "official",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "RSI",
                        "in": "query",
                        "name": "rsi",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Record Status",
                        "in": "query",
                        "name": "status",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Essential",
                        "in": "query",
                        "name": "essential",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Storage Medium",
                        "in": "query",
                        "name": "storage",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Accession",
                        "in": "query",
                        "name": "accession",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Subject",
                        "in": "query",
                        "name": "subject",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Addressee(s)",
                        "in": "query",
                        "name": "addressee",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Other Addressee(s)",
                        "in": "query",
                        "name": "sent_to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Author or Originator",
                        "in": "query",
                        "name": "originator",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Originating Organization",
                        "in": "query",
                        "name": "establishment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Record Date",
                        "in": "query",
                        "name": "record_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Status Date",
                        "in": "query",
                        "name": "status_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Received Date",
                        "in": "query",
                        "name": "received_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Next Review Date",
                        "in": "query",
                        "name": "next_review_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Last Review Date",
                        "in": "query",
                        "name": "last_review_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Incorrect Cycle Period specified."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Applies RM Classification to the node with the given ID. The rm_metadataToken needs to be specified to avoid edit conflicts. To get current rm_metadataToken before performing an update, use the call 'GET /v1/nodes/{id}/rmclassifications'",
                "operationId": "AddRMClassifications",
                "summary": "Apply RM Classification"
            },
            "put": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Primary RM Classification ID",
                        "in": "query",
                        "name": "class_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "List of RM Classification ID ([id1, id2])",
                        "in": "query",
                        "name": "secondary_class_ids",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "Cycle Period",
                        "in": "query",
                        "name": "cycle_period",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Official",
                        "in": "query",
                        "name": "official",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "RSI",
                        "in": "query",
                        "name": "rsi",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Status",
                        "in": "query",
                        "name": "status",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Storage",
                        "in": "query",
                        "name": "storage",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Accession",
                        "in": "query",
                        "name": "accession",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Subject",
                        "in": "query",
                        "name": "subject",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Addressee",
                        "in": "query",
                        "name": "addressee",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sent to",
                        "in": "query",
                        "name": "sent_to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Originator",
                        "in": "query",
                        "name": "originator",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Establishment",
                        "in": "query",
                        "name": "establishment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Record Date",
                        "in": "query",
                        "name": "record_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Record Type",
                        "in": "query",
                        "name": "record_type",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Status Date",
                        "in": "query",
                        "name": "status_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Received Date",
                        "in": "query",
                        "name": "received_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Next Review Date",
                        "in": "query",
                        "name": "next_review_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Last Review Date",
                        "in": "query",
                        "name": "last_review_date",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Cannot retrieve node"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Updates the Record Details for the node with the given ID. The rm_metadataToken needs to be specified to avoid edit conflicts. To get current rm_metadataToken before performing an update, use the call 'GET /v1/nodes/{id}/rmclassifications'",
                "operationId": "updateNodeById",
                "summary": "Update Record Details"
            }
        },
        "/v1/nodes/{id}/rmclassifications/{class_id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "RM Classification ID",
                        "in": "path",
                        "name": "class_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not delete records in table RM_PartRecords"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Removes an RM Classification from the node with the given ID. The rm_metadataToken need to be specified to avoid edit conflicts. To get current rm_metadataTokens before performing an update, use the call 'GET /v1/nodes/{id}/rmclassifications'",
                "operationId": "RemoveRMClassification",
                "summary": "Remove RM Classification"
            }
        },
        "/v1/nodes/{id}/rmclassifications/{class_id}/rsis": {
            "delete": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "RM Classification ID",
                        "in": "path",
                        "name": "class_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Cannot retrieve node"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Removes RSI from the node with the given ID and given RM Classification ID",
                "operationId": "RemoveRSI",
                "summary": "Remove RSI"
            },
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Classification ID",
                        "in": "path",
                        "name": "class_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "RSI",
                        "in": "query",
                        "name": "rsi",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Incorrect RSI specified."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Assigns RSI to the node with the given ID and given RM Classification ID",
                "operationId": "assignRSI",
                "summary": "Assign RSI"
            }
        },
        "/v1/nodes/{id}/rsis": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/node_rsis"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Gets RSIs assigned to the node with the given ID",
                "operationId": "getRSI",
                "summary": "Get RSIs"
            }
        },
        "/v1/nodes/{id}/rsi/{rsi}/GetRSIDetails": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "RSI",
                        "in": "path",
                        "name": "rsi",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/node_RSISchedules"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Gets RSI schedulers of the node with the given ID for specified RSI",
                "summary": "Gets RSI schedulers of the node with the given ID for specified RSI"
            }
        },
        "/v1/nodes/{id}/rsi/{rsi}/GetRSIDetailsForm": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "RSI",
                        "in": "path",
                        "name": "rsi",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/node_RSIScheduleForm"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Gets the Alpaca form with data to show RSI Schedule details for specific node and specified RSI",
                "summary": "Gets the Alpaca form with data to show RSI Schedule details for specific node and specified RSI"
            }
        },
        "/v1/nodes/{id}/securityclearances": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeSecurityClearance"
                                }
                            }
                        },
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Gets Security Clearance Level and Supplemental Markings for the node with the given ID",
                "operationId": "getSecurityClearance",
                "summary": "Get Security Clearance"
            },
            "put": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "clearance_level": {
                                        "description": "Security Clearance Level",
                                        "type": "integer"
                                    },
                                    "supplemental_markings": {
                                        "description": "Supplemental Markings (['marking1', 'marking2'])",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Updates Security Clearance Level and Supplemental Markings for the node with the given ID",
                "operationId": "updateSecurityClearance",
                "summary": "Update Security Clearance"
            }
        },
        "/v1/nodes/{id}/xrefs": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/nodes_xrefs"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Gets Cross-References that are assigned to the node with the given ID",
                "operationId": "getXRefs",
                "summary": "Get Cross-References"
            },
            "post": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Cross-Reference Type",
                        "in": "query",
                        "name": "xref_type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Cross-Referenced Node ID",
                        "in": "query",
                        "name": "xref_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Comments",
                        "in": "query",
                        "name": "comment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Assigns a Cross-Reference to the node with the given ID",
                "operationId": "addXRef",
                "summary": "Assigns Cross-Reference"
            }
        },
        "/v1/nodes/{id}/xrefs/{xref_type}/refnodes/{xref_id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Cross-Reference Type",
                        "in": "path",
                        "name": "xref_type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Cross-Referenced Node ID",
                        "in": "path",
                        "name": "xref_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Cross reference does not exist."
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Removes a Cross-Reference from the node with the given ID",
                "operationId": "removeXRef",
                "summary": "Remove Cross-Reference"
            }
        },
        "/v1/boxlocators": {
            "get": {
                "parameters": [
                    {
                        "description": "Facility by which to search Locators",
                        "in": "query",
                        "name": "where_facility",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Area by which to search Locators",
                        "in": "query",
                        "name": "where_area",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Locator by which to search Locators",
                        "in": "query",
                        "name": "where_box_loactor",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Locators"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "StorageManagement"
                ],
                "description": "Search Locators",
                "summary": "Search Locators"
            }
        },
        "/v1/boxtransfer": {
            "get": {
                "parameters": [
                    {
                        "description": "Transfer by which to search",
                        "in": "query",
                        "name": "where_transfer_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Type of dates by which to search Transfer;  * `1` All * `2` Transfer not received * `3` Transfer Received  * `4` Transfer not sent \n",
                        "in": "query",
                        "name": "where_searchDates",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Content from date",
                        "in": "query",
                        "name": "where_contentFromDate",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Content to date",
                        "in": "query",
                        "name": "where_contentToDate",
                        "required": false,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Transfers"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "StorageManagement"
                ],
                "description": "Search Transfers",
                "summary": "Search Transfers"
            }
        },
        "/v1/assignbox": {
            "get": {
                "parameters": [
                    {
                        "description": "Unique ID to search Physical Item Boxes",
                        "in": "query",
                        "name": "unique_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Name to search Physical Item Boxes",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Locator type to search Physical Item Boxes",
                        "in": "query",
                        "name": "locator_type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Boxes"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Search Physical Item Boxes",
                "summary": "Search Physical Item Boxes"
            }
        },
        "/v1/pocodes": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/POCodes"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "tags": [
                    "PO codes"
                ],
                "description": "Gets all Physical Objects codes",
                "operationId": "GetAllPOCodes",
                "summary": "Gets all Physical Objects codes"
            }
        },
        "/v1/pocodes/{name}": {
            "get": {
                "parameters": [
                    {
                        "description": "Name of the Physical Object code; for multiple names, separate by & (for example :'locations&facilities')",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/POCodes"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "tags": [
                    "PO codes"
                ],
                "description": "Gets Physical Objects codes for the given property name; all other codes will be returned as empty",
                "operationId": "GetPOCodes",
                "summary": "Get Physical Objects codes"
            },
            "post": {
                "parameters": [
                    {
                        "description": "Name of the Physical Object code; for multiple names, separate by & (for example :'locations&facilities')",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "where": {
                                        "description": "Search criteria used for External Borrower or External Client to return subset of codes",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/POCodes"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "tags": [
                    "PO codes"
                ],
                "description": "Gets Physical Objects codes for the given property name; all other codes will be returned as empty",
                "summary": "Get Physical Objects codes"
            }
        },
        "/v1/pomediatypes": {
            "get": {
                "parameters": [
                    {
                        "description": "ID of parent object of Physical Item. If parent is a Physical Item Container, list of available Physical Items Types can be restricted.",
                        "in": "query",
                        "name": "parentID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaTypes"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Missing parentID parameter."
                    }
                },
                "tags": [
                    "PO codes"
                ],
                "description": "Get Physical Item Types",
                "summary": "Get Physical Item Types"
            }
        },
        "/v1/pocirculation/request": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Physical Items IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "user_id": {
                                        "description": "ID of user who is requesting Physical Item",
                                        "type": "integer"
                                    },
                                    "request_date": {
                                        "description": "Date for which Physical Item is requested",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "request_type": {
                                        "description": "Type of Request",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "Address of user requesting Physical Item",
                                        "type": "string"
                                    },
                                    "contact": {
                                        "description": "Additional contact information",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "Email of user requesting Physical Item",
                                        "type": "string"
                                    },
                                    "fax": {
                                        "description": "Fax number of user requesting Physical Item",
                                        "type": "string"
                                    },
                                    "times": {
                                        "description": "Number of times to create Request",
                                        "type": "integer"
                                    },
                                    "phone": {
                                        "description": "Phone number of user requesting Physical Item",
                                        "type": "string"
                                    },
                                    "repeat_every": {
                                        "description": "Time interval to repeat Request ( Daily, Monthly, Weekly )",
                                        "type": "string"
                                    },
                                    "comments": {
                                        "description": "Comments",
                                        "type": "string"
                                    },
                                    "emailrequest": {
                                        "description": "Flag indicating to send email when Request is created",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "ids",
                                    "user_id"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Missing required parameter"
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Request Physical Items",
                "summary": "Request Physical Items"
            }
        },
        "/v1/pocirculation/borrow": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Physical Items IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "borrower": {
                                        "description": "ID of user who is borrowing Physical Item",
                                        "type": "integer"
                                    },
                                    "external_borrower": {
                                        "description": "Name of external borrower who is borrowing Physical Item",
                                        "type": "string"
                                    },
                                    "borrow_date": {
                                        "description": "Borrow date of Physical Item",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "return_date": {
                                        "description": "Return date of Physical Item",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "obtainedby": {
                                        "description": "ID of user who obtained the Physical Item on behalf of another user.",
                                        "type": "integer"
                                    },
                                    "external_obtainedby": {
                                        "description": "Name of external borrower who obtained the Physical Item on behalf of another user.",
                                        "type": "string"
                                    },
                                    "current_location": {
                                        "description": "New current location",
                                        "type": "string"
                                    },
                                    "comments": {
                                        "description": "Borrow comments",
                                        "type": "string"
                                    },
                                    "preapprove": {
                                        "description": "Flag indicating if security override should be pre-approved",
                                        "type": "boolean"
                                    },
                                    "acknowledge": {
                                        "description": "* `1`  Required * `2`  Not Required * `3`  Confirmed",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "ids",
                                    "borrower",
                                    "borrow_date"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Missing required parameter"
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Borrow Physical Items",
                "summary": "Borrow Physical Items"
            }
        },
        "/v1/pocirculation/pometadata": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Physical Items IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "homeLocation": {
                                        "description": "Home Location",
                                        "type": "string"
                                    },
                                    "curLocation": {
                                        "description": "Current Location",
                                        "type": "string"
                                    },
                                    "LocatorType": {
                                        "description": "Locator Type",
                                        "type": "string"
                                    },
                                    "RefRate": {
                                        "description": "Reference Rate",
                                        "type": "string"
                                    },
                                    "OffsiteStorID": {
                                        "description": "Offsite Storage ID",
                                        "type": "string"
                                    },
                                    "TemporaryID": {
                                        "description": "Temporary ID",
                                        "type": "string"
                                    },
                                    "client_ID": {
                                        "description": "ID of user set as box client",
                                        "type": "integer"
                                    },
                                    "client_Name": {
                                        "description": "Name of a user or External Client set as box client",
                                        "type": "string"
                                    },
                                    "poFromDate": {
                                        "description": "From date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "poToDate": {
                                        "description": "To date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "locatorTypeRemove": {
                                        "description": "Flag indicating to remove Locator Type",
                                        "type": "boolean"
                                    },
                                    "refrateRemove": {
                                        "description": "Flag indicating to remove Reference Rate",
                                        "type": "boolean"
                                    },
                                    "clientRemove": {
                                        "description": "Flag indicating to remove Box Client",
                                        "type": "boolean"
                                    },
                                    "offsiteStorIDRemove": {
                                        "description": "Flag indicating to remove Offsite Storage ID",
                                        "type": "boolean"
                                    },
                                    "tempIDRemove": {
                                        "description": "Flag indicating to remove Temporary ID",
                                        "type": "boolean"
                                    },
                                    "fromDateRemove": {
                                        "description": "Flag indicating to remove From date",
                                        "type": "boolean"
                                    },
                                    "toDateRemove": {
                                        "description": "Flag indicating to remove To date",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "ids"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Missing required parameter"
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Update Physical Item metadata",
                "summary": "Update Physical Item metadata"
            }
        },
        "/v1/pocirculation/return": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Physical Items IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "return_action": {
                                        "description": "Action to perform on borrowed Physical Item * `1`  Pass * `2`  Cancel borrow * `3`  Return",
                                        "type": "integer"
                                    },
                                    "new_borrow_date": {
                                        "description": "New borrow date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "new_return_date": {
                                        "description": "New return date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "borrower": {
                                        "description": "ID of a user who is borrowing Physical Item",
                                        "type": "integer"
                                    },
                                    "external_borrower": {
                                        "description": "Name of external borrower who is borrowing Physical Item",
                                        "type": "string"
                                    },
                                    "obtainedby": {
                                        "description": "ID of user who obtained the Physical Item on behalf of another user.",
                                        "type": "integer"
                                    },
                                    "external_obtainedby": {
                                        "description": "Name of external borrower who obtained the Physical Item on behalf of another user.",
                                        "type": "string"
                                    },
                                    "current_location": {
                                        "description": "New current location",
                                        "type": "string"
                                    },
                                    "comments": {
                                        "description": "Borrow comments",
                                        "type": "string"
                                    },
                                    "preapprove": {
                                        "description": "Flag indicating if security override should be pre-approved",
                                        "type": "boolean"
                                    },
                                    "acknowledge": {
                                        "description": "* `1`  Required * `2`  Not Required * `3`  Confirmed",
                                        "type": "integer"
                                    },
                                    "return_home": {
                                        "description": "Flag indicating to update Current location with Home location when Physical Item is returned",
                                        "type": "boolean"
                                    },
                                    "return_date": {
                                        "description": "Return date",
                                        "format": "date",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ids",
                                    "return_action"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Missing required parameter"
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Return Physical Item",
                "summary": "Return Physical Item"
            }
        },
        "/v1/pocirculation/flagforpickup": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Physical Items IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "pendingids": {
                                        "description": "List of Physical Items IDs with pending acknowledge",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "ids"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Missing required parameter"
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Flag Physical Item for pick up",
                "summary": "Flag Physical Item for pick up"
            }
        },
        "/v1/pocirculation/acknowledge": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Physical Items IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "ids"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Missing required parameter"
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Acknowledge receiving Physical Item",
                "summary": "Acknowledge receiving Physical Item"
            }
        },
        "/v1/pocirculation/assignbox": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Physical Items IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "node_id": {
                                        "description": "ID of Physical Item Box",
                                        "type": "integer"
                                    },
                                    "update_status": {
                                        "description": "Flag indicating to update status of Physical Item with box status",
                                        "type": "boolean"
                                    },
                                    "update_location": {
                                        "description": "Flag indicating to update Location of Physical Item with box location",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "ids",
                                    "node_id"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Missing required parameter"
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Assign box to Physical Item",
                "summary": "Assign box to Physical Item"
            }
        },
        "/v1/pocirculation/removebox": {
            "post": {
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Physical Items IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "box_id": {
                                        "description": "ID of Physical Item Box",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Missing required parameter"
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Remove Physical Item from box",
                "summary": "Remove Physical Item from box"
            }
        },
        "/v1/pocirculation/settings": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PhysicalObjectsSettings"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "Circulation"
                ],
                "description": "Returns list Physical Object settings",
                "summary": "Returns list Physical Object settings"
            }
        },
        "/v1/rmqueues": {
            "post": {
                "parameters": [
                    {
                        "description": "ID of the Record to be finalized",
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Name of the task to add to the RM Queue (possible values are:'rm_FinalizeRecord')",
                        "in": "query",
                        "name": "task_name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Flag indicating if the action should be applied to subitems or not.",
                        "in": "query",
                        "name": "apply_subitems",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskStatus"
                                }
                            }
                        },
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Error triggering distributed agent"
                    },
                    "403": {
                        "description": "Accessibility error. Not enough permissions."
                    },
                    "404": {
                        "description": "The object does not exist"
                    }
                },
                "tags": [
                    "RMqueues"
                ],
                "description": "Add a new element to RM Queue",
                "operationId": "addRMQueue",
                "summary": "Add to RM Queue"
            }
        },
        "/v1/rmqueues/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "Queue ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskStatus"
                                }
                            }
                        },
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Finalize operation can not be aborted."
                    },
                    "404": {
                        "description": "Error retrieving cache"
                    }
                },
                "tags": [
                    "RMqueues"
                ],
                "description": "Abort RM Queue",
                "operationId": "DeleteQueue",
                "summary": "Abort RM Queue"
            },
            "get": {
                "parameters": [
                    {
                        "description": "Queue ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskStatus"
                                }
                            }
                        },
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Task name '[name]' is not supported"
                    },
                    "404": {
                        "description": "Error retrieving cache"
                    }
                },
                "tags": [
                    "RMqueues"
                ],
                "description": "Gets RM Queue Status",
                "operationId": "GetQueue",
                "summary": "Get RM Queue Status"
            }
        },
        "/v1/securityclearances": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityClearance"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "tags": [
                    "SecurityClearances"
                ],
                "description": "Gets the Security Clearance Levels and Supplemental Markings for the current user",
                "operationId": "GetSecurityClearance",
                "summary": "Get Security Clearance"
            }
        },
        "/v1/UpdateSecurityClearanceLevel": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Item IDs",
                                        "type": "integer"
                                    },
                                    "currentSecurity": {
                                        "description": "Security Clearance Level (if not passed, Security Clearance Level will be removed)",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "ids"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "Missing parameter or format not correct"
                    }
                },
                "tags": [
                    "SecurityClearances"
                ],
                "description": "Update the Security Clearance Levels for specified list of items",
                "operationId": "UpdateSecurityClearanceLevel",
                "summary": "Update Security Clearance Level"
            }
        },
        "/v1/UpdateSupplementalMarkings": {
            "post": {
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Item IDs",
                                        "type": "integer"
                                    },
                                    "action": {
                                        "description": "Action to perform  * `2`  Assign Supplemental Markings * `3`  Remove Supplemental Markings",
                                        "type": "integer"
                                    },
                                    "supplemental_markings": {
                                        "description": "List of Supplemental Markings",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "Missing parameter or format not correct"
                    }
                },
                "tags": [
                    "SecurityClearances"
                ],
                "description": "Update the Supplemental Markings for specified list of items",
                "operationId": "UpdateSupplementalMarkings",
                "summary": "Update Supplemental Markings"
            }
        },
        "/v1/securityclearances/settings": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecuritySettings"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "tags": [
                    "SecurityClearances"
                ],
                "description": "Gets the Security Clearance Levels and Supplemental Markings for the current user",
                "summary": "Get Security Clearance settings"
            }
        },
        "/v1/xrefs": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/XRefInfos"
                                }
                            }
                        },
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Accessibility error. Not enough permissions."
                    }
                },
                "tags": [
                    "Xrefs"
                ],
                "description": "Gets a list of Cross-References",
                "operationId": "GetXRefs",
                "summary": "Get Cross-References"
            },
            "post": {
                "parameters": [
                    {
                        "description": "Cross-Reference Type",
                        "in": "query",
                        "name": "xref_type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Related Cross-Reference Type",
                        "in": "query",
                        "name": "related_code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID of an associated Hold",
                        "in": "query",
                        "name": "hold_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Description of the Cross-Reference",
                        "in": "query",
                        "name": "desc",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Description of the related Cross-Reference",
                        "in": "query",
                        "name": "related_desc",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Please provide integer value for the Hold ID"
                    }
                },
                "tags": [
                    "Xrefs"
                ],
                "description": "Create a new Cross-Reference",
                "operationId": "createXRef",
                "summary": "Create Cross-Reference"
            }
        },
        "/v1/xrefs/{xref_type}": {
            "get": {
                "parameters": [
                    {
                        "description": "Cross-Reference Type",
                        "in": "path",
                        "name": "xref_type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/XRefInfo"
                                }
                            }
                        },
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not get a Cross-Reference"
                    }
                },
                "tags": [
                    "Xrefs"
                ],
                "description": "Gets metadata for the Cross-Reference with the given Cross-Reference Type.",
                "operationId": "getXRef",
                "summary": "Get Cross-Reference info"
            },
            "delete": {
                "parameters": [
                    {
                        "description": "Cross-Reference Type",
                        "in": "path",
                        "name": "xref_type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Please specify a Cross-Reference type"
                    },
                    "404": {
                        "description": "Cross reference does not exist."
                    }
                },
                "tags": [
                    "Xrefs"
                ],
                "description": "Delete specified Cross-Reference type if it is not in use",
                "operationId": "deleteXRef",
                "summary": "Delete specified Cross-Reference type if it is not in use"
            }
        },
        "/v2/rsischedules": {
            "put": {
                "tags": [
                    "RSIs"
                ],
                "summary": "Update RSI metadata",
                "operationId": "updateRSISchedule",
                "requestBody": {
                    "description": "RSI fields to update",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RSIUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RSIs"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "RSIs"
                ],
                "summary": "Create a new RSI",
                "operationId": "createRSI",
                "requestBody": {
                    "description": "Parameters of newly created RSI",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RSI"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v2/rsischedules/{id}": {
            "put": {
                "tags": [
                    "RSIs"
                ],
                "summary": "Update RSI metadata",
                "operationId": "updateRSIScheduleById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "RSI ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "RSI fields to update",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RSIUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RSIs"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "RSIs"
                ],
                "summary": "Delete RSI",
                "operationId": "deleteRSIById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "RSI ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v1/recordsmanagement/fieldinfos": {
            "get": {
                "tags": [
                    "RecordsManagement"
                ],
                "summary": "Definitions of RM metadata fields",
                "description": "Definitions of RM metadata fields",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rm_fields"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                }
            }
        },
        "/v1/recordsmanagement/functionaccessinfos": {
            "get": {
                "tags": [
                    "RecordsManagement"
                ],
                "summary": "List of functional access assigned to a user",
                "description": "List of functional access assigned to a user",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rm_functions"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                }
            }
        },
        "/v1/recordsmanagement/rmcodes": {
            "get": {
                "tags": [
                    "RecordsManagement"
                ],
                "summary": "List of records management codes",
                "description": "List of records management codes",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rm_codes"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                }
            }
        },
        "/v2/recordsmanagement/rmcodes": {
            "get": {
                "tags": [
                    "RM codes"
                ],
                "summary": "Get lists of codes used in RSI",
                "operationId": "getRSICodes",
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RMCodesV2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/rsis": {
            "get": {
                "tags": [
                    "RSIs"
                ],
                "summary": "Returns a list of RSIs",
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RSIsNames"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "post": {
                "tags": [
                    "RSIs"
                ],
                "summary": "Returns a list of RSIs filtered by search clause",
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "query": {
                                        "description": "RSI name used to filter search results",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RSIsNames"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/v2/rsis": {
            "get": {
                "tags": [
                    "RSIs"
                ],
                "summary": "Returns a list of RSIs along with their Schedules",
                "operationId": "getRSISchedules",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "page to be returned; integer number starting from 1; default value is 1",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "number of items on the page; default value is 25",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RSIs"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/rsis/{id}": {
            "get": {
                "tags": [
                    "RSIs"
                ],
                "summary": "Get an RSI along with its Schedules",
                "operationId": "getRSISchedule",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "RSI ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to be returned; integer number starting from 1; default value is 1",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of items on the page; default value is 25",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RSIs"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/rsis/{rsiid}/schedules/{id}": {
            "get": {
                "tags": [
                    "RSIs"
                ],
                "summary": "Get RSI Schedule",
                "parameters": [
                    {
                        "name": "rsiid",
                        "in": "path",
                        "description": "RSI ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "RSI Schedule ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RSIScheduleInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/rsischedule": {
            "put": {
                "tags": [
                    "RSI"
                ],
                "summary": "Update RSI metadata",
                "operationId": "updateRSIByName",
                "requestBody": {
                    "description": "RSI fields to update",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RSIUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RSIs"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v2/rsischedules/{id}/stages/{stageId}": {
            "put": {
                "tags": [
                    "RSI Schedules"
                ],
                "summary": "Update an RSI Schedule",
                "operationId": "updateSchedule",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "RSI ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "stageId",
                        "in": "path",
                        "description": "RSI Schedule ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Parameters of RSI Schedule",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RSIScheduleUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "RSI Schedules"
                ],
                "summary": "Delete an RSI Schedule",
                "operationId": "deleteSchedule",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "RSI ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "stageId",
                        "in": "path",
                        "description": "RSI Schedule ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v2/rsischedules/{id}/stages": {
            "post": {
                "tags": [
                    "RSI Schedules"
                ],
                "summary": "Create a new RSI Schedule",
                "operationId": "createSchedule",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "RSI ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Parameters of newly created RSI",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RSISchedule"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "body"
            }
        },
        "/v2/holds": {
            "get": {
                "tags": [
                    "Holds"
                ],
                "summary": "Get a list of Holds",
                "operationId": "getHolds",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to be returned; integer number starting from 1",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of items on the page",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Holds"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/holds/{id}": {
            "get": {
                "tags": [
                    "Holds"
                ],
                "summary": "Get information about specific Hold",
                "description": "Get information about specific Hold",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Hold. To retrieve Hold by Hold Name add parameter 'holdName' (ID will be ignored) eg.'?holdname=HOLD1'",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResultsHold"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/hold": {
            "get": {
                "tags": [
                    "Hold"
                ],
                "summary": "Get information about specific Hold.",
                "description": "Get information about specific Hold",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the Hold",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "holdname",
                        "in": "query",
                        "description": "Name of the Hold",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResultsHold"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Hold"
                ],
                "summary": "Delete a Hold",
                "description": "Delete a Hold by its ID or name. One of these parameters MUST be provided.",
                "operationId": "deleteHold",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the Hold",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "holdname",
                        "in": "query",
                        "description": "Name of the Hold",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation if the 'results.ok' field in response equals true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/classifieditems/{id}": {
            "get": {
                "parameters": [
                    {
                        "description": "ID of Classification for which we retrieve classified items",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/view_ClassifiedItems"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not get node for {id}"
                    }
                },
                "tags": [
                    "ClassifiedItems"
                ],
                "description": "Gets next page of items classified with the given Classification ID",
                "summary": "Gets next page of items classified with the given Classification ID"
            }
        },
        "/v2/classifieditems/{id}/page": {
            "get": {
                "parameters": [
                    {
                        "description": "Node ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/view_ClassifiedItems"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not get node for {id}"
                    }
                },
                "tags": [
                    "ClassifiedItems"
                ],
                "description": "Gets next page  of Content Server items assigned to the Classification with the given ID",
                "summary": "Get items classified with specific Classification"
            }
        },
        "/v2/members/usersecurity": {
            "get": {
                "tags": [
                    "UserSecurity"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/form_user_security_profile"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "description": "Gets the Alpaca form to show user security in profile",
                "summary": "Gets the Alpaca form to show user security in profile"
            }
        },
        "/v2/members/usersecurity/simple": {
            "get": {
                "tags": [
                    "UserSecurity"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSecurity"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "description": "Return Security Level and Current Security Level of a user",
                "summary": "Return Security Level and Current Security Level of a user"
            }
        },
        "/v2/members/usersecurity/{userID}/securityclearancelevel": {
            "post": {
                "tags": [
                    "UserSecurity"
                ],
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "securityLevel": {
                                        "description": " Security Level (to remove user Security Clearance Level, pass zero)",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not update user Security Clearance Level"
                    }
                },
                "description": "Update user Security Clearance Level",
                "summary": "Update user Security Clearance Level"
            }
        },
        "/v2/members/usersecurity/{userID}/supplementalmarkings": {
            "post": {
                "tags": [
                    "UserSecurity"
                ],
                "parameters": [
                    {
                        "description": "User ID",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "suppMarks": {
                                        "description": "Supplemental Markings separated by space (to remove, pass empty list)",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Could not set user Supplemental Markings"
                    }
                },
                "description": "Update user Supplemental Markings",
                "summary": "Update user Supplemental Markings"
            }
        },
        "/v2/members/borrowed": {
            "get": {
                "tags": [
                    "Members"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/borrowed_physical_items"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "description": "Returns Physical Items borrowed by user",
                "summary": "Returns Physical Items borrowed by user"
            }
        },
        "/v2/members/requested": {
            "get": {
                "tags": [
                    "Members"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/requested_physical_items"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "description": "Returns Physical Items requested by user",
                "summary": "Returns Physical Items requested by user"
            },
            "delete": {
                "parameters": [
                    {
                        "description": "List of Physical Item IDs",
                        "in": "query",
                        "name": "ids",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Members"
                ],
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "400": {
                        "description": "Missing required parameter"
                    }
                },
                "description": "Cancels requests for Physical Items",
                "summary": "Cancels requests for Physical Items"
            }
        },
        "/v1/rmclassifications/createinfo": {
            "get": {
                "parameters": [
                    {
                        "description": "Sub Type",
                        "in": "query",
                        "name": "objType",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Parent ID",
                        "in": "query",
                        "name": "parentId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RMClassificationInfo"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Returns information required to display Records Management tab",
                "summary": "Returns information required to display Records Management tab"
            }
        },
        "/v1/rmclassifications/settings": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RMSettings"
                                }
                            }
                        },
                        "description": "Ok"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Returns Records Management settings",
                "summary": "Returns Records Management settings"
            }
        },
        "/v1/rmclassifications/RMMetadata": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "accession": {
                                        "description": "A new Accession code",
                                        "type": "string"
                                    },
                                    "docDate": {
                                        "description": "A new Record date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "essential": {
                                        "description": "A new Essential code",
                                        "type": "string"
                                    },
                                    "fileStatus": {
                                        "description": "A new Status code",
                                        "type": "string"
                                    },
                                    "ids": {
                                        "description": "List of Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "nextReviewDate": {
                                        "description": "A new Next review date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "official": {
                                        "description": "Official flag",
                                        "type": "integer"
                                    },
                                    "rsi": {
                                        "description": "A new RSI",
                                        "type": "string"
                                    },
                                    "rsiRemove": {
                                        "description": "Flag indicating if RSI should be removed from the record",
                                        "type": "boolean"
                                    },
                                    "statusDate": {
                                        "description": "A new Status date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "storage": {
                                        "description": "A new Storage code",
                                        "type": "string"
                                    },
                                    "vitalRecordCycle": {
                                        "description": "* `365`  Daily * `7` Weekly * `1`  Monthly * `2`  Semi-annual based on calendar year * `3`  Quarterly based on calendar year * `12`  Annual based on calendar year",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ids"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "ID is required"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Finalize a list of records",
                "summary": "Finalize a list of records"
            }
        },
        "/v1/rmclassifications/finalizerecords": {
            "put": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "ids"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "ID is not an integer or is missing"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Update Records management specific metadata",
                "summary": "Update Records management specific metadata"
            }
        },
        "/v1/rmclassifications/dispositionholds": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "objIdList": {
                                        "description": "List of Item IDs concatenated with stage count",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "dispNodeID": {
                                        "description": "ID of disposition search",
                                        "type": "integer"
                                    },
                                    "qDate": {
                                        "description": "Snapshot date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "reviewerID": {
                                        "description": "ID of a user who is specified as a first reviewer",
                                        "type": "integer"
                                    },
                                    "reviewerID2": {
                                        "description": "ID of a user who is specified as a second reviewer",
                                        "type": "integer"
                                    },
                                    "holdID": {
                                        "description": "Hold ID",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "objIdList",
                                    "holdID"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Hold ID is not specified"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Apply Hold to the items in disposition search",
                "summary": "Apply Hold to the items in disposition search"
            }
        },
        "/v1/rmclassifications/dispositionaccession": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "objIdList": {
                                        "description": "List of Item IDs concatenated with stage count",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "dispNodeID": {
                                        "description": "ID of disposition search",
                                        "type": "integer"
                                    },
                                    "qDate": {
                                        "description": "Snapshot date",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "reviewerID": {
                                        "description": "ID of a user who is specified as a first reviewer",
                                        "type": "integer"
                                    },
                                    "reviewerID2": {
                                        "description": "ID of a user who is specified as a second reviewer",
                                        "type": "integer"
                                    },
                                    "accession": {
                                        "description": "A new accession code",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "objIdList"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "ID is not an integer or is missing"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Apply new Accession code to the items in disposition search",
                "summary": "Apply new Accession code to the items in disposition search"
            }
        },
        "/v1/rmclassifications/applyhold": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "holdID": {
                                        "description": "Hold ID",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "ids",
                                    "holdID"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Hold ID is not specified"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Apply Hold to the items",
                "summary": "Apply Hold to the items"
            }
        },
        "/v1/rmclassifications/removehold": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "holdID": {
                                        "description": "Hold ID",
                                        "type": "integer"
                                    },
                                    "removeComments": {
                                        "description": "Comments",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ids",
                                    "holdID"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "Hold ID is not specified"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Remove Hold from the items",
                "summary": "Remove Hold from the items"
            }
        },
        "/v1/rmclassifications/assignxref": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "xref_id": {
                                        "description": "ID of item that you select to assign as a cross-reference",
                                        "type": "integer"
                                    },
                                    "xref_type": {
                                        "description": "Cross-reference type",
                                        "type": "string"
                                    },
                                    "comments": {
                                        "description": "Comments",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ids",
                                    "xref_id",
                                    "xref_type"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "ID is not specified or cross-reference type is not specified"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Assign Cross reference to specified items",
                "summary": "Assign Cross reference to specified items"
            }
        },
        "/v1/rmclassifications/batchAddClassification": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "classID": {
                                        "description": "ID of Classification to apply",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "ids",
                                    "classID"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "ID is not specified"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Assign RM or standard Classification to specified items",
                "summary": "Assign RM or standard Classification to specified items"
            }
        },
        "/v1/rmcassifications/batchRemoveClassification": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ids": {
                                        "description": "List of Item IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "classID": {
                                        "description": "ID of Classification to apply",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "ids",
                                    "classID"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "No response was specified"
                    },
                    "404": {
                        "description": "ID is not specified"
                    }
                },
                "tags": [
                    "RecordsManagement"
                ],
                "description": "Remove RM or standard Classification from specified items",
                "summary": "Remove RM or standard Classification from specified items"
            }
        },
        "/v1/rmstatistics/holds": {
            "get": {
                "tags": [
                    "RecordsManagement"
                ],
                "summary": "Returns number of Holds",
                "description": "Returns number of Holds",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rm_stats_hold"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not retrieve data"
                    }
                }
            }
        },
        "/v1/rmstatistics/rsis": {
            "get": {
                "tags": [
                    "RecordsManagement"
                ],
                "summary": "Returns number of items with specified RSI",
                "description": "Returns number of items with specified RSI",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rm_stats_rsi"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not retrieve data"
                    }
                }
            }
        },
        "/v1/rmclassifications/managedrecords": {
            "get": {
                "tags": [
                    "RecordsManagement"
                ],
                "summary": "Returns number of items classified with RM Classification",
                "description": "Returns number of items classified with RM Classification",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rm_stats_classified"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not retrieve data"
                    }
                }
            }
        },
        "/v1/rmclassifications/dispositions": {
            "get": {
                "tags": [
                    "RecordsManagement"
                ],
                "summary": "Returns the number of items in disposition search results",
                "description": "Returns the number of items in disposition search results",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rm_stats_disposition"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not retrieve data"
                    }
                }
            }
        },
        "/v1/rmclassifications/compliance": {
            "get": {
                "tags": [
                    "RecordsManagement"
                ],
                "summary": "Returns information about records",
                "description": "Returns information about records",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rm_stats_compliance"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not retrieve data"
                    }
                }
            }
        },
        "/v2/nodes/{id}/disposition-snapshots/qdate/{qdate}/reviewerid/{reviewerid}/reviewerstep/{reviewerstep}": {
            "get": {
                "parameters": [
                    {
                        "description": "ID of disposition search",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Snapshot date",
                        "in": "path",
                        "name": "qdate",
                        "required": true,
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID of user specified as a reviewer",
                        "in": "path",
                        "name": "reviewerid",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "First or second review step",
                        "in": "path",
                        "name": "reviewerstep",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/view_dispositionsnapshot"
                                }
                            }
                        },
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Could not get node for {id}"
                    }
                },
                "tags": [
                    "Nodes"
                ],
                "description": "Returns items in disposition search for specific reviewer",
                "summary": "Returns items in disposition search for specific reviewer"
            }
        }
    },
    "components": {
        "schemas": {
            "form_PORequest": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_PORequest"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_POBorrow": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_POBorrow"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_POReturn": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_POReturn"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_POMetadata": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_POMetadata"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_POAssignLocator": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_POAssignLocator"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_POAssignTransfer": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_POAssignTransfer"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_POAssignBox": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_POAssignBox"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_RMXref": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_RMAssignXRef"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_RMMetadata": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_RMMetadata"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_RMChangeActions": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_RMChangeActions"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_SecurityLevel": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/CurrentSecurity"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_SupplementalMarkings": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/formSupplementalMarkings"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "form_user_security_profile": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/form_user_security_profile_data"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                },
                "type": "object"
            },
            "data_POMetadata": {
                "properties": {
                    "LocatorType": {
                        "items": {
                            "$ref": "#/components/schemas/LocatorType"
                        },
                        "type": "array"
                    },
                    "OffsiteStorID": {
                        "type": "string"
                    },
                    "TemporaryID": {
                        "type": "string"
                    },
                    "clientRemove": {
                        "type": "boolean"
                    },
                    "client_id": {
                        "type": "integer"
                    },
                    "client_selection": {
                        "type": "string"
                    },
                    "curLocation": {
                        "items": {
                            "$ref": "#/components/schemas/Location"
                        },
                        "type": "array"
                    },
                    "external_client": {
                        "type": "string"
                    },
                    "fromDateRemove": {
                        "type": "boolean"
                    },
                    "homeLocation": {
                        "items": {
                            "$ref": "#/components/schemas/Location"
                        },
                        "type": "array"
                    },
                    "locatorTypeRemove": {
                        "type": "boolean"
                    },
                    "offsiteStorIDRemove": {
                        "type": "boolean"
                    },
                    "poFromDate": {
                        "format": "date",
                        "type": "string"
                    },
                    "poToDate": {
                        "format": "date",
                        "type": "string"
                    },
                    "refrate": {
                        "items": {
                            "$ref": "#/components/schemas/RefRateInfo"
                        },
                        "type": "array"
                    },
                    "refrateRemove": {
                        "type": "boolean"
                    },
                    "tempIDRemove": {
                        "type": "boolean"
                    },
                    "toDateRemove": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "data_PORequest": {
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "contact": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "email_request": {
                        "type": "boolean"
                    },
                    "fax": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "repeat_every": {
                        "type": "string",
                        "description": "* Daily * Monthly * Weekly \n"
                    },
                    "request_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "request_type": {
                        "items": {
                            "$ref": "#/components/schemas/RequestTypeInfo"
                        },
                        "type": "array"
                    },
                    "requestor": {
                        "type": "integer"
                    },
                    "times": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "data_POBorrow": {
                "properties": {
                    "acknowledge": {
                        "items": {
                            "$ref": "#/components/schemas/Acknowledge"
                        },
                        "type": "array"
                    },
                    "borrow_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "borrower": {
                        "type": "integer"
                    },
                    "borrower_selection": {
                        "type": "boolean"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "current_location": {
                        "items": {
                            "$ref": "#/components/schemas/Location"
                        },
                        "type": "array"
                    },
                    "external_borrower": {
                        "type": "string"
                    },
                    "external_obtainedby": {
                        "type": "string"
                    },
                    "obtainedby": {
                        "type": "integer"
                    },
                    "obtainedby_selection": {
                        "type": "boolean"
                    },
                    "preapprove": {
                        "type": "boolean"
                    },
                    "return_date": {
                        "format": "date",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "data_POReturn": {
                "properties": {
                    "acknowledge": {
                        "items": {
                            "$ref": "#/components/schemas/Acknowledge"
                        },
                        "type": "array"
                    },
                    "borrower": {
                        "type": "integer"
                    },
                    "borrower_selection": {
                        "type": "boolean"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "current_location": {
                        "items": {
                            "$ref": "#/components/schemas/Location"
                        },
                        "type": "array"
                    },
                    "external_borrower": {
                        "type": "string"
                    },
                    "external_obtainedby": {
                        "type": "string"
                    },
                    "new_borrow_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "new_return_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "obtainedby": {
                        "type": "integer"
                    },
                    "obtainedby_selection": {
                        "type": "boolean"
                    },
                    "preapprove": {
                        "type": "boolean"
                    },
                    "return_action": {
                        "type": "integer",
                        "description": "* `1` Pass * `2` Cancel borrow * `3` Return \n"
                    },
                    "return_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "return_home": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "data_POAssignLocator": {
                "properties": {
                    "area": {
                        "items": {
                            "$ref": "#/components/schemas/AreaInfo"
                        },
                        "type": "array"
                    },
                    "areaCodes": {
                        "type": "integer"
                    },
                    "bShowMessage": {
                        "type": "boolean"
                    },
                    "box_locator": {
                        "type": "string"
                    },
                    "facilty": {
                        "items": {
                            "$ref": "#/components/schemas/Facility"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "data_POAssignTransfer": {
                "properties": {
                    "bShowMessage": {
                        "type": "boolean"
                    },
                    "contentFromDate": {
                        "format": "date",
                        "type": "string"
                    },
                    "contentToDate": {
                        "format": "date",
                        "type": "string"
                    },
                    "searchDates": {
                        "type": "string",
                        "description": "* `0`  All * `1`  Transfer not sent * `2`  Transfer sent not received * `3`  Transfer received \n"
                    },
                    "transfer_id": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "data_POAssignBox": {
                "properties": {
                    "bShowMessage": {
                        "type": "boolean"
                    },
                    "locator_type": {
                        "items": {
                            "$ref": "#/components/schemas/LocatorType"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "unique_id": {
                        "type": "string"
                    },
                    "update_data": {
                        "type": "string"
                    },
                    "update_location": {
                        "type": "boolean"
                    },
                    "update_status": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "data_RMAssignXRef": {
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "record_version": {
                        "type": "boolean"
                    },
                    "version_code": {
                        "type": "string"
                    },
                    "xref_type": {
                        "items": {
                            "$ref": "#/components/schemas/XRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "data_RMMetadata": {
                "properties": {
                    "accession": {
                        "items": {
                            "$ref": "#/components/schemas/TableMaintenanceCodes"
                        },
                        "type": "array"
                    },
                    "docDate": {
                        "format": "date",
                        "type": "string"
                    },
                    "essential": {
                        "items": {
                            "$ref": "#/components/schemas/TableMaintenanceCodes"
                        },
                        "type": "array"
                    },
                    "fileStatus": {
                        "items": {
                            "$ref": "#/components/schemas/TableMaintenanceCodes"
                        },
                        "type": "array"
                    },
                    "nextReviewDate": {
                        "format": "date",
                        "type": "string"
                    },
                    "official": {
                        "type": "boolean"
                    },
                    "rsi": {
                        "items": {
                            "$ref": "#/components/schemas/RSINames"
                        },
                        "type": "array"
                    },
                    "rsiRemove": {
                        "type": "boolean"
                    },
                    "statusDate": {
                        "format": "date",
                        "type": "string"
                    },
                    "storage": {
                        "items": {
                            "$ref": "#/components/schemas/TableMaintenanceCodes"
                        },
                        "type": "array"
                    },
                    "vitalRecordCycle": {
                        "items": {
                            "$ref": "#/components/schemas/VitalRecordCycle"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "data_RMChangeActions": {
                "properties": {
                    "disp_actions": {
                        "type": "string",
                        "description": "* `0`  \"None\" * `1`  \"Change Status\" * `7`  \"Close\" * `8`  \"Finalize Record\" * `9`  \"Mark Official\" * `10` \"Export\" * `11` \"Update Storage Provider\" * `12` \"Delete Electronic Format\" * `15` \"Purge Versions\" * `16` \"Make Rendition\" * `32` \"Destroy\"\n"
                    },
                    "make_rendition": {
                        "type": "boolean"
                    },
                    "status": {
                        "items": {
                            "$ref": "#/components/schemas/TableMaintenanceCodes"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "data_NodeSecurityClearance": {
                "properties": {
                    "applyToSettings": {
                        "$ref": "#/components/schemas/SecurityApplySettings"
                    },
                    "can_user_edit_security": {
                        "type": "boolean"
                    },
                    "clearance_level": {
                        "type": "integer"
                    },
                    "has_user_security_codes": {
                        "type": "boolean"
                    },
                    "inherit_from": {
                        "type": "boolean"
                    },
                    "supplemental_markings": {
                        "items": {
                            "$ref": "#/components/schemas/SupplementalMarking"
                        },
                        "type": "array"
                    }
                }
            },
            "form_options": {
                "type": "object",
                "description": "Basic data about the alpaca form"
            },
            "form_schema": {
                "type": "object",
                "description": "Properties of the parameters being used for building the form"
            },
            "AreaInfo": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Acknowledge": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "description": "* `1`  Required * `2`  Not Required * `3`  Confirmed\n"
            },
            "BaseDefinition": {
                "properties": {},
                "type": "object"
            },
            "BorrowedItem": {
                "properties": {
                    "borrowed_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "display_type": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pickup_flag": {
                        "type": "boolean"
                    },
                    "return_by_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "unique_id": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BorrowedItems": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/BorrowedItem"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ClassInPickList": {
                "properties": {
                    "class_level": {
                        "type": "integer"
                    },
                    "file_number": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parent_id": {
                        "type": "integer"
                    },
                    "selectable": {
                        "type": "boolean"
                    },
                    "subtype": {
                        "type": "integer"
                    },
                    "title": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "subtype",
                    "parent_id",
                    "file_number",
                    "name",
                    "title",
                    "class_level",
                    "selectable"
                ],
                "type": "object"
            },
            "ClearanceLevel": {
                "properties": {
                    "desc": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "security_level": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ClearanceLevels": {
                "properties": {
                    "definitions": {},
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ClearanceLevel"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "CustodianSiteInfo": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ExternalClientInfo": {
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "client_type": {
                        "type": "integer"
                    },
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Facility": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FacilityInfo": {
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "check_box_fit": {
                        "type": "integer"
                    },
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    },
                    "managed": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Location": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LocationInfo": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "custodian_site": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Locator": {
                "properties": {
                    "facility": {
                        "type": "string"
                    },
                    "area": {
                        "type": "string"
                    },
                    "box_locator": {
                        "type": "string"
                    },
                    "total_space": {
                        "type": "number"
                    },
                    "free_space": {
                        "type": "number"
                    }
                }
            },
            "Locators": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Locator"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "LocatorType": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LocatorTypeInfo": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "depth": {
                        "type": "integer"
                    },
                    "desc": {
                        "type": "string"
                    },
                    "height": {
                        "type": "integer"
                    },
                    "length": {
                        "type": "integer"
                    },
                    "total": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "MediaType": {
                "properties": {
                    "po_mediatype_id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "box": {
                        "type": "boolean"
                    },
                    "container": {
                        "type": "boolean"
                    },
                    "defaultlocatortype": {
                        "type": "string"
                    },
                    "subtype": {
                        "type": "integer"
                    },
                    "subtypename": {
                        "type": "string"
                    }
                }
            },
            "MediaTypes": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MediaType"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "NodeSecurityClearance": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/data_NodeSecurityClearance"
                    },
                    "definitions": {
                        "$ref": "#/components/schemas/NodeSecurityDefinitions"
                    },
                    "NumSecLevel": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "POCodes": {
                "properties": {
                    "definitions": {},
                    "data": {
                        "$ref": "#/components/schemas/POCodesData"
                    }
                },
                "type": "object"
            },
            "POCodesData": {
                "properties": {
                    "areas": {
                        "items": {
                            "$ref": "#/components/schemas/AreaInfo"
                        },
                        "type": "array"
                    },
                    "custodian_sites": {
                        "items": {
                            "$ref": "#/components/schemas/CustodianSiteInfo"
                        },
                        "type": "array"
                    },
                    "external_clients": {
                        "items": {
                            "$ref": "#/components/schemas/ExternalClientInfo"
                        },
                        "type": "array"
                    },
                    "facilities": {
                        "items": {
                            "$ref": "#/components/schemas/FacilityInfo"
                        },
                        "type": "array"
                    },
                    "locations": {
                        "items": {
                            "$ref": "#/components/schemas/LocationInfo"
                        },
                        "type": "array"
                    },
                    "locator_types": {
                        "items": {
                            "$ref": "#/components/schemas/LocatorTypeInfo"
                        },
                        "type": "array"
                    },
                    "recurrences": {
                        "items": {
                            "$ref": "#/components/schemas/RecurrenceInfo"
                        },
                        "type": "array"
                    },
                    "ref_rates": {
                        "items": {
                            "$ref": "#/components/schemas/RefRateInfo"
                        },
                        "type": "array"
                    },
                    "request_types": {
                        "items": {
                            "$ref": "#/components/schemas/RequestTypeInfo"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "RecurrenceInfo": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RefRateInfo": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RequestTypeInfo": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SecurityClearance": {
                "properties": {
                    "definitions": {
                        "$ref": "#/components/schemas/SecurityClearanceDefinition"
                    },
                    "data": {
                        "$ref": "#/components/schemas/SecurityClearanceInfo"
                    }
                },
                "type": "object"
            },
            "SecurityClearanceDefinition": {
                "properties": {
                    "clearance_levels": {
                        "$ref": "#/components/schemas/BaseDefinition"
                    },
                    "supplemental_markings": {
                        "$ref": "#/components/schemas/BaseDefinition"
                    }
                },
                "type": "object"
            },
            "SecurityClearanceInfo": {
                "properties": {
                    "clearance_levels": {
                        "$ref": "#/components/schemas/ClearanceLevels"
                    },
                    "supplemental_markings": {
                        "$ref": "#/components/schemas/SupplementalMarkings"
                    }
                },
                "type": "object"
            },
            "SupplementalMarking": {
                "properties": {
                    "desc": {
                        "type": "string"
                    },
                    "supplemental_marking": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SupplementalMarkings": {
                "properties": {
                    "definitions": {},
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/SupplementalMarking"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "TaskStatus": {
                "properties": {
                    "errMsg": {
                        "description": "Error Message",
                        "type": "string"
                    },
                    "http_status_code": {
                        "description": "HTTP Status Code",
                        "type": "integer"
                    },
                    "location": {
                        "description": "URL of the created task",
                        "type": "string"
                    },
                    "task_status": {
                        "description": "Status of the created task",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TableMaintenanceCodes": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "description": "Records Management codes with descriptions"
            },
            "Transfer": {
                "properties": {
                    "transfer_id": {
                        "type": "string"
                    },
                    "date_sent": {
                        "format": "date",
                        "type": "string"
                    },
                    "date_received": {
                        "format": "date",
                        "type": "string"
                    },
                    "estimated_size": {
                        "type": "number"
                    },
                    "from_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "to_date": {
                        "format": "date",
                        "type": "string"
                    }
                }
            },
            "Transfers": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Transfer"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UserPickList": {
                "properties": {
                    "definitions": {},
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ClassInPickList"
                        },
                        "type": "array"
                    },
                    "definitions_map": {},
                    "definitions_order": {}
                },
                "type": "object"
            },
            "XRef": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "XRefInfo": {
                "properties": {
                    "desc": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "hold_id": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "related_code": {
                        "type": "string"
                    },
                    "xref_type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "XRefInfos": {
                "properties": {
                    "definitions": {},
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/XRefInfo"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Paging": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "page_total": {
                        "type": "integer"
                    },
                    "total_count": {
                        "type": "integer"
                    }
                }
            },
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Results"
                    }
                },
                "xml": {
                    "name": "ApiResponse"
                }
            },
            "Results": {
                "type": "object",
                "properties": {
                    "errMsg": {
                        "type": "string"
                    },
                    "ok": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of a newly created object if successful, 0 otherwise"
                    }
                }
            },
            "RSI": {
                "required": [
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "statusDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "subject": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "dispcontrol": {
                        "type": "boolean",
                        "default": false
                    },
                    "sourceApp": {
                        "type": "string",
                        "description": "ID of the application created the RSI"
                    },
                    "editingApp": {
                        "type": "string",
                        "description": "ID of the application allowed to manage the RSI"
                    }
                }
            },
            "RSINames": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RSIsNames": {
                "type": "object",
                "properties": {
                    "fast:codes": {
                        "items": {
                            "$ref": "#/components/schemas/RSINames"
                        },
                        "type": "array"
                    }
                }
            },
            "RMCodesV2": {
                "type": "object",
                "properties": {
                    "results": {
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "object",
                                "properties": {
                                    "accession": {
                                        "$ref": "#/components/schemas/StrList"
                                    },
                                    "action_code": {
                                        "$ref": "#/components/schemas/IntList"
                                    },
                                    "cross_reference": {
                                        "$ref": "#/components/schemas/CrossReference"
                                    },
                                    "cycle_period": {
                                        "$ref": "#/components/schemas/IntList"
                                    },
                                    "date_to_use": {
                                        "$ref": "#/components/schemas/IntList"
                                    },
                                    "disposition": {
                                        "$ref": "#/components/schemas/StrList"
                                    },
                                    "essential": {
                                        "$ref": "#/components/schemas/Essential"
                                    },
                                    "event_conditions": {
                                        "$ref": "#/components/schemas/StrList"
                                    },
                                    "event_type": {
                                        "$ref": "#/components/schemas/IntList"
                                    },
                                    "hold_groups": {
                                        "$ref": "#/components/schemas/IntList"
                                    },
                                    "hold_type": {
                                        "$ref": "#/components/schemas/HoldType"
                                    },
                                    "jurisdiction": {
                                        "$ref": "#/components/schemas/StrList"
                                    },
                                    "provenance_type": {
                                        "$ref": "#/components/schemas/StrList"
                                    },
                                    "retention": {
                                        "$ref": "#/components/schemas/StrList"
                                    },
                                    "retention_intervals": {
                                        "$ref": "#/components/schemas/IntList"
                                    },
                                    "retention_stage": {
                                        "$ref": "#/components/schemas/RetentionStage"
                                    },
                                    "rsi_rule": {
                                        "$ref": "#/components/schemas/StrList"
                                    },
                                    "rsi_status": {
                                        "$ref": "#/components/schemas/StrList"
                                    },
                                    "status": {
                                        "$ref": "#/components/schemas/StrList"
                                    },
                                    "storage": {
                                        "$ref": "#/components/schemas/StrList"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "StrList": {
                "type": "object",
                "properties": {
                    "default_value": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StrCodeDescription"
                        }
                    }
                }
            },
            "IntList": {
                "type": "object",
                "properties": {
                    "default_value": {
                        "type": "integer"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntCodeDescription"
                        }
                    }
                }
            },
            "CrossReference": {
                "type": "object",
                "properties": {
                    "default_value": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CrossReferenceCode"
                        }
                    }
                }
            },
            "Essential": {
                "type": "object",
                "properties": {
                    "default_value": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EssentialCode"
                        }
                    }
                }
            },
            "RetentionStage": {
                "type": "object",
                "properties": {
                    "default_value": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RetentionStageCode"
                        }
                    }
                }
            },
            "HoldType": {
                "type": "object",
                "properties": {
                    "default_value": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HoldTypeCode"
                        }
                    }
                }
            },
            "IntCodeDescription": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "StrCodeDescription": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "CrossReferenceCode": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "related_code": {
                        "type": "string"
                    },
                    "hold_id": {
                        "type": "integer"
                    }
                }
            },
            "EssentialCode": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "vital": {
                        "type": "boolean"
                    }
                }
            },
            "HoldTypeCode": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "default_period": {
                        "type": "integer"
                    }
                }
            },
            "RetentionStageCode": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "ret_stage_order": {
                        "type": "integer"
                    }
                }
            },
            "RSIScheduleInfo": {
                "type": "object",
                "properties": {
                    "schedule": {
                        "$ref": "#/components/schemas/RSISchedule2"
                    }
                }
            },
            "RSISchedule": {
                "required": [
                    "eventType",
                    "objectType",
                    "stage"
                ],
                "type": "object",
                "properties": {
                    "objectType": {
                        "type": "string",
                        "description": "* 'LIV' - Classified Objects * 'LRM' - RM Classifications\n",
                        "enum": [
                            "LIV",
                            "LRM"
                        ]
                    },
                    "stage": {
                        "type": "string",
                        "description": "Retention stage"
                    },
                    "eventType": {
                        "type": "integer",
                        "description": "* `1` Calculated Date * `2` Calendar Calculation * `3` Event Based * `4` Fixed Date * `5` Permanent\n"
                    },
                    "ruleCode": {
                        "type": "string"
                    },
                    "ruleComment": {
                        "type": "string"
                    },
                    "dateToUse": {
                        "type": "integer",
                        "description": "* `91`  Create Date * `92`  Reserved Date * `93`  Modification Date * `94'  Status Date * `95`  Record Date * `120` Physical Container From Date * `121` Physical Container To Date * `122` Last Addition Date * `131` Last Version Added Date * `132` Version Create Date * `133` Source Create Date - Object Level * `134` Source Create Date - Last Version Added\n"
                    },
                    "retentionYears": {
                        "type": "integer",
                        "description": "Years portion of period to wait before disposition"
                    },
                    "retentionMonths": {
                        "type": "integer",
                        "description": "Months portion of period to wait before disposition"
                    },
                    "retentionDays": {
                        "type": "integer",
                        "description": "Days portion of period to wait before disposition"
                    },
                    "categoryId": {
                        "type": "integer"
                    },
                    "categoryAttributeId": {
                        "type": "integer"
                    },
                    "yearEndMonth": {
                        "type": "integer",
                        "description": "Month portion of Year End Definition"
                    },
                    "yearEndDay": {
                        "type": "integer",
                        "description": "Day portion of Year End Definition"
                    },
                    "retentionIntervals": {
                        "type": "integer",
                        "description": "Retention Intervals"
                    },
                    "fixedRetention": {
                        "type": "boolean"
                    },
                    "maximumRetention": {
                        "type": "boolean"
                    },
                    "fixedDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string",
                        "description": "Fixed Date of retention"
                    },
                    "eventCondition": {
                        "type": "string"
                    },
                    "disposition": {
                        "type": "string"
                    },
                    "actionCode": {
                        "type": "integer",
                        "description": "* `0`  \"None\" * `1`  \"Change Status\" * `7`  \"Close\" * `8`  \"Finalize Record\" * `9`  \"Mark Official\" * `10` \"Export\" * `11` \"Update Storage Provider\" * `12` \"Delete Electronic Format\" * `15` \"Purge Versions\" * `16` \"Make Rendition\" * `32` \"Destroy\"\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Action description"
                    },
                    "newStatus": {
                        "type": "string"
                    },
                    "minNumVersionsToKeep": {
                        "type": "integer",
                        "description": "Minimum number of (major) versions to keep"
                    },
                    "purgeSuperseded": {
                        "type": "boolean",
                        "description": "If true, calculate date based on when version was superseded"
                    },
                    "purgeMajors": {
                        "type": "boolean",
                        "description": "Allow major versions to be purged"
                    },
                    "markOfficialRendition": {
                        "type": "boolean",
                        "description": "Make rendition when object is marked official"
                    }
                }
            },
            "RSIScheduleUpdate": {
                "type": "object",
                "properties": {
                    "objectType": {
                        "type": "string",
                        "description": "* 'LIV' - Classified Objects * 'LRM' - RM Classifications\n",
                        "enum": [
                            "LIV",
                            "LRM"
                        ]
                    },
                    "eventType": {
                        "type": "integer",
                        "description": "* `1` Calculated Date * `2` Calendar Calculation * `3` Event Based * `4` Fixed Date * `5` Permanent\n"
                    },
                    "ruleCode": {
                        "type": "string"
                    },
                    "ruleComment": {
                        "type": "string"
                    },
                    "dateToUse": {
                        "type": "integer",
                        "description": "* `91`  Create Date * `92`  Reserved Date * `93`  Modification Date * `94'  Status Date * `95`  Record Date * `120` Physical Container From Date * `121` Physical Container To Date * `122` Last Addition Date * `131` Last Version Added Date * `132` Version Create Date * `133` Source Create Date - Object Level * `134` Source Create Date - Last Version Added\n"
                    },
                    "retentionYears": {
                        "type": "integer",
                        "description": "Years portion of period to wait before disposition"
                    },
                    "retentionMonths": {
                        "type": "integer",
                        "description": "Months portion of period to wait before disposition"
                    },
                    "retentionDays": {
                        "type": "integer",
                        "description": "Days portion of period to wait before disposition"
                    },
                    "categoryId": {
                        "type": "integer"
                    },
                    "categoryAttributeId": {
                        "type": "integer"
                    },
                    "yearEndMonth": {
                        "type": "integer",
                        "description": "Month portion of Year End Definition"
                    },
                    "yearEndDay": {
                        "type": "integer",
                        "description": "Day portion of Year End Definition"
                    },
                    "retentionIntervals": {
                        "type": "integer",
                        "description": "Retention Intervals"
                    },
                    "fixedRetention": {
                        "type": "boolean"
                    },
                    "maximumRetention": {
                        "type": "boolean"
                    },
                    "fixedDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string",
                        "description": "Fixed Date of retention"
                    },
                    "eventCondition": {
                        "type": "string"
                    },
                    "disposition": {
                        "type": "string"
                    },
                    "actionCode": {
                        "type": "integer",
                        "description": "* `0`  \"None\" * `1`  \"Change Status\" * `7`  \"Close\" * `8`  \"Finalize Record\" * `9`  \"Mark Official\" * `10` \"Export\" * `11` \"Update Storage Provider\" * `12` \"Delete Electronic\" * `15` \"Purge Versions\" * `16` \"Make Rendition\" * `32` \"Destroy\"\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Action description"
                    },
                    "newStatus": {
                        "type": "string"
                    },
                    "minNumVersionsToKeep": {
                        "type": "integer",
                        "description": "Minimum number of (major) versions to keep"
                    },
                    "purgeSuperseded": {
                        "type": "boolean",
                        "description": "If true, calculate date based on when version was superseded"
                    },
                    "purgeMajors": {
                        "type": "boolean",
                        "description": "Allow major versions to be purged"
                    },
                    "markOfficialRendition": {
                        "type": "boolean",
                        "description": "Make rendition when object is marked official"
                    }
                }
            },
            "RSIUpdate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "RSI identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Old RSI name"
                    },
                    "newName": {
                        "type": "string",
                        "description": "New RSI name"
                    },
                    "status": {
                        "type": "string",
                        "description": "New RSI status."
                    },
                    "statusDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string",
                        "description": "New RSI status date."
                    },
                    "description": {
                        "type": "string",
                        "description": "New RSI description."
                    },
                    "subject": {
                        "type": "string",
                        "description": "New RSI subject."
                    },
                    "title": {
                        "type": "string",
                        "description": "New RSI title."
                    },
                    "discontinue": {
                        "type": "boolean",
                        "description": "RSI discontinue flag.",
                        "default": false
                    },
                    "discontinueDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string",
                        "description": "New RSI discontinue date."
                    },
                    "discontinueComment": {
                        "type": "string",
                        "description": "New RSI discontinue comment."
                    },
                    "dispcontrol": {
                        "type": "boolean",
                        "description": "New RSI under disposition control flag."
                    },
                    "editingApp": {
                        "type": "string",
                        "description": "ID of the application editing the RSI"
                    }
                }
            },
            "HoldsData": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/ResultsHolds"
                    }
                }
            },
            "ResultsHolds": {
                "type": "object",
                "properties": {
                    "holds": {
                        "$ref": "#/components/schemas/ResultsHoldsList"
                    }
                }
            },
            "ResultsHold": {
                "type": "object",
                "properties": {
                    "hold": {
                        "$ref": "#/components/schemas/Hold"
                    }
                }
            },
            "ResultsHoldsList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Hold"
                }
            },
            "Hold": {
                "type": "object",
                "properties": {
                    "HoldID": {
                        "type": "integer"
                    },
                    "HoldName": {
                        "type": "string"
                    },
                    "ActiveHold": {
                        "type": "integer",
                        "description": "1 if this is an active Hold"
                    },
                    "OBJECT": {
                        "type": "integer"
                    },
                    "ApplyPatron": {
                        "type": "string"
                    },
                    "DateApplied": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string"
                    },
                    "HoldComment": {
                        "type": "string"
                    },
                    "HoldType": {
                        "type": "string"
                    },
                    "DateToRemove": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string"
                    },
                    "DateRemoved": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string"
                    },
                    "RemovalPatron": {
                        "type": "string"
                    },
                    "RemovalComment": {
                        "type": "string"
                    },
                    "EditDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string"
                    },
                    "EditPatron": {
                        "type": "string"
                    },
                    "AlternateHoldID": {
                        "type": "integer"
                    },
                    "ParentID": {
                        "type": "integer"
                    }
                }
            },
            "Holds": {
                "type": "object",
                "properties": {
                    "collection": {
                        "type": "object",
                        "properties": {
                            "paging": {
                                "$ref": "#/components/schemas/Paging"
                            }
                        }
                    },
                    "results": {
                        "$ref": "#/components/schemas/HoldsData"
                    }
                },
                "xml": {
                    "name": "Holds"
                }
            },
            "SimpleHoldInfo": {
                "properties": {
                    "HoldID": {
                        "type": "integer",
                        "description": "Hold ID"
                    },
                    "HoldName": {
                        "type": "string",
                        "description": "Hold Name"
                    },
                    "ActiveHold": {
                        "type": "boolean",
                        "description": "Active Hold"
                    }
                }
            },
            "RSISchedule2": {
                "type": "object",
                "properties": {
                    "RSIID": {
                        "type": "integer",
                        "description": "RSI ID"
                    },
                    "RSI": {
                        "type": "string",
                        "description": "RSI Name"
                    },
                    "Title": {
                        "type": "string"
                    },
                    "Subject": {
                        "type": "string"
                    },
                    "Description": {
                        "type": "string"
                    },
                    "CreateDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string"
                    },
                    "RSIStatus": {
                        "type": "string"
                    },
                    "StatusDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string"
                    },
                    "DiscontFlag": {
                        "type": "integer"
                    },
                    "DiscontDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string"
                    },
                    "DiscontComment": {
                        "type": "string"
                    },
                    "Active": {
                        "type": "integer"
                    },
                    "DispControl": {
                        "type": "integer"
                    },
                    "RSIScheduleID": {
                        "type": "integer"
                    },
                    "RetStage": {
                        "type": "string"
                    },
                    "RecordType": {
                        "type": "integer"
                    },
                    "EventType": {
                        "type": "integer"
                    },
                    "RSIRuleCode": {
                        "type": "string"
                    },
                    "DateToUse": {
                        "type": "string"
                    },
                    "YearEndMonth": {
                        "type": "integer"
                    },
                    "YearEndDay": {
                        "type": "integer"
                    },
                    "RetYears": {
                        "type": "integer"
                    },
                    "RetMonths": {
                        "type": "integer"
                    },
                    "RetDays": {
                        "type": "integer"
                    },
                    "RetIntervals": {
                        "type": "integer"
                    },
                    "EventRuleDate": {
                        "pattern": "YYYY-MM-DDTHH:mm:ss",
                        "type": "string"
                    },
                    "EventRule": {
                        "type": "string"
                    },
                    "EventComment": {
                        "type": "string"
                    },
                    "StageAction": {
                        "type": "string"
                    },
                    "FixedRet": {
                        "type": "integer"
                    },
                    "ActionCode": {
                        "type": "string"
                    },
                    "ActionDescription": {
                        "type": "string"
                    },
                    "Disposition": {
                        "type": "string"
                    },
                    "ApprovalFlag": {
                        "type": "integer"
                    },
                    "MaximumRet": {
                        "type": "integer"
                    },
                    "ObjectType": {
                        "type": "string",
                        "description": "* 'LIV' - Classified Objects * 'LRM' - RM Classifications\n",
                        "enum": [
                            "LIV",
                            "LRM"
                        ]
                    }
                }
            },
            "RSIs": {
                "type": "object",
                "properties": {
                    "collection": {
                        "type": "object",
                        "properties": {
                            "paging": {
                                "$ref": "#/components/schemas/Paging"
                            }
                        }
                    },
                    "results": {
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "object",
                                "properties": {
                                    "rsis": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/RSISchedule2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "VitalRecordCycle": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "desc": {
                        "type": "string"
                    }
                },
                "type": "object",
                "description": "* `365`  Daily * `7` Weekly * `1`  Monthly * `2`  Semi-annual based on calendar year * `3`  Quarterly based on calendar year * `12`  Annual based on calendar year\n"
            },
            "SecurityApplySettings": {
                "properties": {
                    "bUpdateBoxContents": {
                        "type": "boolean"
                    },
                    "secLevelOpts": {
                        "type": "string",
                        "description": "* Upgrade * Downgrade\n"
                    },
                    "suppMarkOpts": {
                        "type": "string",
                        "description": "* Merge * Replace\n"
                    }
                }
            },
            "NodeSecurityDefinitions": {
                "properties": {
                    "clearance_level": {
                        "type": "string",
                        "description": "Prototype of security level field\n"
                    },
                    "supplemental_markings": {
                        "type": "string",
                        "description": "Prototype of supplemental marking field\n"
                    }
                }
            },
            "CurrentSecurity": {
                "properties": {
                    "currentSecurity": {
                        "items": {
                            "$ref": "#/components/schemas/ClearanceLevel"
                        },
                        "type": "array"
                    }
                }
            },
            "formSupplementalMarkings": {
                "properties": {
                    "supplemental_markings": {
                        "items": {
                            "$ref": "#/components/schemas/SupplementalMarking"
                        },
                        "type": "array"
                    }
                }
            },
            "form_user_security_profile_data": {
                "properties": {
                    "supplemental_markings": {
                        "items": {
                            "$ref": "#/components/schemas/SupplementalMarking"
                        },
                        "type": "array"
                    },
                    "clearance_level": {
                        "type": "integer"
                    }
                }
            },
            "node_classificationInfo": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "integer"
                    },
                    "selectable": {
                        "type": "boolean"
                    },
                    "management_type": {
                        "type": "string"
                    },
                    "score": {
                        "type": "integer"
                    },
                    "inherit_flag": {
                        "type": "boolean"
                    },
                    "classvolumeid": {
                        "type": "integer"
                    },
                    "parent_managed": {
                        "type": "boolean"
                    }
                }
            },
            "nodes_Classifications": {
                "properties": {
                    "definitions": {},
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/node_classificationInfo"
                        },
                        "type": "array"
                    },
                    "definitions_map": {},
                    "definitions_order": {}
                },
                "type": "object"
            },
            "nodes_RMClassifications": {
                "properties": {
                    "canBeUnclassified": {
                        "type": "boolean"
                    },
                    "canFinalize": {
                        "type": "boolean"
                    },
                    "canRemoveClass": {
                        "type": "boolean"
                    },
                    "canRMClassify": {
                        "type": "boolean"
                    },
                    "classVolumeID": {
                        "type": "integer"
                    },
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/node_RMClassificationInfo"
                        },
                        "type": "array"
                    },
                    "definitions": {},
                    "fields_order": {
                        "type": "string",
                        "description": "List of all records management fields in display order."
                    },
                    "fields_to_show": {},
                    "haveFAtoClassify": {
                        "type": "boolean"
                    },
                    "inherit_from": {
                        "type": "boolean"
                    },
                    "inheritanceMetadataUpdate": {},
                    "multiClass": {
                        "type": "boolean"
                    },
                    "rm_metadataToken": {
                        "description": "The metadata state token. It is used to resolve edit conflicts where two users are updating the node at the same time. If this is specified and the call is successful, the most recent metadata token will be returned in the result.\"",
                        "type": "string"
                    },
                    "showTab": {
                        "type": "boolean"
                    },
                    "vitalRecordCodes": {
                        "type": "string",
                        "description": "List of Essential codes which are Vital"
                    }
                },
                "type": "object"
            },
            "node_RMClassificationInfo": {
                "properties": {
                    "inherited_rmclassification_id": {
                        "type": "integer",
                        "description": "ID of inherited RM Classification"
                    },
                    "default_rmclassification_id": {
                        "type": "integer",
                        "description": "ID of default RM Classification"
                    },
                    "multiple_classifications": {
                        "type": "string",
                        "description": "List of classNumber, fileNumber, primary, and RSI values of assigned RM Classifications"
                    },
                    "rmclassification_id": {
                        "type": "integer",
                        "description": "ID of primary RM Classification"
                    },
                    "file_number": {
                        "type": "string",
                        "description": "File Number of primary RM Classification"
                    },
                    "rsi": {
                        "type": "string",
                        "description": "RSI of primary RM Classification"
                    },
                    "record_date": {
                        "format": "date",
                        "type": "string",
                        "description": "Record Date"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status"
                    },
                    "status_date": {
                        "format": "date",
                        "type": "string",
                        "description": "Status Date"
                    },
                    "received_date": {
                        "format": "date",
                        "type": "string",
                        "description": "Received Date"
                    },
                    "essential": {
                        "type": "string",
                        "description": "Essential"
                    },
                    "cycle_period": {
                        "type": "integer",
                        "description": "* `365`  Daily * `7` Weekly * `1`  Monthly * `2`  Semi-annual based on calendar year * `3`  Quarterly based on calendar year * `12`  Annual based on calendar year"
                    },
                    "last_review_date": {
                        "format": "date",
                        "type": "string",
                        "description": "Last Review Date"
                    },
                    "next_review_date": {
                        "format": "date",
                        "type": "string",
                        "description": "Next Review Date"
                    },
                    "official": {
                        "type": "boolean",
                        "description": "Official mark"
                    },
                    "storage": {
                        "type": "string",
                        "description": "Storage Medium"
                    },
                    "accession": {
                        "type": "string",
                        "description": "Accession"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Subject"
                    },
                    "originator": {
                        "type": "string",
                        "description": "Author or Originator"
                    },
                    "addressee": {
                        "type": "string",
                        "description": "Addressee"
                    },
                    "sent_to": {
                        "type": "string",
                        "description": "Other Addressee"
                    },
                    "establishment": {
                        "type": "string",
                        "description": "Originating Organization"
                    },
                    "record_officer_id": {
                        "type": "integer",
                        "description": "ID of Records Officer"
                    },
                    "records_manager_id": {
                        "type": "integer",
                        "description": "ID of Records Manager group"
                    },
                    "secondary_class_ids": {
                        "type": "integer",
                        "description": "ID of secondary RM Classifications (not in use)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of RM Classification"
                    },
                    "type": {
                        "type": "integer",
                        "description": "Sub type of RM Classification"
                    },
                    "class_selectable": {
                        "type": "boolean",
                        "description": "Flag indicating if RM Classification is selectable"
                    },
                    "management_type": {
                        "type": "string",
                        "description": "Manual or automatic if Intelligent Classification is enabled"
                    },
                    "score": {
                        "type": "integer",
                        "description": "Score assigned to Classification when Intelligent Classification is enabled"
                    },
                    "is_primary": {
                        "type": "boolean",
                        "description": "Flag indicating if RM Classification is primary"
                    },
                    "record_type": {
                        "type": "integer",
                        "description": "ID of Record Type object (applicable only to documents and physical items that are non containers)"
                    },
                    "record_officer_name": {
                        "type": "string",
                        "description": "Name of Records Officer"
                    },
                    "records_manager_name": {
                        "type": "string",
                        "description": "Name of Records managers group"
                    },
                    "inherit_from": {
                        "type": "boolean",
                        "description": "Flag indicating if Classification is to be inherited"
                    },
                    "extradata": {
                        "type": "string",
                        "description": "Additional metadata if applicable"
                    }
                }
            },
            "nodes_xrefs": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/node_xref"
                        },
                        "type": "array"
                    },
                    "definitions": {},
                    "showTab": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "node_xref": {
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "integer"
                    },
                    "container": {
                        "type": "boolean"
                    },
                    "create_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "create_user_id": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "location": {
                        "type": "string"
                    },
                    "mime_type": {
                        "type": "string"
                    },
                    "modify_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "modify_user_id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "openable": {
                        "type": "boolean"
                    },
                    "original_id": {
                        "type": "integer"
                    },
                    "original_id_expand": {
                        "type": "boolean"
                    },
                    "owner_user_id": {
                        "type": "integer"
                    },
                    "parent_id": {
                        "type": "integer"
                    },
                    "permissions_model": {
                        "type": "string"
                    },
                    "related_code": {
                        "type": "string"
                    },
                    "removable": {
                        "type": "boolean"
                    },
                    "reserved_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "reserved_shared_collaboration": {
                        "type": "boolean"
                    },
                    "reserved_user_id": {
                        "type": "integer"
                    },
                    "reserved_user_id_expand": {
                        "type": "boolean"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "size_formatted": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "integer"
                    },
                    "type_name": {
                        "type": "string"
                    },
                    "ver_num": {
                        "type": "integer"
                    },
                    "xref_id": {
                        "type": "string"
                    },
                    "xref_type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "node_data": {
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "integer"
                    },
                    "container": {
                        "type": "boolean"
                    },
                    "create_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "create_user_id": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "favorite": {
                        "type": "boolean"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "mime_type": {
                        "type": "string"
                    },
                    "modify_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "modify_user_id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "openable": {
                        "type": "boolean"
                    },
                    "original_id": {
                        "type": "integer"
                    },
                    "original_id_expand": {
                        "type": "boolean"
                    },
                    "owner_user_id": {
                        "type": "integer"
                    },
                    "parent_id": {
                        "type": "integer"
                    },
                    "permissions_model": {
                        "type": "string"
                    },
                    "reserved_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "reserved_shared_collaboration": {
                        "type": "boolean"
                    },
                    "reserved_user_id": {
                        "type": "integer"
                    },
                    "reserved_user_id_expand": {
                        "type": "boolean"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "size_formatted": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "integer"
                    },
                    "type_name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "node_rsis": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/node_rsi"
                        },
                        "type": "array"
                    },
                    "definitions": {}
                },
                "type": "object"
            },
            "node_rsi": {
                "properties": {
                    "class_id": {
                        "type": "integer"
                    },
                    "rsi": {
                        "type": "string"
                    }
                }
            },
            "node_holds": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/node_hold"
                        },
                        "type": "array"
                    },
                    "definitions": {}
                },
                "type": "object"
            },
            "node_hold": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "subtype": {
                        "type": "integer"
                    },
                    "parent_id": {
                        "type": "integer"
                    },
                    "hold_id": {
                        "type": "integer"
                    },
                    "hold_name": {
                        "type": "string"
                    },
                    "hold_appliedmethod": {
                        "type": "string"
                    },
                    "hold_type": {
                        "type": "string"
                    },
                    "userid": {
                        "type": "integer"
                    },
                    "docxreftyp": {
                        "type": "string"
                    },
                    "queryid": {
                        "type": "integer"
                    },
                    "hold_comment": {
                        "type": "string"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "applied_by": {
                        "type": "string"
                    },
                    "date_applied": {
                        "format": "date",
                        "type": "string"
                    },
                    "removable": {
                        "type": "boolean"
                    }
                }
            },
            "node_RSISchedule": {
                "type": "object",
                "properties": {
                    "Stage": {
                        "type": "string",
                        "description": "Retention stage"
                    },
                    "RetentionRule": {
                        "type": "string",
                        "description": "Description of retention rule (eg. 'Event Based', 'Modification Date->2/3' )"
                    },
                    "MetEventRule": {
                        "type": "boolean",
                        "description": "Flag indicating if item met specific retention"
                    },
                    "CalculatedDate": {
                        "type": "string",
                        "description": "Date when item is ready for disposition"
                    },
                    "ActionToPerform": {
                        "type": "integer",
                        "description": "* `0`  \"None\" * `1`  \"Change Status\" * `7`  \"Close\" * `8`  \"Finalize Record\" * `9`  \"Mark Official\" * `10` \"Export\" * `11` \"Update Storage Provider\" * `12` \"Delete Electronic Format\" * `15` \"Purge Versions\" * `16` \"Make Rendition\" * `32` \"Destroy\"\n"
                    },
                    "Disposition": {
                        "type": "string",
                        "description": "Disposition code"
                    },
                    "Comment": {
                        "type": "string",
                        "description": "Rule comments"
                    },
                    "RuleCode": {
                        "type": "string"
                    },
                    "DateToUse": {
                        "type": "string",
                        "description": "* Create Date * Reserved Date * Modification Date * Status Date * Record Date * Physical Container From Date * Physical Container To Date * Last Addition Date * Last Version Added Date * Version Create Date * Source Create Date - Object Level *  Source Create Date - Last Version Added\n"
                    },
                    "DateToUseValue": {
                        "type": "string",
                        "description": "Date value to be used in calculation of disposition"
                    },
                    "RetentionYears": {
                        "type": "integer",
                        "description": "Years portion of period to wait before disposition"
                    },
                    "RetentionMonths": {
                        "type": "integer",
                        "description": "Months portion of period to wait before disposition"
                    },
                    "RetentionDays": {
                        "type": "integer",
                        "description": "Days portion of period to wait before disposition"
                    },
                    "Year-EndMonth": {
                        "type": "integer",
                        "description": "Month portion of Year End Definition"
                    },
                    "Year-EndDay": {
                        "type": "integer",
                        "description": "Day portion of Year End Definition"
                    },
                    "Intervals": {
                        "type": "integer",
                        "description": "Retention Intervals"
                    },
                    "EventBased": {
                        "type": "boolean",
                        "description": "Flag indicating if schedule is event type based"
                    },
                    "FixedDate": {
                        "type": "boolean",
                        "description": "Flag indicating of fixed date retention is used"
                    },
                    "Permanent": {
                        "type": "boolean",
                        "description": "Flag indicating if schedule is of type premanent"
                    },
                    "AutomaticProcess": {
                        "type": "string",
                        "description": "Action to execute in disposition search"
                    },
                    "ActionInfo": {
                        "type": "string",
                        "description": "Additional information about the action to process"
                    },
                    "DisplayEvent": {
                        "type": "string",
                        "description": "All condition if schedule has event type specified"
                    },
                    "ActionInt": {
                        "type": "string",
                        "description": "* `0`  \"None\" * `1`  \"Change Status\" * `7`  \"Close\" * `8`  \"Finalize Record\" * `9`  \"Mark Official\" * `10` \"Export\" * `11` \"Update Storage Provider\" * `12` \"Delete Electronic Format\" * `15` \"Purge Versions\" * `16` \"Make Rendition\" * `32` \"Destroy\"\n"
                    },
                    "NumVersToKeep": {
                        "type": "integer",
                        "description": "Minimum number of (major) versions to keep"
                    },
                    "MakeRendition": {
                        "type": "boolean",
                        "description": "Make rendition when object is marked official"
                    }
                }
            },
            "node_RSISchedules": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/node_RSISchedule"
                        },
                        "type": "array"
                    }
                }
            },
            "node_RSIScheduleForm": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/node_RSIScheduleInfo"
                        },
                        "type": "array"
                    },
                    "options": {
                        "$ref": "#/components/schemas/form_options"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/form_schema"
                    }
                }
            },
            "node_RSIScheduleInfo": {
                "properties": {
                    "Stage": {
                        "type": "string",
                        "description": "Retention stage"
                    },
                    "ActionToPerform": {
                        "type": "string",
                        "description": "Action to execute in disposition search"
                    },
                    "WhenToPerform": {
                        "type": "string",
                        "description": "Date when item is ready for disposuition of"
                    },
                    "Comment": {
                        "type": "string",
                        "description": "Rule comments"
                    },
                    "RetentionRule": {
                        "type": "string",
                        "description": "Description of retention rule (eg. 'Event Based', 'Modification Date->2/3' )"
                    },
                    "DispalyEvent": {
                        "type": "string",
                        "description": "All condition if schedule has event type specified"
                    }
                }
            },
            "menu_addclassification": {
                "properties": {
                    "canAccessClassVolume": {
                        "type": "boolean"
                    },
                    "classificationVolDataId": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "errMsg": {
                        "type": "string"
                    }
                }
            },
            "menu_addrmclassification": {
                "properties": {
                    "default_rmclassification_id": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                }
            },
            "Circulation_info": {
                "properties": {
                    "definitions": {},
                    "data": {
                        "$ref": "#/components/schemas/Circulation_info_data"
                    }
                },
                "type": "object"
            },
            "Circulation_info_data": {
                "properties": {
                    "borrowed_info": {
                        "$ref": "#/components/schemas/Borrowed_info"
                    },
                    "pending_requests": {
                        "$ref": "#/components/schemas/Pending_requests"
                    }
                }
            },
            "Pending_requests": {
                "properties": {
                    "box_request": {
                        "$ref": "#/components/schemas/Request_info"
                    },
                    "item_requests": {
                        "$ref": "#/components/schemas/Request_info"
                    },
                    "parent_requests": {
                        "$ref": "#/components/schemas/Request_info"
                    }
                },
                "type": "object"
            },
            "Borrowed_info": {
                "properties": {
                    "borrow_comments": {
                        "type": "string"
                    },
                    "borrowed_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "obtained_by": {
                        "type": "string"
                    },
                    "pickup_flag": {
                        "type": "boolean"
                    },
                    "return_by_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "unique_id": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "user_name": {
                        "type": "string"
                    }
                }
            },
            "Request_info": {
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "conatct_person": {
                        "type": "string"
                    },
                    "date_of_request": {
                        "format": "date",
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "fax": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "node_id": {
                        "type": "integer"
                    },
                    "number_of_times": {
                        "type": "integer"
                    },
                    "phone": {
                        "type": "integer"
                    },
                    "recurrence_type": {
                        "type": "string"
                    },
                    "recurring": {
                        "type": "boolean"
                    },
                    "request_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "request_type": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "integer"
                    }
                }
            },
            "ClassificationInfo": {
                "properties": {
                    "canclassify": {
                        "type": "boolean",
                        "description": "Information if user has permissions to apply Classification."
                    },
                    "classvolumeid": {
                        "type": "integer",
                        "description": "ID of Classification Volume if user has access, zero otherwise."
                    }
                }
            },
            "ClassificationSettings": {
                "properties": {
                    "managedList": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array",
                        "description": "List of subtypes managed by Classification"
                    },
                    "classvolumeid": {
                        "type": "integer",
                        "description": "ID of Classification Volume if user has access, zero otherwise."
                    }
                }
            },
            "RMClassificationInfo": {
                "properties": {
                    "canrmclassify": {
                        "type": "boolean",
                        "description": "Information if user has permissions to apply RM Classification."
                    },
                    "classvolumeid": {
                        "type": "integer",
                        "description": "ID of Classification Volume if user has access, zero otherwise."
                    },
                    "multiclass": {
                        "type": "boolean",
                        "description": "Flag indicating that multiple RM Classificatione are enabled"
                    },
                    "records_details": {
                        "$ref": "#/components/schemas/records_details_tab"
                    }
                }
            },
            "view_ClassifiedItems": {
                "properties": {
                    "collection": {
                        "properties": {
                            "paging": {
                                "$ref": "#/components/schemas/Paging"
                            }
                        },
                        "type": "object"
                    },
                    "results": {
                        "properties": {
                            "ancestors": {
                                "items": {
                                    "$ref": "#/components/schemas/node_data"
                                },
                                "type": "array"
                            },
                            "contents": {
                                "items": {
                                    "$ref": "#/components/schemas/node_data"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "view_dispositionsnapshot": {
                "properties": {
                    "collection": {
                        "properties": {
                            "paging": {
                                "$ref": "#/components/schemas/Paging"
                            }
                        },
                        "type": "object"
                    },
                    "results": {
                        "properties": {
                            "columns": {
                                "$ref": "#/components/schemas/nodes_ColumnsInfo"
                            },
                            "data": {
                                "$ref": "#/components/schemas/dispositions_data"
                            },
                            "definitions": {
                                "$ref": "#/components/schemas/dispositions_Definitions"
                            },
                            "definitions_map": {
                                "$ref": "#/components/schemas/dispositions_DefinitionsMap"
                            },
                            "definitions_order": {
                                "description": "Default order of the fields defined in data",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "dispNodeID": {
                                "description": "Disposition Node ID",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "dispositions_Definitions": {
                "type": "object"
            },
            "dispositions_DefinitionsMap": {
                "type": "object"
            },
            "disposition_data": {
                "properties": {
                    "actions": {
                        "$ref": "#/components/schemas/disposition_actions"
                    },
                    "data": {
                        "$ref": "#/components/schemas/nodes_properties"
                    },
                    "metadata": {
                        "items": {
                            "$ref": "#/components/schemas/metadata_properties"
                        },
                        "type": "array"
                    },
                    "metadata_order": {
                        "description": "List of metadata in defined order",
                        "type": "string"
                    }
                }
            },
            "dispositions_data": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/disposition_data"
                }
            },
            "disposition_actions": {
                "properties": {
                    "data": {
                        "description": "List of available actions",
                        "type": "string"
                    },
                    "map": {
                        "description": "Information about default action",
                        "type": "string"
                    },
                    "order": {
                        "description": "List of actions in order",
                        "type": "string"
                    }
                }
            },
            "nodes_properties": {
                "type": "object",
                "properties": {
                    "action_info": {
                        "description": "Status code if change of status is part of disposition action",
                        "type": "string"
                    },
                    "action_performed": {
                        "description": "Flag indicating that item had disposition action applied",
                        "type": "integer"
                    },
                    "calculated_date": {
                        "description": "Calculated date of item in disposition search",
                        "type": "string"
                    },
                    "class_id": {
                        "description": "ID of RM classification",
                        "type": "integer"
                    },
                    "container": {
                        "description": "Flag indicating whether item is a container",
                        "type": "boolean"
                    },
                    "create_date": {
                        "description": "Date that item was created. (can be time-zone aware)",
                        "type": "string"
                    },
                    "create_user_id": {
                        "description": "ID of user who created the item",
                        "type": "integer"
                    },
                    "description": {
                        "description": "Description of the item",
                        "type": "string"
                    },
                    "disp_action": {
                        "description": "* `0`  \"None\" * `1`  \"Change Status\" * `7`  \"Close\" * `8`  \"Finalize Record\" * `9`  \"Mark Official\" * `10` \"Export\" * `11` \"Update Storage Provider\" * `12` \"Delete Electronic Format\" * `15` \"Purge Versions\" * `16` \"Make Rendition\" * `32` \"Destroy\"\n",
                        "type": "string"
                    },
                    "disposition_id": {
                        "description": "ID of disposition search",
                        "type": "integer"
                    },
                    "disposition_process": {
                        "description": "Flag indicating if item should be actioned",
                        "type": "integer"
                    },
                    "icon": {
                        "description": "Icon for item",
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique object ID for item",
                        "type": "integer"
                    },
                    "make_rendition": {
                        "description": "Flag indicating if Mark Official action should include make rendition",
                        "type": "boolean"
                    },
                    "mime_type": {
                        "description": "Mime type",
                        "type": "string"
                    },
                    "modify_date": {
                        "description": "(Can be time-zone aware) The date on which the item was last modified",
                        "type": "string",
                        "format": "date"
                    },
                    "modify_user_id": {
                        "description": "ID of user who modified the item",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of item",
                        "type": "string"
                    },
                    "num_vers_to_keep": {
                        "description": "Number of versions to keep when running purge versions action",
                        "type": "integer"
                    },
                    "original_id": {
                        "description": "ID of original item used by shortcut",
                        "type": "integer"
                    },
                    "owner_user_id": {
                        "description": "The user id of the owner of this item",
                        "type": "integer"
                    },
                    "parent_id": {
                        "description": "Object ID of parent",
                        "type": "integer"
                    },
                    "parent_name": {
                        "description": "Name of a parent item",
                        "type": "string"
                    },
                    "purge_superseded": {
                        "description": "Flag indicating if only superseded versions should be purged",
                        "type": "boolean"
                    },
                    "qdate": {
                        "description": "Snapshot date",
                        "type": "string"
                    },
                    "reserved": {
                        "description": "Flag indicating if item is reserved",
                        "type": "boolean"
                    },
                    "reserved_date": {
                        "description": "Date that item was reserved",
                        "type": "string"
                    },
                    "reserved_user_id": {
                        "description": "ID of user who reserved the item",
                        "type": "integer"
                    },
                    "review_comments": {
                        "description": "Comments added when item is reviewed",
                        "type": "string"
                    },
                    "review_comments_data": {
                        "description": "Multiple comments",
                        "type": "string"
                    },
                    "review_decision": {
                        "description": "* `0`  \"Pending\" * `1`  \"Approved\" * `2`  \"Rejected\" * \n",
                        "type": "integer"
                    },
                    "reviewerid": {
                        "description": "ID of user specified as a reviewer",
                        "type": "integer"
                    },
                    "reviewerstep": {
                        "description": "First or second review step",
                        "type": "integer"
                    },
                    "rmiconsdata": {
                        "$ref": "#/components/schemas/rmiconsdata"
                    },
                    "size": {
                        "description": "Size of item",
                        "type": "integer"
                    },
                    "size_formatted": {
                        "description": "Size of item with appropriate unit type (for example, 7 KB or 11 items)",
                        "type": "string"
                    },
                    "stage_count": {
                        "description": "Count of RSI stages",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Item type expressed as a unique number",
                        "type": "integer"
                    },
                    "type_name": {
                        "description": "Item type",
                        "type": "string"
                    },
                    "volume_id": {
                        "description": "ID of volume where item belongs",
                        "type": "integer"
                    }
                }
            },
            "nodes_ColumnsInfo": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/nodes_ColumnInfo"
                }
            },
            "nodes_ColumnInfo": {
                "type": "object",
                "properties": {
                    "key": {
                        "description": "Unique identifier of column expressed as a string. Used to sort or get value, for example.",
                        "type": "string"
                    },
                    "data_type": {
                        "type": "integer",
                        "description": "Data Type (5 = Boolean,-7 = Date,13 = DatePopup,401 = DateTime,2 = Integer,12 = IntegerPopup,-1 = String,10 = StringPopup,305 = SubType,14 = User,19 = UserPopup)"
                    },
                    "name": {
                        "description": "Column name",
                        "type": "string"
                    },
                    "sort_key": {
                        "description": "Value by which column can be use in sorting.",
                        "type": "string"
                    }
                }
            },
            "metadata_property": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "persona": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "integer"
                    }
                }
            },
            "metadata_properties": {
                "properties": {
                    "action_info": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "action_performed": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "calculated_date": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "class_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "container": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "create_date": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "create_user_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "description": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "disp_action": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "disposition_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "disposition_process": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "icon": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "make_rendition": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "mime_type": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "modify_date": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "modify_user_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "name": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "num_vers_to_keep": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "original_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "owner_user_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "parent_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "parent_name": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "purge_superseded": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "reserved": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "reserved_date": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "reserved_user_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "review_comments": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "review_comments_data": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "review_decision": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "reviewer_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "reviewerstep": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "size": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "stage_count": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "type": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "type_name": {
                        "$ref": "#/components/schemas/metadata_property"
                    },
                    "volume_id": {
                        "$ref": "#/components/schemas/metadata_property"
                    }
                }
            },
            "rmiconsdata": {
                "properties": {
                    "class_id": {
                        "type": "integer"
                    },
                    "official": {
                        "type": "integer"
                    },
                    "show_classify": {
                        "type": "boolean"
                    },
                    "show_hold": {
                        "type": "boolean"
                    },
                    "show_hold_tab": {
                        "type": "boolean"
                    },
                    "show_official": {
                        "type": "boolean"
                    },
                    "show_xref_tab": {
                        "type": "boolean"
                    }
                }
            },
            "node_physicalitem": {
                "properties": {
                    "acknowledge": {
                        "type": "integer"
                    },
                    "advanced_versioning": {
                        "type": "boolean"
                    },
                    "area": {
                        "type": "string"
                    },
                    "borrow_comment": {
                        "type": "string"
                    },
                    "box_id": {
                        "type": "integer"
                    },
                    "box_locator": {
                        "type": "string"
                    },
                    "box_name": {
                        "type": "string"
                    },
                    "can_be_borrowed": {
                        "type": "boolean"
                    },
                    "charge_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "charged_to": {
                        "type": "string"
                    },
                    "client": {
                        "type": "string"
                    },
                    "client_id": {
                        "type": "integer"
                    },
                    "client_selection": {
                        "type": "boolean"
                    },
                    "container": {
                        "type": "boolean"
                    },
                    "container_size": {
                        "type": "integer"
                    },
                    "copy_number": {
                        "type": "integer"
                    },
                    "cparent_id": {
                        "type": "integer"
                    },
                    "create_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "create_user_id": {
                        "type": "integer"
                    },
                    "current_location": {
                        "type": "string"
                    },
                    "date_sent": {
                        "format": "date",
                        "type": "string"
                    },
                    "default_location": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "external_client": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "favorite": {
                        "type": "boolean"
                    },
                    "fields_definitions": {
                        "items": {
                            "$ref": "#/components/schemas/field_definition"
                        },
                        "type": "array"
                    },
                    "from_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "keywords": {
                        "type": "string"
                    },
                    "locator_type": {
                        "type": "string"
                    },
                    "media_type_id": {
                        "type": "integer"
                    },
                    "media_type_name": {
                        "type": "string"
                    },
                    "mime_type": {
                        "type": "string"
                    },
                    "modify_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "modify_user_id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "node_id": {
                        "type": "integer"
                    },
                    "obtained_by": {
                        "type": "string"
                    },
                    "obtained_by_id": {
                        "type": "integer"
                    },
                    "offsite_stor_id": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "owner_group_id": {
                        "type": "integer"
                    },
                    "owner_user_id": {
                        "type": "integer"
                    },
                    "parent_id": {
                        "type": "integer"
                    },
                    "permissions_model": {
                        "type": "string"
                    },
                    "physical_properties": {
                        "items": {
                            "$ref": "#/components/schemas/physical_property"
                        },
                        "type": "array"
                    },
                    "pick_up": {
                        "type": "integer"
                    },
                    "po_icon": {
                        "type": "string"
                    },
                    "ref_rate": {
                        "type": "string"
                    },
                    "reserved": {
                        "type": "boolean"
                    },
                    "reserved_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "reserved_user_id": {
                        "type": "integer"
                    },
                    "return_by_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "security_override": {
                        "type": "boolean"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "size_formatted": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "temporary_id": {
                        "type": "string"
                    },
                    "to_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "transfer_id": {
                        "type": "string"
                    },
                    "transfer_received": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "integer"
                    },
                    "type_name": {
                        "type": "string"
                    },
                    "unique_id": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "versionable": {
                        "type": "boolean"
                    },
                    "versions_control_advanced": {
                        "type": "string"
                    },
                    "volume_id": {
                        "type": "integer"
                    }
                }
            },
            "physical_property": {
                "properties": {
                    "default_value": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "media_type_id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "order": {
                        "type": "integer"
                    },
                    "popup_values": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "integer"
                    },
                    "type_name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "field_definition": {
                "properties": {
                    "hidden": {
                        "type": "boolean"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "readonly": {
                        "type": "boolean"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    },
                    "type_name": {
                        "type": "string"
                    },
                    "valid_values": {
                        "items": {
                            "$ref": "#/components/schemas/StrCode"
                        },
                        "type": "array"
                    },
                    "valid_values_name": {
                        "items": {
                            "$ref": "#/components/schemas/StrCodeDescription"
                        },
                        "type": "array"
                    }
                }
            },
            "StrCode": {
                "properties": {
                    "code": {
                        "type": "string"
                    }
                }
            },
            "borrowed_physical_items": {
                "properties": {
                    "collection": {
                        "type": "object",
                        "properties": {
                            "paging": {
                                "$ref": "#/components/schemas/Paging"
                            }
                        }
                    },
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/nodes_borroweditems"
                        },
                        "type": "array"
                    }
                }
            },
            "nodes_borroweditems": {
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "rmiconsdata": {
                                "$ref": "#/components/schemas/rmiconsdata"
                            },
                            "properties": {
                                "$ref": "#/components/schemas/node_physicalitem"
                            }
                        }
                    }
                }
            },
            "PhysicalObjectsSettings": {
                "properties": {
                    "LocationCodes": {
                        "items": {
                            "$ref": "#/components/schemas/Location"
                        }
                    },
                    "defaultLocation": {
                        "type": "string",
                        "description": "Default Location"
                    },
                    "locFreeForm": {
                        "type": "boolean",
                        "description": "Flag indicating if free form is used for Unique ID"
                    },
                    "FromToDatesMandatory": {
                        "type": "boolean",
                        "description": "Flag indicating if from and to dates are mandatory"
                    },
                    "synccontainerdates": {
                        "type": "boolean",
                        "description": "Flag indicating to synchronize from and to dates when content is added to Physical Items Containers"
                    },
                    "uniqueidrequired": {
                        "type": "boolean",
                        "description": "Flag indicating if Unique ID is a required field"
                    },
                    "showuniqueid": {
                        "type": "boolean",
                        "description": "Flag indicating to show generated Unique ID after creating new Physical Item"
                    },
                    "useuniqueid": {
                        "type": "boolean",
                        "description": "Flag indicating to use Unique ID in name generation of new Physical Item"
                    },
                    "uniqueidrule": {
                        "type": "integer",
                        "description": "Flag indicating where Unique ID is used in renaming Physical Item * `1`  Replace * `2`  Front * `3`  Back\n"
                    },
                    "generagesequencenumber": {
                        "type": "boolean",
                        "description": "Flag indicating to generate new sequence number when creating Physical Item"
                    },
                    "pometadatabutton": {
                        "type": "boolean",
                        "description": "Flag indicating to show Physical item metadata multi-select action"
                    },
                    "requestpobutton": {
                        "type": "boolean",
                        "description": "Flag indicating to show Request multi-select action"
                    },
                    "borrowpobutton": {
                        "type": "boolean",
                        "description": "Flag indicating to show Borrow multi-select action"
                    },
                    "returnpobutton": {
                        "type": "boolean",
                        "description": "Flag indicating to show Return multi-select action"
                    },
                    "generatelabelbutton": {
                        "type": "boolean",
                        "description": "Flag indicating to show Generate Labels multi-select action"
                    },
                    "assignboxbutton": {
                        "type": "boolean",
                        "description": "Flag indicating to show Assign box multi-select action"
                    },
                    "assignlocatorbutton": {
                        "type": "boolean",
                        "description": "Flag indicating to show Assign locator multi-select action"
                    },
                    "removelocatorbutton": {
                        "type": "boolean",
                        "description": "Flag indicating to show Remove locator multi-select action"
                    },
                    "assigntransferbutton": {
                        "type": "boolean",
                        "description": "Flag indicating to show Assign to transfer multi-select action"
                    },
                    "verifyRSI": {
                        "type": "boolean",
                        "description": "Flag indicating to verify if box RSI matches Physical Item RSI"
                    },
                    "boxReclassify": {
                        "type": "boolean",
                        "description": "Flag indicating if classification of items in a box should change when parent classification is changed"
                    },
                    "deleteifdifbox": {
                        "type": "boolean",
                        "description": "Flag indicating to delete box and all contents even if some of the sub items are assigned to a different box."
                    },
                    "syncboxdates": {
                        "type": "boolean",
                        "description": "Flag indicating if box From and To Dates should be automatically updated with contents From and To Dates"
                    },
                    "restrictboxdates": {
                        "type": "boolean",
                        "description": "Flag indicating if items placed in a box must have a date range within the box's date range"
                    },
                    "updatestatuslocation": {
                        "type": "boolean",
                        "description": "Flag indicating if update status and update location should be checked by default when assigning contents to a box"
                    },
                    "synctransfdates": {
                        "type": "boolean",
                        "description": "Flag indicating if Transfer From Date and To Date should be automatically updated with item's From Date and To Date"
                    },
                    "freelocatoronborrow": {
                        "type": "boolean",
                        "description": "Flag indicating to remove Physical Item from the Locator when being borrowed"
                    },
                    "numDaysToBorrow": {
                        "type": "integer",
                        "description": "Default number of days to borrrow Physical Item"
                    },
                    "acknowledge": {
                        "type": "boolean",
                        "description": "Flag indicating if acknowledge is required when item is borrowed"
                    },
                    "borrowChildren": {
                        "type": "boolean",
                        "description": "Flag indicating to allow users to borrow children objects from parent objects or boxes that are already borrowed."
                    },
                    "securityoverride": {
                        "type": "boolean",
                        "description": "Flag indicating if security override should be checked by default when borrowing Physical Items."
                    },
                    "adminpurgehistory": {
                        "type": "boolean",
                        "description": "Flag indicating to restrict purging circulation history to users with admin rights"
                    },
                    "accessByPermissions": {
                        "type": "boolean",
                        "description": "Flag indicating to use restriced access when circulation Physical Items"
                    },
                    "midNotification": {
                        "type": "boolean",
                        "description": "Flag indicating if midnight notification is enabled"
                    },
                    "emailrequest": {
                        "type": "boolean",
                        "description": "Flag indicating to send email when Physical Item is requested"
                    },
                    "emailpickup": {
                        "type": "boolean",
                        "description": "Flag indicating to send email when Physical Item is ready for pick up"
                    },
                    "emailInterval": {
                        "type": "integer",
                        "description": "Number of days between email notifications for overdue items"
                    },
                    "numReminders": {
                        "type": "integer",
                        "description": "Number of email notifications and escalation email for overdue items"
                    }
                }
            },
            "requested_physical_items": {
                "properties": {
                    "collection": {
                        "type": "object",
                        "properties": {
                            "paging": {
                                "$ref": "#/components/schemas/Paging"
                            }
                        }
                    },
                    "results": {
                        "properties": {
                            "definitions": {},
                            "data": {
                                "items": {
                                    "$ref": "#/components/schemas/node_physicalitem"
                                },
                                "type": "array"
                            },
                            "definitions_map": {},
                            "definitions_order": {}
                        }
                    }
                }
            },
            "Boxes": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/BoxInfo"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BoxInfo": {
                "properties": {
                    "unique_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "locator_type": {
                        "type": "string"
                    },
                    "node_id": {
                        "type": "integer"
                    }
                }
            },
            "SecuritySettings": {
                "properties": {
                    "security_enabled": {
                        "type": "boolean",
                        "description": "Flag indicating if security information should be dispalyed on user profile"
                    }
                }
            },
            "UserSecurity": {
                "properties": {
                    "dynamicSecurity": {
                        "type": "integer",
                        "description": "User Current Security Clearance Level"
                    },
                    "dynamicSecurityName": {
                        "type": "string",
                        "description": "User Current Security Clearance Level name"
                    },
                    "securityLevel": {
                        "type": "integer",
                        "description": "User Security Clearance Level"
                    },
                    "securityLevelName": {
                        "type": "string",
                        "description": "User Security Clearance Level name"
                    }
                }
            },
            "records_details_tab": {
                "properties": {
                    "fields_order": {
                        "type": "object",
                        "description": "List of all records management fields in display order."
                    },
                    "definitions": {
                        "type": "object",
                        "description": "Basic data about the alpaca form"
                    }
                }
            },
            "RMSettings": {
                "properties": {
                    "adminAuthority_Name": {
                        "type": "string",
                        "description": "Name of the authority who enabled Records Management"
                    },
                    "apply_hold_button": {
                        "type": "boolean",
                        "description": "Flag indicating if Apply hold button is enabled"
                    },
                    "bCanRMClassify": {
                        "type": "boolean",
                        "description": "Flag indicating if user can apply RM Classification"
                    },
                    "catalog_mode": {
                        "type": "boolean",
                        "description": "Flag indicating if RM Classification should be dispalyed in catalog mode"
                    },
                    "classified_icon": {
                        "type": "boolean",
                        "description": "Flag indicating if View Records details icon is enabled"
                    },
                    "classfy_button": {
                        "type": "boolean",
                        "description": "Flag indicating if Apply Classification button is enabled"
                    },
                    "declare_record_button": {
                        "type": "boolean",
                        "description": "Flag indicating if Finalize button is enabled"
                    },
                    "default_classification_id": {
                        "type": "integer",
                        "description": "ID of default RM Classification"
                    },
                    "default_classification_path": {
                        "type": "string",
                        "description": "Location path to default RM Classification"
                    },
                    "default_prov_location_id": {
                        "type": "integer",
                        "description": "ID of default parent object for items created from Classification Workspace"
                    },
                    "default_prov_location_path": {
                        "type": "string",
                        "description": "Location path to default parent object for items created from Classification Workspace"
                    },
                    "defaultClassBySubType": {
                        "type": "object",
                        "description": "List of key-value pair of Sub type and default RM Classification ID"
                    },
                    "dispButtons": {
                        "type": "object",
                        "description": "List of buttons which are enabled to be shown in Disposition snapshot view"
                    },
                    "fn_sep": {
                        "type": "string",
                        "description": "File number separator"
                    },
                    "hold_icon": {
                        "type": "boolean",
                        "description": "Flag indicating if Hold icon is enabled"
                    },
                    "inheritList": {
                        "type": "object",
                        "description": "List of sub types with inheritance enabled"
                    },
                    "licensingConfirmation": {
                        "type": "boolean",
                        "description": "Flag indicating that Records Management module is enabled"
                    },
                    "managedTypes": {
                        "type": "object",
                        "description": "List of sub types managed by Records Management"
                    },
                    "num_results": {
                        "type": "integer",
                        "description": "Default number of items returned by page"
                    },
                    "official_icon": {
                        "type": "boolean",
                        "description": "Flag indicating if Official icon is enabled"
                    },
                    "rejectCommentRequired": {
                        "type": "boolean",
                        "description": "Flag indicating if entering comments when rejecting items in disposition is required"
                    },
                    "remove_class_button": {
                        "type": "boolean",
                        "description": "Flag indicating if Remove Classification button is enabled"
                    },
                    "remove_hold_button": {
                        "type": "boolean",
                        "description": "Flag indicating if Remove hold button is enabled"
                    },
                    "rm_metadata_button": {
                        "type": "boolean",
                        "description": "Flag indicating if Update record metadata button is enabled"
                    },
                    "rsi_standard_browse": {
                        "type": "boolean",
                        "description": "Flag indicating if default view for accession RSI is browse"
                    },
                    "thes_at_front": {
                        "type": "boolean",
                        "description": "Flag indicating if RM Classification Titling should appen RM Classification name at the front of object name"
                    },
                    "thes_name": {
                        "type": "boolean",
                        "description": "Flag indicating if RM Classification Titling should appen RM Classification name or description of the object"
                    },
                    "thes_titling": {
                        "type": "boolean",
                        "description": "Flag indicating if RM Classification Titling is enabled"
                    },
                    "xref_button": {
                        "type": "boolean",
                        "description": "Flag indicating if Assign cross-reference button is enabled"
                    }
                }
            },
            "rm_stats_hold": {
                "properties": {
                    "directHoldsCount": {
                        "type": "integer",
                        "description": "Number of Holds applied directly"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Number of all item in a system"
                    }
                }
            },
            "rm_stats_rsi": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/rsi_stats"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "rsi_stats": {
                "properties": {
                    "rsi": {
                        "type": "string",
                        "description": "Name of RSI"
                    },
                    "cnt": {
                        "type": "integer",
                        "description": "Number of items whith specific RSI"
                    }
                }
            },
            "rm_stats_classified": {
                "properties": {
                    "managedRecordsCnt": {
                        "type": "integer",
                        "description": "Number of items classified with RM Classification"
                    }
                }
            },
            "rm_stats_disposition": {
                "properties": {
                    "dispositionsCnt": {
                        "type": "integer",
                        "description": "Number of items in disposition search"
                    }
                }
            },
            "rm_stats_compliance": {
                "properties": {
                    "oldCnt": {
                        "type": "integer",
                        "description": "Number of RM Classified items older then 20 years"
                    },
                    "retentionCnt": {
                        "type": "integer",
                        "description": "Number of items with RSI"
                    },
                    "totalCnt": {
                        "type": "integer",
                        "description": "Number of items in the system"
                    }
                }
            },
            "rm_fields": {
                "properties": {
                    "rmfield": {
                        "items": {
                            "$ref": "#/components/schemas/rm_field"
                        },
                        "type": "array"
                    },
                    "rmvitalcode": {
                        "type": "string",
                        "description": "List of Essential codes which are Vital"
                    },
                    "userecordversion": {
                        "type": "boolean"
                    },
                    "versioncode": {
                        "type": "string"
                    },
                    "xreference": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "rm_field": {
                "properties": {
                    "add": {
                        "type": "boolean",
                        "description": "Flag indicating to show RM Metadata field on create page"
                    },
                    "addreq": {
                        "type": "boolean",
                        "description": "Flag indicating that field is required on create page"
                    },
                    "inputtype": {
                        "type": "string",
                        "description": "Type of field ( eg. 'SELECT', 'TEXT' )"
                    },
                    "label": {
                        "type": "string",
                        "description": "Label"
                    },
                    "name": {
                        "type": "string"
                    },
                    "order": {
                        "type": "integer"
                    },
                    "tabreq": {
                        "type": "boolean",
                        "description": "Flag indicating that field is required on Records Management tab"
                    }
                }
            },
            "rm_funcaccess": {
                "properties": {
                    "funcid": {
                        "type": "string",
                        "description": "ID of functional access"
                    },
                    "value": {
                        "type": "boolean",
                        "description": "Flag indicating if user has specific functional access assigned"
                    }
                }
            },
            "rm_functions": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/rm_funcaccess"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "rm_codes": {
                "properties": {
                    "rmaccession": {
                        "items": {
                            "$ref": "#/components/schemas/rmaccession"
                        },
                        "type": "array"
                    },
                    "rmcycleperiod": {
                        "items": {
                            "$ref": "#/components/schemas/rmcycleperiod"
                        },
                        "type": "array"
                    },
                    "rmdocxreftyp": {
                        "items": {
                            "$ref": "#/components/schemas/rmdocxreftyp"
                        },
                        "type": "array"
                    },
                    "rmesscode": {
                        "items": {
                            "$ref": "#/components/schemas/rmesscode"
                        },
                        "type": "array"
                    },
                    "rmholdtype": {
                        "items": {
                            "$ref": "#/components/schemas/rmholdtype"
                        },
                        "type": "array"
                    },
                    "rmrsi": {
                        "items": {
                            "$ref": "#/components/schemas/rmrsi"
                        },
                        "type": "array"
                    },
                    "rmstatuscode": {
                        "items": {
                            "$ref": "#/components/schemas/rmstatuscode"
                        },
                        "type": "array"
                    },
                    "rmstorage": {
                        "items": {
                            "$ref": "#/components/schemas/rmstorage"
                        },
                        "type": "array"
                    }
                }
            },
            "rmaccession": {
                "properties": {
                    "accession": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "rmcycleperiod": {
                "properties": {
                    "cycleperiod": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "rmdocxreftyp": {
                "properties": {
                    "docxref": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "relatedcode": {
                        "type": "string"
                    }
                }
            },
            "rmesscode": {
                "properties": {
                    "essential": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "rmholdtype": {
                "properties": {
                    "holdtype": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "rmrsi": {
                "properties": {
                    "rsi": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "rmstatuscode": {
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "rmstorage": {
                "properties": {
                    "storage": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            }
        }
    }
}