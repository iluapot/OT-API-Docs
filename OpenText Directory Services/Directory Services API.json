{
    "swagger": "2.0",
    "info": {
        "version": "20.4.1",
        "title": "Directory Services API"
    },
    "basePath": "/otdsws/rest",
    "tags": [
        {
            "name": "identityproviderprofiles",
            "description": "Operations on synchronized partitions"
        },
        {
            "name": "identityproviders",
            "description": "Operations for configuring a synchronized partition"
        },
        {
            "name": "importunits",
            "description": "Operations for configuring external import sources"
        },
        {
            "name": "recyclebin",
            "description": "Operations on users, groups and roles in Recycle Bin"
        },
        {
            "name": "accessroles",
            "description": "Operations on access roles"
        },
        {
            "name": "authhandlers",
            "description": "Operations on authentication handlers"
        },
        {
            "name": "registeredauthhandlers",
            "description": "List registered authentication handler types"
        },
        {
            "name": "authentication",
            "description": "Authentication operations"
        },
        {
            "name": "connectors",
            "description": "Get information on push connectors"
        },
        {
            "name": "consolidation",
            "description": "Perform various types of consolidation"
        },
        {
            "name": "currentuser",
            "description": "Operations on the user in authentication context"
        },
        {
            "name": "groups",
            "description": "Operations on groups"
        },
        {
            "name": "jobs",
            "description": "Operations on background jobs"
        },
        {
            "name": "oauthclients",
            "description": "Operations on OAuth clients"
        },
        {
            "name": "orgunits",
            "description": "Operations on organizational units"
        },
        {
            "name": "partitions",
            "description": "Operations on partitions"
        },
        {
            "name": "reports",
            "description": "Operations related to audited events and OTDS health status"
        },
        {
            "name": "resources",
            "description": "Operations on resources"
        },
        {
            "name": "roles",
            "description": "Operations on application roles"
        },
        {
            "name": "systemconfig",
            "description": "System configuration operations"
        },
        {
            "name": "users",
            "description": "Operations on users"
        },
        {
            "name": "usersgroups",
            "description": "Search for both users and groups"
        },
        {
            "name": "licensemanagement",
            "description": "Operations on licenses"
        }
    ],
    "paths": {
        "/identityproviderprofiles/{profile_name}": {
            "get": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Get a synchronized user partition by name",
                "description": "",
                "operationId": "getIdentityProviderProfile_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "profile_name",
                        "in": "path",
                        "description": "Profile Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Update a synchronized user partition",
                "description": "",
                "operationId": "updatePartition_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "profile_name",
                        "in": "path",
                        "description": "Profile name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Synchronized user partition object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Delete a synchronized user partition",
                "description": "",
                "operationId": "deletePartition_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "profile_name",
                        "in": "path",
                        "description": "Profile name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviderprofiles": {
            "get": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Get identity provider profile list",
                "description": "",
                "operationId": "getIdentityProviderProfileList_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Create a synchronized user partition",
                "description": "",
                "operationId": "createIdentityProviderProfile_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Synchronized user partition object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviderprofiles/{profile_name}/partition_info": {
            "get": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Get identity provider partition information",
                "description": "",
                "operationId": "getPartitionInfo_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "profile_name",
                        "in": "path",
                        "description": "Profile Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/PartitionInfo"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviderprofiles/{profile_name}/command": {
            "post": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Send identity provider command",
                "description": "Command is one of: import, reload, restart",
                "operationId": "sendIdentityProviderCommand_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "profile_name",
                        "in": "path",
                        "description": "Profile Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Command",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommandParams"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviderprofiles/{profile_name}/basic_info": {
            "put": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Get identity provider basic information",
                "description": "",
                "operationId": "queryIdentityProviderBasicInfo_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "profile_name",
                        "in": "path",
                        "description": "Profile Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Basic Profile",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderBasicProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderBasicInfo"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviderprofiles/migrateCSDSSyncSources": {
            "post": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Migrate CSDS sync sources to synchronized user partitions",
                "description": "",
                "operationId": "migrateCSDSSyncSources_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "CSDS sync source objects to migrate",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CSDSSyncSourceList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviderprofiles/{profile_name}/restartstatus": {
            "get": {
                "tags": [
                    "identityproviderprofiles"
                ],
                "summary": "Check current status on partition restart",
                "description": "",
                "operationId": "restartStatus_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "profile_name",
                        "in": "path",
                        "description": "Profile Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/extended_functionality_settings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Verify Extended Functionality Settings",
                "description": "",
                "operationId": "verifyExtendedFunctionalitySettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/simulation/user_extended_attribute_mappings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Simulate User Extended Attribute Mappings",
                "description": "",
                "operationId": "simulateUserExtendedAttributeMappings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Simulation params",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SimulationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/simulation/group_extended_attribute_mappings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Simulate Group Extended Attribute Mappings",
                "description": "",
                "operationId": "simulateGroupExtendedAttributeMappings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Simulation params",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SimulationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/user_locations_settings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Verify User Locations Settings",
                "description": "",
                "operationId": "verifyUserLocationsSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/simulation/user_attribute_mappings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Simulate User Attribute Mappings",
                "description": "",
                "operationId": "simulateUserAttributeMappings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Simulation params",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SimulationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/group_locations_settings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Verify Group Locations Settings",
                "description": "",
                "operationId": "verifyGroupLocationsSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/group_attribute_mappings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Verify Group Attribute Mappings",
                "description": "",
                "operationId": "verifyGroupAttributeMappings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/simulation/group_attribute_mappings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Simulate Group Attribute Mappings",
                "description": "",
                "operationId": "simulateGroupAttributeMappings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Simulation params",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SimulationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/default_basic_info/{schema_type}": {
            "get": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Get default basic info",
                "description": "",
                "operationId": "getDefaultBasicInfo_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "schema_type",
                        "in": "path",
                        "description": "Schema Type",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/user_attribute_mappings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Verify Group Attribute Mappings",
                "description": "",
                "operationId": "verifyUserAttributeMappings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/network_parameters": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Check Network Parameter",
                "description": "",
                "operationId": "checkNetworkParameter_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Basic Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderBasicProfile"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/search_settings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Verify Search Settings",
                "description": "",
                "operationId": "verifySearchSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/server_basic_settings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Verify Server Basic Settings",
                "description": "",
                "operationId": "verifyServerBasicSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Basic Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderBasicProfile"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/monitoring_settings": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Verify Monitoring Settings",
                "description": "",
                "operationId": "verifyMonitoringSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfileEx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TestResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/template/{schema_type}": {
            "get": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Get the identity provider profile template",
                "description": "",
                "operationId": "getIdentityProviderProfileTemplate_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "schema_type",
                        "in": "path",
                        "description": "Schema Type",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfile"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/partition_name": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Verify Partition Name",
                "description": "",
                "operationId": "verifyPartitionName_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Partition Name",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProfileName"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/verification/authentication": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Check authentication",
                "description": "",
                "operationId": "checkAuthentication_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider Basic Profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderBasicProfile"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/base_dns": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Get a list of base DNs",
                "description": "",
                "operationId": "queryBaseDNList_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider profile",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/identityproviders/container_content/{node_name}": {
            "put": {
                "tags": [
                    "identityproviders"
                ],
                "summary": "Get Container Content for a node",
                "description": "",
                "operationId": "queryContainerContent_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "node_name",
                        "in": "path",
                        "description": "Node DN",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Identity Provider profile",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/IdentityProviderProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/importunits": {
            "get": {
                "tags": [
                    "importunits"
                ],
                "summary": "Get all import units",
                "description": "",
                "operationId": "getImportUnits_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListImportUnitsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "importunits"
                ],
                "summary": "Add an import unit",
                "description": "",
                "operationId": "createImportUnit_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ImportUnit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ImportUnitsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/importunits/verification/database": {
            "put": {
                "tags": [
                    "importunits"
                ],
                "summary": "Check database parameters validity",
                "description": "",
                "operationId": "getDatabaseInformation_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DatabaseSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ResponseDatabaseSettings"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/importunits/{importunitname}": {
            "put": {
                "tags": [
                    "importunits"
                ],
                "summary": "Update an import unit",
                "description": "",
                "operationId": "setImportUnit_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "importunitname",
                        "in": "path",
                        "description": "Import Unit Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ImportUnit"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "importunits"
                ],
                "summary": "Delete an import unit",
                "description": "",
                "operationId": "deleteImportUnit_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "importunitname",
                        "in": "path",
                        "description": "Import Unit ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/importunits/verification/xml": {
            "put": {
                "tags": [
                    "importunits"
                ],
                "summary": "Check xml parameters validity",
                "description": "",
                "operationId": "verifyXMLValidity_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ImportUnitXMLObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ResponseDatabaseSettings"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/importunits/{importUnitID}": {
            "get": {
                "tags": [
                    "importunits"
                ],
                "summary": "Get a specific import unit",
                "description": "",
                "operationId": "getImportUnitByID_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "importUnitID",
                        "in": "path",
                        "description": "Import Unit name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/DatabaseSettings"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "importunits"
                ],
                "summary": "Start the import job",
                "description": "",
                "operationId": "importUsersGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "importUnitID",
                        "in": "path",
                        "description": "Import Unit name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/roles": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Get all deleted roles",
                "description": "Returns all deleted roles that match the given parameters. If both the partition name and location DN are specified, the location is used. If none are specified all deleted roles are returned. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "listAllDeletedRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListGroupsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/groups": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Get all deleted groups",
                "description": "Returns all deleted groups that match the given parameters. If both the partition name and location DN are specified, the location is used. If none are specified all deleted groups are returned. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "listAllDeletedGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListGroupsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/users": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Get all deleted users",
                "description": "Returns all deleted users that match the given parameters. If both the partition name and location DN are specified, the location is used. If none are specified all deleted users are returned. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "listAllDeletedUsers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListUsersResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/groups/{group_id}": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Get a group by the specified id",
                "description": "The group ID is 'location' field of the group structure",
                "operationId": "getGroup_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Delete a group",
                "description": "The group ID is 'location' field of the group structure",
                "operationId": "deleteGroup_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/users/{user_id}": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Get a user by the specified id",
                "description": "The user ID is 'location' field of the user structure",
                "operationId": "getUser_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Delete a user",
                "description": "The user ID is 'location' field of the user structure",
                "operationId": "deleteUser_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/groups/{group_id}/members": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Get the members of a group",
                "description": "The group ID is 'location' field of the group structure",
                "operationId": "listGroupMembers_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/groups/{group_id}/memberof": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "List all the groups the specific group is a member of",
                "description": "The group ID is 'location' field of the group structure. Returns a list of group objects the specific group is a member of that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only the groups that the group is member of are returned. If the recursive parameter is true the nested groups that the group is member of are also returned. The group ID is 'location' field of the group structure.",
                "operationId": "listGroupsForGroup_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListGroupsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/users/{user_id}/memberof": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "List all the groups the specified user is a member of",
                "description": "The user ID is 'location' field of the user structure. Returns a list of group objects the specified user is a member of that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only the groups that the user is member of are returned. If the recursive parameter is true the nested groups that the user is member of are also returned. The user ID is 'location' field of the user structure.",
                "operationId": "listGroupsForUser_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recursive",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListGroupsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/users/{user_id}/roles": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "List all roles assigned to the user",
                "description": "The user ID is 'location' field of the user structure. Returns a list of role objects assigned to the user that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only directly assigned roles are returned. If the recursive parameter is true the nested assigned roles are returned.",
                "operationId": "listRolesForUser_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recursive",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListRolesResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/groups/{group_id}/roles": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "List all roles assigned to the group",
                "description": "The group ID is 'location' field of the group structure. Returns a list of role objects assigned to the group that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only directly assigned roles are returned. If the recursive parameter is true the nested assigned roles are returned.",
                "operationId": "listRolesForGroup_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListRolesResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/roles/{role_id}": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Get a role by the specified id",
                "description": "The role ID is 'location' field of the role structure",
                "operationId": "getRole_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Delete a role",
                "description": "The role ID is 'location' field of the role structure",
                "operationId": "deleteRole_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin": {
            "delete": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Delete all users, groups and roles",
                "description": "Delete all users, groups and roles that match the given parameters. If both the partition name and location DN are specified, the location is used. If none are specified all users, groups and roles are deleted. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "deleteAll_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/restore/roles": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Restore all deleted roles",
                "description": "Restore all deleted roles that match the given parameters.If both the partition name and location DN are specified, the location is used. If none are specified all roles are restored. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "restoreRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/delete/users": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Delete all users",
                "description": "Delete all users that match the given parameters. If both the partition name and location DN are specified, the location is used. If none are specified all users are deleted. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "deleteUsers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/restore": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Restore all deleted users, groups and roles",
                "description": "Restore all deleted users, groups and roles that match the given parameters.If both the partition name and location DN are specified, the location is used. If none are specified all users, groups and roles are restored. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "restoreAll_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/roles/{role_id}/restore": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Restore a role by the specified id",
                "description": "The role ID is 'location' field of the role structure",
                "operationId": "restoreRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/delete/groups": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Delete all groups",
                "description": "Delete all groups that match the given parameters. If both the partition name and location DN are specified, the location is used. If none are specified all groups are deleted. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "deleteGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/users/{user_id}/restore": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Restore a user by the specified id",
                "description": "The user ID is 'location' field of the user structure",
                "operationId": "restoreUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/groups/{group_id}/restore": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Restore a group by the specified id",
                "description": "The group ID is 'location' field of the group structure",
                "operationId": "restoreGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/restore/groups": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Restore all deleted groups",
                "description": "Restore all deleted groups that match the given parameters.If both the partition name and location DN are specified, the location is used. If none are specified all groups are restored. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "restoreGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/delete/roles": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Delete all roles",
                "description": "Delete all roles that match the given parameters. If both the partition name and location DN are specified, the location is used. If none are specified all roles are deleted. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "deleteRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/restore/users": {
            "post": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Restore all deleted users",
                "description": "Restore all deleted users that match the given parameters. If both the partition name and location DN are specified, the location is used. If none are specified all users are restored. The filter has to be in a format \"*string*\". Deleted after, deleted before and the custom attributes, if present, are used to create an additional filter. Deleted after, deleted before time has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "restoreUsers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_deleted_after",
                        "in": "query",
                        "description": "Deleted After",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_deleted_before",
                        "in": "query",
                        "description": "Deleted Before",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/roles/{role_id}/members": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "Get the members this role is assigned to",
                "description": "The role ID is 'location' field of the role structure",
                "operationId": "listRoleMembers_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/recyclebin/roles/{role_id}/roles": {
            "get": {
                "tags": [
                    "recyclebin"
                ],
                "summary": "List all roles assigned to the role",
                "description": "The role ID is 'location' field of the role structure. Returns a list of role objects the role is a member of that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only the roles that the role is member of are returned. If the recursive parameter is true the nested roles that the role is member of are also returned.",
                "operationId": "listRolesForRole_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListRolesResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/accessroles/{access_role_name}/members": {
            "post": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Add members to an access role",
                "description": "",
                "operationId": "addMembersToAccessRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Members",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessRoleMembers"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Set members of an access role",
                "description": "",
                "operationId": "setAccessRoleMembers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Members",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessRoleMembers"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/accessroles/{access_role_name}": {
            "get": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Get specified access role",
                "description": "",
                "operationId": "getAccessRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AccessRole"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Update an access role",
                "description": "",
                "operationId": "updateAccessRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The access role to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessRole"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Delete an access role",
                "description": "",
                "operationId": "deleteAccessRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/accessroles": {
            "get": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Get all access roles",
                "description": "",
                "operationId": "getAccessRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListDetailedAccessRolesResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Create an access role",
                "description": "",
                "operationId": "createAccessRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The access role to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessRole"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/accessroles/{access_role_name}/resources": {
            "post": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Add resources to an access role",
                "description": "",
                "operationId": "addResourcesToAccessRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Resource names",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/accessroles/{access_role_name}/members/deletionset": {
            "post": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Remove members from an access role",
                "description": "",
                "operationId": "removeMembersFromAccessRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Members",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessRoleMembers"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/accessroles/{access_role_name}/resources/deletionset": {
            "post": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Remove resources from an access role",
                "description": "",
                "operationId": "removeResourcesFromAccessRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Resource names",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/accessroles/{access_role_name}/attributes": {
            "get": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Get access role attributes",
                "description": "",
                "operationId": "getAccessRoleAttributes_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AttributeConfigurationList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "accessroles"
                ],
                "summary": "Set access role attributes",
                "description": "",
                "operationId": "setAccessRoleAttributes_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "access_role_name",
                        "in": "path",
                        "description": "Access role name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Attributes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AttributeConfigurationList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/authhandlers/{handler_name}/priority": {
            "put": {
                "tags": [
                    "authhandlers"
                ],
                "summary": "Set handler priority",
                "description": "",
                "operationId": "setAuthenticationHandlerPriority_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "handler_name",
                        "in": "path",
                        "description": "Handler name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The priority (a positive integer as string. 0 is the highest priority)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/authhandlers/{handler_name}/scope": {
            "put": {
                "tags": [
                    "authhandlers"
                ],
                "summary": "Set handler scope",
                "description": "",
                "operationId": "setAuthenticationHandlerScope_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "handler_name",
                        "in": "path",
                        "description": "Handler name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The partitions names to scope the handler to. Specify an empty list to give the handler global scope.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/authhandlers/{handler_name}/status": {
            "put": {
                "tags": [
                    "authhandlers"
                ],
                "summary": "Set handler status",
                "description": "Sets a handler to enabled or disabled.",
                "operationId": "setAuthenticationHandlerStatus_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "handler_name",
                        "in": "path",
                        "description": "Handler name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Specify 'true' to enable, 'false' to disable.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/authhandlers/{handler_name}": {
            "get": {
                "tags": [
                    "authhandlers"
                ],
                "summary": "Get specified handler",
                "description": "",
                "operationId": "getInstalledAuthenticationHandler_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "handler_name",
                        "in": "path",
                        "description": "Handler name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationHandlerInfo"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "authhandlers"
                ],
                "summary": "Update a handler",
                "description": "",
                "operationId": "updateAuthenticationHandler_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "handler_name",
                        "in": "path",
                        "description": "Handler name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "validate_parameters",
                        "in": "query",
                        "description": "Validate parameters",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The handler to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationHandlerInfo"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "authhandlers"
                ],
                "summary": "Delete a handler",
                "description": "",
                "operationId": "deleteAuthenticationHandler_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "handler_name",
                        "in": "path",
                        "description": "Handler name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/authhandlers": {
            "get": {
                "tags": [
                    "authhandlers"
                ],
                "summary": "Get all configured handlers",
                "description": "Returns all handlers that are configured/installed on the system",
                "operationId": "listInstalledAuthenticationHandlers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListAuthenticationHandlersResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "authhandlers"
                ],
                "summary": "Create a handler",
                "description": "",
                "operationId": "createAuthenticationHandler_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The handler to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationHandlerInfo"
                        }
                    },
                    {
                        "name": "validate_parameters",
                        "in": "query",
                        "description": "Validate parameters",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/authhandlers/{handler_name}/files": {
            "post": {
                "tags": [
                    "authhandlers"
                ],
                "summary": "Update a handler's files",
                "description": "Requires a multipart/form-data message",
                "operationId": "updateAuthenticationHandlerFiles_1",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "text/html"
                ],
                "parameters": [
                    {
                        "name": "handler_name",
                        "in": "path",
                        "description": "Handler name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "validate_parameters",
                        "in": "query",
                        "description": "Validate parameters",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "access_token",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file1_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file1",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "file2_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file2",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "file3_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file3",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "file4_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file4",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "file5_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file5",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "file6_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file6",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "file7_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file7",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "file8_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file8",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "file9_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file9",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "file10_property",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file10",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/registeredauthhandlers": {
            "get": {
                "tags": [
                    "registeredauthhandlers"
                ],
                "summary": "Get registered handlers",
                "description": "Returns information for all available handlers that can be created",
                "operationId": "listRegisteredAuthenticationHandlers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListAuthenticationHandlersResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/authentication/resource/credentials": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate credentials (to be used by resources)",
                "description": "",
                "operationId": "authenticateCredentials_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "userName, password, sourceResourceId, secureSecret/authenticator are required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/authentication/resource/token": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate token (to be used by resources)",
                "description": "",
                "operationId": "authenticateToken_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "tokenBinary, sourceResourceId, secureSecret/authenticator are required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/authentication/resource/validation": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Validate a ticket (to be used by resources)",
                "description": "",
                "operationId": "validateTicket_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "ticket, sourceResourceId, secureSecret/authenticator are required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TicketParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TicketContentResponse"
                        }
                    }
                }
            }
        },
        "/authentication/resource/http": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate by HTTP headers/cookies (to be used by resources)",
                "description": "",
                "operationId": "authenticateHTTP_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "headersList, cookiesList, sourceResourceId, secureSecret/authenticator are required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/authentication/credentials": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate with credentials (username and password)",
                "description": "",
                "operationId": "authenticateWithPassword_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "userName and password are required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/authentication/ticketforresource": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Obtain a ticket for another resource",
                "description": "",
                "operationId": "requestTicketForResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "ticket, targetResourceId are required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TicketParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/authentication/ticketforuser": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Impersonate a user",
                "description": "",
                "operationId": "requestTicketForUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "userName, ticket are required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TicketParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/authentication/tokenfromauthhandler": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Obtain a token (i.e. SAML/OAuth) for a third party using the specified authentication handler",
                "description": "",
                "operationId": "requestTokenFromAuthHandler_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ThirdPartyTokenParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/authentication/resource/ticketforuser": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Impersonate a user (to be used by resources)",
                "description": "",
                "operationId": "resourceRequestTicketForUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "userName, ticket, targetResourceId, sourceResourceId, secureSecret/authenticator are required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TicketParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/authentication/resource/ticketforresource": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Obtain a ticket for another resource (to be used by resources)",
                "description": "",
                "operationId": "resourceRequestTicketForResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "ticket, targetResourceId, sourceResourceId, secureSecret/authenticator are required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TicketParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/authentication/signup/token": {
            "get": {
                "tags": [
                    "authentication"
                ],
                "summary": "Get a signup token for a specified email address",
                "description": "",
                "operationId": "getSignupToken_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email address",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "partition_name",
                        "in": "query",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "is_admin",
                        "in": "query",
                        "description": "Assign OTDS admin rights",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/authentication/oauth/{token}": {
            "delete": {
                "tags": [
                    "authentication"
                ],
                "summary": "Revoke OAuth refresh and access tokens",
                "description": "",
                "operationId": "revokeOAuthRefreshTokens_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "OAuth Access Token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/authentication/oauth/tokeninfo": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Validate an OAuth access token",
                "description": "",
                "operationId": "validateOAuthAccessToken_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Access Token",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OAuthTokenParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/OAuthTokenInfo"
                        }
                    },
                    "410": {
                        "description": "Expired, stale, or revoked token - reauthentication required",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token format or not an OAuth access token",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Token does not grant access to the requested resource",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/authentication/token": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate with a token",
                "description": "",
                "operationId": "authenticate_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "tokenBinary is required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/authentication/headers": {
            "get": {
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate by HTTP headers/cookies",
                "description": "Authenticates a user using HTTP headers and cookies provided in the call.",
                "operationId": "authenticate",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    }
                }
            }
        },
        "/connectors/{connector_id}/verification/connection": {
            "put": {
                "tags": [
                    "connectors"
                ],
                "summary": "Verify that a resource connection can be made using the specified parameters",
                "description": "",
                "operationId": "checkConnection_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "connector_id",
                        "in": "path",
                        "description": "Connector ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The resource configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceConnectionParamList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/connectors/{connector_id}/groupmappings": {
            "put": {
                "tags": [
                    "connectors"
                ],
                "summary": "Get Resource Group Mappings",
                "description": "",
                "operationId": "getResourceGroupMappings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "connector_id",
                        "in": "path",
                        "description": "Connector ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The resource configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceConnectionParamList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AttributeMappingList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/connectors/{connector_id}/usermappings": {
            "put": {
                "tags": [
                    "connectors"
                ],
                "summary": "Get Resource User Mappings",
                "description": "",
                "operationId": "getResourceUserMappings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "connector_id",
                        "in": "path",
                        "description": "Connector ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The resource configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceConnectionParamList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AttributeMappingList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/connectors/{connector_id}": {
            "get": {
                "tags": [
                    "connectors"
                ],
                "summary": "Get connection parameter information for a type of connector",
                "description": "",
                "operationId": "getConnectionParamInformation_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "connector_id",
                        "in": "path",
                        "description": "Connector ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ResourceConnectionParamResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/connectors": {
            "get": {
                "tags": [
                    "connectors"
                ],
                "summary": "Get all connector types",
                "description": "",
                "operationId": "getConnectorsInfo_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ResourceConnectorInfoResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/consolidation/missinggroup": {
            "post": {
                "tags": [
                    "consolidation"
                ],
                "summary": "Consolidate a missing group",
                "description": "",
                "operationId": "consolidateMissingGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Missing Group DN",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConsolidationObject"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Job created successfully. Response contains job details.",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/consolidation/missinguser": {
            "post": {
                "tags": [
                    "consolidation"
                ],
                "summary": "Consolidate a missing user",
                "description": "",
                "operationId": "consolidateMissingUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Missing User DN",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConsolidationObject"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Job created successfully. Response contains job details.",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/consolidation": {
            "post": {
                "tags": [
                    "consolidation"
                ],
                "summary": "Initiate a consolidation",
                "description": "Starts a consolidation operation.<br> The object to consolidate must be specified as a DN. It can be a resource DN in order to consolidate all members with the resource.<br>Cleanup of users and groups in resource is only supported when the object to consolidate is a resource DN.",
                "operationId": "sendConsolidationCommand_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Consolidation details",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConsolidationCommandParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Job created successfully. Response contains job details.",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/currentuser/session": {
            "get": {
                "tags": [
                    "currentuser"
                ],
                "summary": "Get info on current session",
                "description": "",
                "operationId": "getSession_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SessionInfo"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "currentuser"
                ],
                "summary": "Renew session access time (extend idle expiry)",
                "description": "",
                "operationId": "putSession_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/currentuser/adminrights": {
            "put": {
                "tags": [
                    "currentuser"
                ],
                "summary": "Verify if current user can administer specified object",
                "description": "Provide a DN or partition name",
                "operationId": "canUserAdminObject_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/StringObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/BooleanResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/currentuser/sessions": {
            "get": {
                "tags": [
                    "currentuser"
                ],
                "summary": "Get info on all sessions for the current user",
                "description": "",
                "operationId": "getSessions_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SessionInfoList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "currentuser"
                ],
                "summary": "Delete all sessions",
                "description": "",
                "operationId": "deleteSession",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/currentuser/sessions/{session_id}": {
            "delete": {
                "tags": [
                    "currentuser"
                ],
                "summary": "Delete a session",
                "description": "",
                "operationId": "deleteSession_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "session_id",
                        "in": "path",
                        "description": "Session ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/currentuser": {
            "get": {
                "tags": [
                    "currentuser"
                ],
                "summary": "Retrieve current user's information",
                "description": "Get information about currently logged in user",
                "operationId": "currentUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/CurrentUserResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/members": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get the members of a group",
                "description": "",
                "operationId": "listGroupMembers",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Add members to a group",
                "description": "",
                "operationId": "addMembersToGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "member_attr",
                        "in": "query",
                        "description": "The attribute by which members are specified",
                        "required": false,
                        "type": "string",
                        "default": "entryDN"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Group members",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Set group members",
                "description": "",
                "operationId": "setGroupMembers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "member_attr",
                        "in": "query",
                        "description": "The attribute by which members are specified",
                        "required": false,
                        "type": "string",
                        "default": "entryDN"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Group members",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/memberof/deletionset": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Remove group from specified groups",
                "description": "Groups have to be specified by their id or location.",
                "operationId": "removeFromGroups_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "MemberOfs",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/twofactorsettings": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get two-factor authentication settings",
                "description": "",
                "operationId": "getTwoFactorSettings_6",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Set two-factor authentication settings",
                "description": "",
                "operationId": "setTwoFactorSettings_6",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/administrators": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get delegated administrators for a group",
                "description": "",
                "operationId": "getDelegatedAdministrators_4",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Add delegated administrators for a group",
                "description": "",
                "operationId": "addDelegatedAdministrators_4",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Set delegated administrators for a group",
                "description": "",
                "operationId": "setDelegatedAdministrators_4",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/groups": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get the groups of a group",
                "description": "",
                "operationId": "listGroupMemberGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/users": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get the users of a group",
                "description": "",
                "operationId": "listGroupMemberUsers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get a group by the specified id",
                "description": "The group ID is either the 'id' or 'location' field of the group structure",
                "operationId": "getGroup",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Update a group",
                "description": "",
                "operationId": "updateGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The group object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Delete a group",
                "description": "",
                "operationId": "deleteGroup",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "groups"
                ],
                "summary": "Patch a group (update only the attributes that are sent)",
                "description": "Using PATCH will only update the user attributes that are sent. Attributes that are not included in the request will be retained.",
                "operationId": "patchGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The group object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/attribute/deletionset": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Delete custom attributes for a group",
                "description": "",
                "operationId": "deleteCustomAttributesForGroup_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Custom attribute list",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomAttributeList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/members/deletionset": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Remove members from a group",
                "description": "",
                "operationId": "removeMembersFromGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "member_attr",
                        "in": "query",
                        "description": "The attribute by which members are specified",
                        "required": false,
                        "type": "string",
                        "default": "entryDN"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Group members",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/attribute": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Set custom attributes for a group",
                "description": "",
                "operationId": "setCustomAttributesForGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Custom attribute list",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomAttributeList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get all groups",
                "description": "Returns all groups that match the given query filter. If both the partition name and location DN are specified, the location is used. If none are specified all groups are returned. The filter has to be in a format \"*string*\" or \"(LDAP_filter)\". The custom attributes, if present, are used to create an additional filter.",
                "operationId": "listAllGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "Location",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListGroupsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Multiple members match the specified name",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Create a group",
                "description": "",
                "operationId": "createGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The group object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/subgroup": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Create a sub-group in a group",
                "description": "Creates a group in the same OU as the group specified in the location field. Specify the parent group ID in the location field. The group will automatically be made a member of the parent group.",
                "operationId": "createSubGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The group object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/memberof": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "List all the groups the specific group is a member of",
                "description": "Returns a list of group objects the specific group is a member of that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only the groups that the group is member of are returned. If the recursive parameter is true the nested groups that the group is member of are also returned.",
                "operationId": "listGroupsForGroup",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListGroupsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Add group to specified groups",
                "description": "Groups have to be specified by their id or location.",
                "operationId": "addGroupToGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "MemberOfs",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/roles": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "List all roles assigned to the group",
                "description": "Returns a list of role objects assigned to the group that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only directly assigned roles are returned. If the recursive parameter is true the nested assigned roles are returned.",
                "operationId": "listRolesForGroup",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListRolesResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Assign specified roles to group",
                "description": "Roles have to be specified by their id or location.",
                "operationId": "addGroupToRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Roles",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/administratorof": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get objects to which this group has direct delegated administration rights",
                "description": "",
                "operationId": "getAdminOf_3",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/roles/deletionset": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Unassign specified roles from group",
                "description": "Roles have to be specified by their id or location.",
                "operationId": "removeFromRoles_3",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Roles",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/groups/{group_id}/administrators/deletionset": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Remove delegated administrators for a group",
                "description": "",
                "operationId": "removeDelegatedAdministrators_4",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/jobs": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Get all jobs",
                "description": "",
                "operationId": "getAllJobs_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter by job name",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListJobsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "jobs"
                ],
                "summary": "Clear all completed jobs",
                "description": "",
                "operationId": "clearCompleted_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/jobs/{job_id}/cancel": {
            "post": {
                "tags": [
                    "jobs"
                ],
                "summary": "Cancel a job by ID",
                "description": "",
                "operationId": "cancelJob_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "job_id",
                        "in": "path",
                        "description": "Job Id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/jobs/{job_id}": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Get a job by ID",
                "description": "",
                "operationId": "getJob_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "job_id",
                        "in": "path",
                        "description": "Job Id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "jobs"
                ],
                "summary": "Clear a completed job by ID",
                "description": "",
                "operationId": "clearJob_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "job_id",
                        "in": "path",
                        "description": "Job Id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/oauthclients/{client_id}": {
            "get": {
                "tags": [
                    "oauthclients"
                ],
                "summary": "Get a client by ID",
                "description": "",
                "operationId": "getClient_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "description": "Client ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OAuthClient"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "oauthclients"
                ],
                "summary": "Update a client",
                "description": "To reset the secret of a confidential client, send the desired secret or an empty secret to have the server generate a new one.",
                "operationId": "updateClient_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "description": "Client ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The client object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OAuthClient"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OAuthClient"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "oauthclients"
                ],
                "summary": "Delete a client",
                "description": "",
                "operationId": "deleteClient_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "description": "Client ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "oauthclients"
                ],
                "summary": "Patch a client (update only the fields that are sent)",
                "description": "Using PATCH will only update the fields that are sent. Fields that are not included in the request will be retained.",
                "operationId": "patchClient_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "description": "Client ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The client object to patch",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OAuthClient"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OAuthClient"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/oauthclients/{client_id}/impersonation": {
            "get": {
                "tags": [
                    "oauthclients"
                ],
                "summary": "Get an OAuth client's impersonation settings",
                "description": "",
                "operationId": "getImpersonation_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "description": "Client ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ImpersonationSettings"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "oauthclients"
                ],
                "summary": "Set an OAuth client's impersonation settings",
                "description": "",
                "operationId": "setImpersonation_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "description": "Client ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The impersonation settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ImpersonationSettings"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/oauthclients": {
            "get": {
                "tags": [
                    "oauthclients"
                ],
                "summary": "Get all clients",
                "description": "",
                "operationId": "listClients_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListOAuthClientsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "oauthclients"
                ],
                "summary": "Create a client",
                "description": "Set confidential:true to create a confidential client. A server-genereated secret will be returned if one is not provided.",
                "operationId": "createClient_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The client to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OAuthClient"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OAuthClient"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits/{org_unit_id}/twofactorsettings": {
            "get": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Get two-factor authentication settings",
                "description": "",
                "operationId": "getTwoFactorSettings",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Set two-factor authentication settings",
                "description": "",
                "operationId": "setTwoFactorSettings",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits/{org_unit_id}/administrators": {
            "get": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Get delegated administrators for an org unit",
                "description": "",
                "operationId": "getDelegatedAdministrators",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Add delegated administrators for an org unit",
                "description": "",
                "operationId": "addDelegatedAdministrators",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Set delegated administrators for an org unit",
                "description": "",
                "operationId": "setDelegatedAdministrators",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits/{org_unit_id}/children": {
            "get": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Get an org unit's child org units",
                "description": "",
                "operationId": "listOrgUnitChildren_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListOrganizationalUnitsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits/{org_unit_id}": {
            "get": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Get an org unit by ID",
                "description": "",
                "operationId": "getOrgUnit_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OrganizationalUnit"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Update an org unit",
                "description": "",
                "operationId": "updateOrgUnit_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The org unit to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrganizationalUnit"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Delete an org unit",
                "description": "",
                "operationId": "deleteOrgUnit_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits/{org_unit_id}/groups": {
            "get": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Get an org unit's groups",
                "description": "",
                "operationId": "listOrgUnitGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_subtree",
                        "in": "query",
                        "description": "Include subtrees (recursive)",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListGroupsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits/{org_unit_id}/users": {
            "get": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Get an org unit's users",
                "description": "",
                "operationId": "listOrgUnitUsers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_subtree",
                        "in": "query",
                        "description": "Include subtrees (recursive)",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListUsersResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits/{org_unit_id}/parents": {
            "get": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Get an org unit's parents",
                "description": "",
                "operationId": "listOrgUnitParents_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListOrganizationalUnitsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits/{org_unit_id}/roles": {
            "get": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Get an org unit's roles",
                "description": "",
                "operationId": "listOrgUnitRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_subtree",
                        "in": "query",
                        "description": "Include subtrees (recursive)",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListGroupsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits": {
            "get": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Get the root org unit",
                "description": "",
                "operationId": "getRootOU_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListOrganizationalUnitsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Create an org unit",
                "description": "",
                "operationId": "createOrgUnit_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The org unit to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrganizationalUnit"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/orgunits/{org_unit_id}/administrators/deletionset": {
            "post": {
                "tags": [
                    "orgunits"
                ],
                "summary": "Remove delegated administrators for an org unit",
                "description": "",
                "operationId": "removeDelegatedAdministrators",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "org_unit_id",
                        "in": "path",
                        "description": "OrgUnit ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/state": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get partition state",
                "description": "",
                "operationId": "getState_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/PartitionState"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "partitions"
                ],
                "summary": "Set partition state",
                "description": "",
                "operationId": "setState_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Partition state",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartitionState"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/system_attributes": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get partition-level system attributes",
                "description": "Partition-level system attributes can be used to set system attributes that are scoped only to the partition. Currently this functionality is reserved for internal use.",
                "operationId": "getSystemAttributes_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SystemAttributeList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "partitions"
                ],
                "summary": "Create partition-level system attribute",
                "description": "Partition-level system attributes can be used to set system attributes that are scoped only to the partition. Currently this functionality is reserved for internal use.",
                "operationId": "setAttribute",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Attribute",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SystemAttribute"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/twofactorsettings": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get two-factor authentication settings",
                "description": "",
                "operationId": "getTwoFactorSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "partitions"
                ],
                "summary": "Set two-factor authentication settings",
                "description": "",
                "operationId": "setTwoFactorSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    },
                    {
                        "name": "reset_member_settings",
                        "in": "query",
                        "description": "Reset (set to inherit) two-factor setting on all partition members. Performed as a background operation.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/administrators": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get delegated administrators for a partition",
                "description": "",
                "operationId": "getDelegatedAdministrators_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "partitions"
                ],
                "summary": "Add delegated administrators for a partition",
                "description": "",
                "operationId": "addDelegatedAdministrators_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "partitions"
                ],
                "summary": "Set delegated administrators for a partition",
                "description": "",
                "operationId": "setDelegatedAdministrators_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/oauthsettings": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get the OAuth settings",
                "description": "",
                "operationId": "getOAuthSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OAuthSettings"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "partitions"
                ],
                "summary": "Set the OAuth settings",
                "description": "",
                "operationId": "setOAuthSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OAuthSettings"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get a user partition by name",
                "description": "",
                "operationId": "getPartition_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/UserPartition"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "partitions"
                ],
                "summary": "Update a user partition",
                "description": "",
                "operationId": "updatePartition",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User partition object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPartition"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "partitions"
                ],
                "summary": "Delete a user partition",
                "description": "",
                "operationId": "deletePartition",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/contents": {
            "delete": {
                "tags": [
                    "partitions"
                ],
                "summary": "Delete the contents of a partition",
                "description": "Remove all users and groups from the partition without synchronizing the deletions to resources. Compare to deleting a partition, which is handled as a background job that individually deletes all members, synchronizing the deletions to resources (if enabled).",
                "operationId": "cleanupPartition_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/restrictions": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get partition restrictions",
                "description": "",
                "operationId": "getPartitionRestrictions_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/PartitionRestrictions"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "partitions"
                ],
                "summary": "Set partition restrictions",
                "description": "",
                "operationId": "setPartitionRestrictions_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartitionRestrictions"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get all user partitions",
                "description": "",
                "operationId": "listPartitions_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListUserPartitionsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "partitions"
                ],
                "summary": "Create a user partition",
                "description": "",
                "operationId": "createPartition_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User partition object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPartition"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/passwordpolicy": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get the password policy for a user partition",
                "description": "",
                "operationId": "getPasswordPolicy_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "return_global",
                        "in": "query",
                        "description": "Return the global password policy if partition policy does not exist",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OtdsPasswordPolicy"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "partitions"
                ],
                "summary": "Set the password policy for a user partition",
                "description": "",
                "operationId": "setPasswordPolicy_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Password policy to be set",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OtdsPasswordPolicy"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "partitions"
                ],
                "summary": "Delete the password policy for a user partition (and use the global one)",
                "description": "",
                "operationId": "deletePasswordPolicy_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/system_attributes/{attribute}": {
            "get": {
                "tags": [
                    "partitions"
                ],
                "summary": "Get partition-level system attribute",
                "description": "Returns a specific system attribute",
                "operationId": "getAttribute_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "attribute",
                        "in": "path",
                        "description": "Attribute Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SystemAttribute"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "partitions"
                ],
                "summary": "Update partition-level system attribute",
                "description": "",
                "operationId": "setAttribute_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "attribute",
                        "in": "path",
                        "description": "Attribute Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Attribute",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SystemAttribute"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "partitions"
                ],
                "summary": "Delete partition-level system attribute",
                "description": "",
                "operationId": "deleteAttribute_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "attribute",
                        "in": "path",
                        "description": "Attribute Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/administrators/deletionset": {
            "post": {
                "tags": [
                    "partitions"
                ],
                "summary": "Remove delegated administrators for a partition",
                "description": "",
                "operationId": "removeDelegatedAdministrators_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/partitions/{partition_name}/verification/password": {
            "put": {
                "tags": [
                    "partitions"
                ],
                "summary": "Check password validity",
                "description": "Checks if a password meets the criteria required by the user partition password policy",
                "operationId": "checkPasswordValidity_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "partition_name",
                        "in": "path",
                        "description": "Partition name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Password",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/reports/events": {
            "get": {
                "tags": [
                    "reports"
                ],
                "summary": "Get all audit events",
                "description": "Returns all audit events that match the given parameters. The filter has to be in a format \"*string*\" or \"(LDAP_filter)\". Other \"where_*\" parameters, if present, are used to create an additional filter. After, before time, if present, has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "getAllAuditEvents_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_start_date",
                        "in": "query",
                        "description": "Start Date of Request",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_end_date",
                        "in": "query",
                        "description": "End Date of Request",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Audit data filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_event_type",
                        "in": "query",
                        "description": "Event Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_event_result",
                        "in": "query",
                        "description": "Event Result",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_audit_object",
                        "in": "query",
                        "description": "Audit Object ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_audit_user",
                        "in": "query",
                        "description": "Audit User",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_audit_source",
                        "in": "query",
                        "description": "Audit Source",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAuditEventsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/reports/events/sources": {
            "get": {
                "tags": [
                    "reports"
                ],
                "summary": "Get audit events sources",
                "description": "",
                "operationId": "getAuditEventsSources_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BasicEnumList"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/reports/events/results": {
            "get": {
                "tags": [
                    "reports"
                ],
                "summary": "Get audit events possible results",
                "description": "",
                "operationId": "getAuditEventsResults_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BasicEnumList"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/reports/events/types": {
            "get": {
                "tags": [
                    "reports"
                ],
                "summary": "Get audit events types",
                "description": "",
                "operationId": "getAuditEventsTypes_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BasicEnumList"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/reports/status/masterhost": {
            "get": {
                "tags": [
                    "reports"
                ],
                "summary": "Get master host status",
                "description": "",
                "operationId": "getMasterHostStatus_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/reports/events/{event_id}": {
            "get": {
                "tags": [
                    "reports"
                ],
                "summary": "Get an audit event by the specified id",
                "description": "",
                "operationId": "getAuditEvent_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "event_id",
                        "in": "path",
                        "description": "Event ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AuditEvent"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/reports/status/jvm": {
            "get": {
                "tags": [
                    "reports"
                ],
                "summary": "Get JVM status",
                "description": "",
                "operationId": "getJVMStatus_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/reports/events/objects/{event_id}": {
            "get": {
                "tags": [
                    "reports"
                ],
                "summary": "Get an audit object type by the specified event id",
                "description": "",
                "operationId": "getAuditObjectType_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "event_id",
                        "in": "path",
                        "description": "Event ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/reports/events/statistic": {
            "get": {
                "tags": [
                    "reports"
                ],
                "summary": "Get audit event statistic",
                "description": "Returns audit event statistic that match the given parameters. After, before time, if present, has to be in UTC time zone in the format YYYYMMDDHHMMSS.SSSZ (milliseconds part .SSS is optional).",
                "operationId": "getEventStatistic_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_start_date",
                        "in": "query",
                        "description": "Start Date of Request",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_end_date",
                        "in": "query",
                        "description": "End Date of Request",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_event_type",
                        "in": "query",
                        "description": "Event Type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_event_result",
                        "in": "query",
                        "description": "Event Result",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/userinresource": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get a user in a resource using the OTDS user ID",
                "description": "",
                "operationId": "getUserInResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/groupinresource": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get a group in a resource using the OTDS group ID",
                "description": "",
                "operationId": "getGroupInResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/status": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get resource status",
                "description": "",
                "operationId": "getResourceStatus_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ResourceStatus"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "resources"
                ],
                "summary": "Set resource status",
                "description": "",
                "operationId": "setResourceStatus_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Status",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceStatus"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/accessroles": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get the access roles the resource is part of",
                "description": "",
                "operationId": "getGroupOfAccessRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AccessRolesList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "resources"
                ],
                "summary": "Set the access roles the resource is part of",
                "description": "",
                "operationId": "setGroupOfAccessRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The access roles",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessRolesList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/userfromresourceusername": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get a user in a resource using the username in that resource",
                "description": "",
                "operationId": "getUserFromResourceUserName_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_id}/activate": {
            "post": {
                "tags": [
                    "resources"
                ],
                "summary": "Activate a resource",
                "description": "",
                "operationId": "activateResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_id",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ResourceResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_id}/deactivate": {
            "post": {
                "tags": [
                    "resources"
                ],
                "summary": "Deactivate a resource",
                "description": "",
                "operationId": "deactivateResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_id",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Authentication parameters",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceAuthParams"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_id}/bind": {
            "post": {
                "tags": [
                    "resources"
                ],
                "summary": "Bind a resource",
                "description": "This operation is used for internal purposes to upgrade an older resource",
                "operationId": "bindResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_id",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Authentication parameterss",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceAuthParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ResourceSessionResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get all resources",
                "description": "",
                "operationId": "getResources_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListResourcesResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "resources"
                ],
                "summary": "Create a resource",
                "description": "",
                "operationId": "createResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The resource configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceConfigParam"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get a resource",
                "description": "",
                "operationId": "getResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ResourceConfigParam"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "resources"
                ],
                "summary": "Update a resource",
                "description": "",
                "operationId": "updateResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The resource configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceConfigParam"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "resources"
                ],
                "summary": "Delete a resource",
                "description": "",
                "operationId": "deleteResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/groupsinresource": {
            "put": {
                "tags": [
                    "resources"
                ],
                "summary": "Translate the names of groups from their OTDS group ID to their names in a resource",
                "description": "Returns null for any members that are either not found in OTDS or do not have access to the resource",
                "operationId": "getGroupsInResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of group IDs",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/MemberIdentityList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/usersfromresourceusernames": {
            "put": {
                "tags": [
                    "resources"
                ],
                "summary": "Translate the names of users from their names in a resource to their OTDS IDs",
                "description": "",
                "operationId": "getUsersFromResourceUserNames_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user names",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/MemberIdentityList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/groupsfromresourcegroupnames": {
            "put": {
                "tags": [
                    "resources"
                ],
                "summary": "Translate the names of groups from their names in a resource to their OTDS IDs",
                "description": "",
                "operationId": "getGroupsFromResourceGroupNames_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of group names",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/MemberIdentityList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/usersinresource": {
            "put": {
                "tags": [
                    "resources"
                ],
                "summary": "Translate the names of users from their OTDS user ID to their names in a resource",
                "description": "Returns null for any members that are either not found in OTDS or do not have access to the resource",
                "operationId": "getUsersInResource_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user IDs",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/MemberIdentityList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/impersonation": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get a resource's impersonation settings",
                "description": "",
                "operationId": "getImpersonation",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ImpersonationSettings"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "resources"
                ],
                "summary": "Set a resource's impersonation settings",
                "description": "",
                "operationId": "setImpersonation",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The impersonation settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ImpersonationSettings"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/notifications/sendtime": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get last send time of resource notifications",
                "description": "",
                "operationId": "getResourceNotificationsSendTime_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringObject"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/notifications": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get resource notifications configuration",
                "description": "",
                "operationId": "getResourceNotifications_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SPSResourceNotificationsConfig"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "resources"
                ],
                "summary": "Set resource notifications configuration",
                "description": "",
                "operationId": "setResourceNotifications_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Status",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SPSResourceNotificationsConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SPSResourceNotificationsConfig"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/resources/{resource_name}/groupfromresourcegroupname": {
            "get": {
                "tags": [
                    "resources"
                ],
                "summary": "Get a group in a resource using the group name in that resource",
                "description": "",
                "operationId": "getGroupFromResourceGroupName_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resource_name",
                        "in": "path",
                        "description": "Resource Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/twofactorsettings": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get two-factor authentication settings",
                "description": "",
                "operationId": "getTwoFactorSettings_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "roles"
                ],
                "summary": "Set two-factor authentication settings",
                "description": "",
                "operationId": "setTwoFactorSettings_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/administrators": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get delegated administrators for a role",
                "description": "",
                "operationId": "getDelegatedAdministrators_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Add delegated administrators for a role",
                "description": "",
                "operationId": "addDelegatedAdministrators_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "roles"
                ],
                "summary": "Set delegated administrators for a role",
                "description": "",
                "operationId": "setDelegatedAdministrators_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/attribute/deletionset": {
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Delete custom attributes for a role",
                "description": "",
                "operationId": "deleteCustomAttributesForGroup",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Custom attribute list",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomAttributeList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get all roles",
                "description": "Returns all roles that match the given query filter. If both the partition name and location DN are specified, the location is used. If partition name and location are not specified roles from all partitions are returned. The filter has to be in a format \"*string*\" or \"(LDAP_filter)\". The custom attributes, if present, are used to create an additional filter.",
                "operationId": "listAllRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "Location",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListRolesResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Create a role",
                "description": "",
                "operationId": "createRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The role object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get a role by the specified id",
                "description": "The role ID is either the 'id' or 'location' field of the role structure.",
                "operationId": "getRole",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "roles"
                ],
                "summary": "Update a role",
                "description": "",
                "operationId": "updateRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The role object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Delete a role",
                "description": "The role ID is either the 'id' or 'location' field of the role structure.",
                "operationId": "deleteRole",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "roles"
                ],
                "summary": "Patch a role (update only the attributes that are sent)",
                "description": "Using PATCH will only update the role attributes that are sent. Attributes that are not included in the request will be retained.",
                "operationId": "patchRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The role object to patch",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/administratorof": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get objects to which this role has direct delegated administration rights",
                "description": "",
                "operationId": "getAdminOf",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/roles/deletionset": {
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Unassign specified roles from role",
                "description": "The roles have to be specified by their DN.",
                "operationId": "removeFromRoles",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "MemberOfs",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/members": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get the members this role is assigned to",
                "description": "",
                "operationId": "listRoleMembers",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Assign this role to specified members",
                "description": "Specify members with their DN.",
                "operationId": "addMembersToRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "member_attr",
                        "in": "query",
                        "description": "The attribute by which members are specified",
                        "required": false,
                        "type": "string",
                        "default": "entryDN"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Role members",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "roles"
                ],
                "summary": "Set the members this role is assigned to",
                "description": "Specify members with their DN.",
                "operationId": "setRoleMembers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "member_attr",
                        "in": "query",
                        "description": "The attribute by which members are specified",
                        "required": false,
                        "type": "string",
                        "default": "entryDN"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Role members",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "List all roles assigned to the role",
                "description": "Returns a list of role objects the role is a member of that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only the roles that the role is member of are returned. If the recursive parameter is true the nested roles that the role is member of are also returned.",
                "operationId": "listRolesForRole",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListRolesResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Assign specified roles to role",
                "description": "Roles have to be specified by their DN.",
                "operationId": "addToRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Roles",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/groups": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get the groups this role is assigned to",
                "description": "",
                "operationId": "listRoleMemberGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/members/deletionset": {
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Unassign this role from specified members",
                "description": "Specify members with their DN.",
                "operationId": "removeMembersFromRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "member_attr",
                        "in": "query",
                        "description": "The attribute by which members are specified",
                        "required": false,
                        "type": "string",
                        "default": "entryDN"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Role members",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/administrators/deletionset": {
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Remove delegated administrators for a role",
                "description": "",
                "operationId": "removeDelegatedAdministrators_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Administrators",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/users": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get the users this role is assigned to",
                "description": "",
                "operationId": "listRoleMemberUsers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recurse",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/roles/{role_id}/attribute": {
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Set custom attributes for a role",
                "description": "",
                "operationId": "setCustomAttributesForRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Custom attribute list",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomAttributeList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/cryptreset": {
            "post": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Start a job to re-encrypt all encrypted data within the OTDS backend using a new secret key",
                "description": "",
                "operationId": "upgrade_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdateParams"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/system_attributes": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get system attributes",
                "description": "Returns the list of system attributes",
                "operationId": "getSystemAttributes",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SystemAttributeList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Create system attribute",
                "description": "",
                "operationId": "setSystemAttribute",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "System Attribute",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SystemAttribute"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/twofactorsettings": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get global two-factor authentication settings",
                "description": "",
                "operationId": "getTwoFactorSettings_3",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Set global two-factor authentication settings",
                "description": "",
                "operationId": "setTwoFactorSettings_3",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/command": {
            "post": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Issue command to the server",
                "description": "Supported commands: <br>restart: Restart Enterprise Sync component",
                "operationId": "restart_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Command",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CommandParams"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/recyclebin": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get global recycle bin configuration",
                "description": "",
                "operationId": "getRecycleBinConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RecycleBinConfig"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Set global recycle bin configuration",
                "description": "",
                "operationId": "setRecycleBinConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Global recycle bin configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RecycleBinConfig"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/hello": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Hello method to check if server is alive",
                "description": "",
                "operationId": "hello_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/smtp_config": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get SMTP configuration",
                "description": "",
                "operationId": "getSMTPConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SMTPConfig"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Set SMTP configuration",
                "description": "",
                "operationId": "setSMTPConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "SMTP configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SMTPConfig"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/system_attributes/{system_attribute}": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get system attribute",
                "description": "Returns a specific system attribute",
                "operationId": "getSystemAttribute_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "system_attribute",
                        "in": "path",
                        "description": "System Attribute Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SystemAttribute"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Update system attribute",
                "description": "",
                "operationId": "setSystemAttribute_2",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "system_attribute",
                        "in": "path",
                        "description": "System Attribute Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "System Attribute",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SystemAttribute"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Delete system attribute",
                "description": "",
                "operationId": "deleteSystemAttribute_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "system_attribute",
                        "in": "path",
                        "description": "System Attribute Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/smtp_config/verification": {
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Verify SMTP Network Connection and Authentication",
                "description": "",
                "operationId": "checkNetworkParameter",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "SMTP configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SMTPConfig"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/passwordpolicy": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get the global password policy",
                "description": "",
                "operationId": "getPasswordPolicy",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/OtdsPasswordPolicy"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Set the global password policy",
                "description": "",
                "operationId": "setPasswordPolicy",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Password policy to be set",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OtdsPasswordPolicy"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/notifications": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get global notifications configuration",
                "description": "",
                "operationId": "getGlobalNotificationsConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/NotificationsConfig"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Set global notifications configuration",
                "description": "",
                "operationId": "setGlobalNotificationsConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Global notifications configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationsConfig"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/edirsync_connection_params": {
            "post": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Generate Connection Parameters for eDirSync",
                "description": "Create a connection parameters for eDirSync based on the specified attributes.<br><br>otdsURL - URL for ES REST API (eg. http://machine_name:8080/otdsws/es/).<br>otdsPartitionID - ID of OTDS partition created for eDirSync access.<br>otdsUsername - OTDS partition administrator. (eg. edirsyncAdmin@otds.admin)<br>otdsPassword - OTDS partition administrator password.<br>paramsID - Ignorred.<br><br>Returns - connection parameters for eDirSync.<br>Password is returned in encrypted form, if provided as parameter.<br>",
                "operationId": "getOTDSConnectionConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Connection Parameters",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConnectionParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ConnectionParams"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/thirdpartytwofactorcheck": {
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Validate two factory authentication settings for third party provider",
                "description": "",
                "operationId": "checkTwoFactorSettings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SystemAttributeList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/report": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get system configuration report",
                "description": "Returns a system configuration report",
                "operationId": "getSystemConfigurationReport_1",
                "produces": [
                    "text/plain"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/audit": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get global audit configuration",
                "description": "",
                "operationId": "getGlobalAuditConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuditConfig"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Set global audit configuration",
                "description": "",
                "operationId": "setGlobalAuditConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Global audit configuration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuditConfig"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/warnings": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get system configuration warnings",
                "description": "Returns system configuration warnings",
                "operationId": "getSystemConfigurationWarnings_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ProblemsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/restartstatus": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Check current status on ES restart",
                "description": "Returns the current status on Enterprise Sync component (started or restarting)",
                "operationId": "restartStatus",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/logs/{file_name}": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get a context to read log file contents",
                "description": "",
                "operationId": "getLogContext_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "file_name",
                        "in": "path",
                        "description": "Log File Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ContextResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/logs/{file_name}/content": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Read log file contents",
                "description": "",
                "operationId": "getLogContent_1",
                "produces": [
                    "text/html"
                ],
                "parameters": [
                    {
                        "name": "file_name",
                        "in": "path",
                        "description": "Log File Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "Context",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/compresslogs": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Compress all log files in a zip package",
                "description": "Only creates the zip file on the server",
                "operationId": "compressLogs_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/downloadlogs": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Download previously created zip of all logs",
                "description": "Only downloads existing zip file",
                "operationId": "downloadLogs_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/alllogs": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Compress and download all log files in a zip file",
                "description": "Equivalent of compress, then download, in a single call",
                "operationId": "getAllLogs_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/whitelist": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get the HTTP whitelist",
                "description": "",
                "operationId": "getHTTPWhiteList_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Set the HTTP whitelist",
                "description": "",
                "operationId": "setHTTPWhiteList_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/key_rotation": {
            "post": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Rotate the OTDS system key",
                "description": "Use this API to force OTDS to generate a new private key (used to sign JWTs). Normally, OTDS will generate a new key automatically before the certificate associated with the current signing key expires.",
                "operationId": "rotatecert_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "immediate",
                        "in": "query",
                        "description": "Begin using the new key immediately. This can cause problems for clients that cache public keys from OTDS. It should only be used in an emergency situation if the signing key was compromised, or for testing purposes.",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "503": {
                        "description": "This API can only be invoked up to 10 months before the current certificate expires in order to prevent certificate buildup.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/systemconfig/version": {
            "get": {
                "tags": [
                    "systemconfig"
                ],
                "summary": "Get OTDS version information",
                "description": "",
                "operationId": "getVersion_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/VersionInfo"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/memberof/deletionset": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Remove user from specified groups",
                "description": "Groups have to be specified by their id or location.",
                "operationId": "removeFromGroups",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "MemberOfs",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/twofactorsettings": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get two-factor authentication settings",
                "description": "",
                "operationId": "getTwoFactorSettings_4",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Set two-factor authentication settings",
                "description": "",
                "operationId": "setTwoFactorSettings_4",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TwoFactorSettings"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/twofactorsecret": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Reset two-factor secret for the user",
                "description": "",
                "operationId": "resetTwoFactorSecret_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/attribute": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Set custom attributes for a user",
                "description": "",
                "operationId": "setCustomAttributesForUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Custom attribute list",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomAttributeList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/attribute/deletionset": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Delete custom attributes for a user",
                "description": "",
                "operationId": "deleteCustomAttributesForUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Custom attribute list",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomAttributeList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get a user by id",
                "description": "The user ID is either the 'id' or 'location' field of the user structure",
                "operationId": "getUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Multiple members match the specified name",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "description": "",
                "operationId": "updateUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "description": "",
                "operationId": "deleteUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "users"
                ],
                "summary": "Patch a user (update only the attributes that are sent)",
                "description": "Using PATCH will only update the user attributes that are sent. Attributes that are not included in the request will be retained.",
                "operationId": "patchUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user object to patch",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/ismemberof/{group_id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Determines if a user is a member of the specified group, handling nested group membership",
                "description": "",
                "operationId": "isUserMemberOfGroup_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "Group ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IntegerResponse"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/password": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Change the password of a user",
                "description": "Changes a user's password, verifying the original password before doing so.",
                "operationId": "changePassword_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Password information",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordChangeParams"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Reset the password of a user",
                "description": "Resets a user's password without requiring the original password. The caller must be an OTDS administrator.",
                "operationId": "resetPasswordByAdministrator_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "New password",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordResetParams"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/isroleassigned/{role_id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Determines if the specified role is assigned to the user, handling nested roles",
                "description": "",
                "operationId": "isUserMemberOfRole_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BooleanResponse"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "description": "Returns all users that match the given parameters. If both the partition name and location DN are specified, the location is used. If none are specified all users are returned. The filter has to be in a format \"*string*\" or \"(LDAP_filter)\". The custom attributes, if present, are used to create an additional filter.",
                "operationId": "listAllUsers_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "The DN of the Organizational Unit",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListUsersResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create a user",
                "description": "",
                "operationId": "createUser_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/twofactorstate": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get two-factor state",
                "description": "",
                "operationId": "getTwoFactorState_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TwoFactorState"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Set two-factor state (suspend two-factor auth)",
                "description": "",
                "operationId": "setTwoFactorState_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "State",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TwoFactorState"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/memberof": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "List all the groups the user is a member of",
                "description": "Returns a list of group objects the user is a member of that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only the groups that the user is member of are returned. If the recursive parameter is true the nested groups that the user is member of are also returned.",
                "operationId": "listGroupsForUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recursive",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListGroupsResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Add user to the specified groups",
                "description": "Groups have to be specified by their id or location.",
                "operationId": "addUserToGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The id of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "memberOfs",
                        "description": "A list of all the groups that the user has to be added to",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/roles": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "List all roles assigned to the user",
                "description": "Returns a list of role objects assigned to the user that match the given query filter. The filter has to be in a format \"*string*\". If the recursive parameter is false only directly assigned roles are returned. If the recursive parameter is true the nested assigned roles are returned.",
                "operationId": "listRolesForUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recurse",
                        "in": "query",
                        "description": "Recursive",
                        "required": false,
                        "type": "string",
                        "default": "false"
                    },
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "Partition Filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ListRolesResult"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Assign specified roles to user",
                "description": "Roles have to be specified by their id or location.",
                "operationId": "addUserToRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The id of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "roles",
                        "description": "A list of all the roles that has to be assigned to the user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/sessions": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get info on all sessions for the user",
                "description": "",
                "operationId": "getUserSessions_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete all of a user's sessions",
                "description": "",
                "operationId": "deleteAllUserSessions_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/pwresettoken": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get a token that can be used in a password reset email to the specified user account",
                "description": "",
                "operationId": "getPwresetToken_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/administratorof": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get objects to which this user has direct delegated administration rights",
                "description": "",
                "operationId": "getAdminOf_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/sessions/{session_id}": {
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete a user's session",
                "description": "",
                "operationId": "deleteUserSession_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "description": "Session ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/files": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Update a user's binary data (e.g. photo/audio/certificate)",
                "description": "Requires a multipart/form-data message. If you explicitly specify an attribute without chosen file, the existing value will be removed.",
                "operationId": "updateUserFiles_1",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "text/html"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "access_token",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name1",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file1",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "name2",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file2",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "name3",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file3",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "name4",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file4",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "name5",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file5",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/roles/deletionset": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Unassign specified roles from user",
                "description": "Roles have to be specified by their id or location.",
                "operationId": "removeFromRoles_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Roles",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StringList"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/users/{user_id}/oauthtokens": {
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Revoke all OAuth tokens issued to the user",
                "description": "",
                "operationId": "revokeOAuthRefreshTokens",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/usersgroups": {
            "get": {
                "tags": [
                    "usersgroups"
                ],
                "summary": "Get all users and groups",
                "description": "Returns all users and groups that match the given query filter",
                "operationId": "listAllUsersGroups_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_partition_name",
                        "in": "query",
                        "description": "User Partition Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_location",
                        "in": "query",
                        "description": "Location",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Name Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_ca_type",
                        "in": "query",
                        "description": "Custom Attribute Type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_name",
                        "in": "query",
                        "description": "Custom Attribute Name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_ca_value",
                        "in": "query",
                        "description": "Custom Attribute Value",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ListAllObjectsResult"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/usage/{licenseID}": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Query a specified license",
                "description": "",
                "operationId": "queryUsage_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "utilizedOnly",
                        "in": "query",
                        "description": "Query only utilized licenses",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "204": {
                        "description": "Request succeeded",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Failure",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failure"
                    },
                    "412": {
                        "description": "Failure",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Add usage to a specified license",
                "description": "",
                "operationId": "addUsage_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The usage object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request succeeded with details returned",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "204": {
                        "description": "Request succeeded",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "409": {
                        "description": "Over usage limit",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request fields, User disallowed access to license, UserType not allowed by counter, or Missing required fields",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failure"
                    },
                    "412": {
                        "description": "Expired, Illegal fields supplied, or User not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/{licenseID}": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get a license by ID",
                "description": "",
                "operationId": "getLicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Update a licence",
                "description": "",
                "operationId": "updateLicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The license object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseBasicObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Delete a license",
                "description": "",
                "operationId": "deleteLicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/counters/{licenseID}": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get license counters by license ID",
                "description": "",
                "operationId": "getLicenseCounters_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CounterResponse"
                        }
                    },
                    "400": {
                        "description": "Failure",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failure"
                    },
                    "412": {
                        "description": "Failure",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get all Licenses",
                "description": "",
                "operationId": "getAllLicenses_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "where_start_date",
                        "in": "query",
                        "description": "Start Date (yyyyMMdd)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_end_date",
                        "in": "query",
                        "description": "End Date (yyyyMMdd)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Create a License",
                "description": "",
                "operationId": "createLicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The license object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseBasicObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/lease/{licenseID}": {
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Request a new/renewal license key lease",
                "description": "",
                "operationId": "checkoutLicenseKey_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The usage object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageObjectFloating"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request succeeded with details returned",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "204": {
                        "description": "Request succeeded",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "409": {
                        "description": "Over usage limit",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request fields, User disallowed access to license, UserType not allowed by counter, or Missing required fields",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failure"
                    },
                    "412": {
                        "description": "Expired, Illegal fields supplied, or User not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Return a leased license key",
                "description": "",
                "operationId": "checkinLicenseKey_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The usage object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageObjectFloating"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request succeeded with details returned",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "204": {
                        "description": "Request succeeded",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "409": {
                        "description": "Over usage limit",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request fields, User disallowed access to license, UserType not allowed by counter, or Missing required fields",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failure"
                    },
                    "412": {
                        "description": "Expired, Illegal fields supplied, or User not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/configuration/{licenseID}": {
            "put": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Configure a license's parameters",
                "description": "",
                "operationId": "updateConfig_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The configuration parameters</strong><br/><div style=\"white-space: pre;\">{\"counterName\" : {<br/>    \"paramName\":\"value\",<br/>    \"paramName\":\"value\",<br/>     ...},</br>  \"counterName2\": {<br/> \"clear\":\"true\"<br/>    }<br/>}</div>",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request succeeded",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request fields, User disallowed access to license, UserType not allowed by counter, or Missing required fields",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failure"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/reallocatelicense/{licenseID}": {
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Rellocate a licensee to a certain license",
                "description": "",
                "operationId": "reallocatelicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The license object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseBasicObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/object/isreserved/{licenseID}": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Determines if the license seat is reserved to the object",
                "description": "",
                "operationId": "isReserved_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "counter",
                        "in": "query",
                        "description": "Counter ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "objectID",
                        "in": "query",
                        "description": "Object ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BooleanResponse"
                        }
                    },
                    "400": {
                        "description": "The request contained missing or invalid content",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licensees/{licenseID}": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get all Licensees by the LicenseID",
                "description": "",
                "operationId": "getAllLicensees_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_start_date",
                        "in": "query",
                        "description": "Start Date (yyyyMM or yyyyMMdd)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_end_date",
                        "in": "query",
                        "description": "End Date (yyyyMM or yyyyMMdd)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "where_filter",
                        "in": "query",
                        "description": "Filter",
                        "required": false,
                        "type": "string",
                        "default": "*"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Create a licensee for a license",
                "description": "",
                "operationId": "createLicenseeForLicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Licensee object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseeBasicObject"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/object/{licenseID}/{licenseeID}": {
            "delete": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Delete a licensee",
                "description": "",
                "operationId": "deleteLicensee_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "licenseeID",
                        "in": "path",
                        "description": "Licensee ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/allocatelicense/{licenseID}": {
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Allocate a license to a certain user or group",
                "description": "",
                "operationId": "allocatelicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The license object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseBasicObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/report": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get a license report by IDs",
                "description": "",
                "operationId": "getLicenseReport_1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "license_ids",
                        "in": "query",
                        "description": "License IDs",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "where_start_date",
                        "in": "query",
                        "description": "Start Date (yyyyMM)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_end_date",
                        "in": "query",
                        "description": "End Date (yyyyMM)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "report_type",
                        "in": "query",
                        "description": "Report Type [Compliance|KeySummary|KeyDetails]",
                        "required": false,
                        "type": "string",
                        "default": "COMPLIANCE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseReportResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/object/{licenseID}": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get all objects that allocated to a certain license",
                "description": "",
                "operationId": "getObjectsFromLicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "Page Size",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int32"
                    },
                    {
                        "name": "next_page_cookie",
                        "in": "query",
                        "description": "Next Page Cookie",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Count Limit",
                        "required": false,
                        "type": "integer",
                        "default": 250,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/UserGroupResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Add License to Object",
                "description": "",
                "operationId": "addObjectToLicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "licenseID",
                        "in": "path",
                        "description": "License ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The license object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseBasicObject"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/validlicenses": {
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get a list of all valid licenses",
                "description": "'values' only needed in JSON to filter by Resource ID (oTLicenseResource), Raw Fingerprint (oTLicenseFingerprint), Product (oTLicenseProduct), Version (oTLicenseProductVersion), Model (oTLicenseModel), Extra information (oTLicenseExtraInformation). License keys missing fingerprint field values may be returned if they match the other selection criteria. Specifying a fingerprint and an empty (['anFpStr','']) fingerprint will enable exact match on fingerprints and will exclude keys with no fingerprint.Excluding 'oTLicenseExtraInformation' will append the license certificate to the license file. Sending oTLicenseExtraInformation='' will retrieve non-valid status keys.",
                "operationId": "getLicensesByRequestObject_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The license object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseBasicObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/fingerprint": {
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get fingerprint",
                "description": "",
                "operationId": "getLicenseFingerprint_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Get the hashed fingerprint from the server",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseBasicObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LicenseResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/upload": {
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Echo file upload content so the content can be inserted back into a browser field. 100k max",
                "description": "",
                "operationId": "uploadFile_1",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "file",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/assignedlicenses": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get attributes of all licenses assigned to the resource",
                "description": "resourceID is required with READ_ONLY access.",
                "operationId": "getAssignedLicenses_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceID",
                        "in": "query",
                        "description": "Resource ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "productID",
                        "in": "query",
                        "description": "Product ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "validOnly",
                        "in": "query",
                        "description": "Query valid licenses only",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Failure",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failure"
                    },
                    "412": {
                        "description": "Failure",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/usage": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Query on derived license(s)",
                "description": "",
                "operationId": "queryUsageByFindLicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceID",
                        "in": "query",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fingerprint",
                        "in": "query",
                        "description": "Fingerprint",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "productID",
                        "in": "query",
                        "description": "Product ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "licenseModel",
                        "in": "query",
                        "description": "License Model (USER_BASED, TRANSACTION_BASED, VOLUME_BASED)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "utilizedOnly",
                        "in": "query",
                        "description": "Query only utilized licenses",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Failure",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The requested object or the specified location cannot be found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failure"
                    },
                    "412": {
                        "description": "Failure",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Add usage after finding a matching license based on query parameters",
                "description": "",
                "operationId": "addUsageByFindLicense_1",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "resourceID",
                        "in": "query",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fingerprint",
                        "in": "query",
                        "description": "Fingerprint",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "productID",
                        "in": "query",
                        "description": "Product ID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "licenseModel",
                        "in": "query",
                        "description": "License Model (USER_BASED, TRANSACTION_BASED, VOLUME_BASED)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The usage object to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request succeeded with details returned",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "204": {
                        "description": "Request succeeded",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "409": {
                        "description": "Over usage limit",
                        "schema": {
                            "$ref": "#/definitions/LicenseUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request fields, User disallowed access to license, User not found, UserType not allowed by counter, or Missing required fields",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid authentication header",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access is denied to authenticated user",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No/Multiple matching license found or User not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failure"
                    },
                    "412": {
                        "description": "Expired or Illegal fields supplied",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        },
        "/licensemanagement/licenses/report/download": {
            "get": {
                "tags": [
                    "licensemanagement"
                ],
                "summary": "Get a license report by IDs",
                "description": "",
                "operationId": "getLicenseReportDownload_1",
                "produces": [
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "license_ids",
                        "in": "query",
                        "description": "License IDs",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "where_start_date",
                        "in": "query",
                        "description": "Start Date (yyyyMM)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "where_end_date",
                        "in": "query",
                        "description": "End Date (yyyyMM)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "report_type",
                        "in": "query",
                        "description": "Report Type [Compliance|KeySummary|KeyDetails]",
                        "required": false,
                        "type": "string",
                        "default": "COMPLIANCE"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "oauth": []
                    }
                ]
            }
        }
    },
    "securityDefinitions": {
        "oauth": {
            "type": "oauth2",
            "authorizationUrl": "/otdsws/oauth2/auth",
            "flow": "implicit",
            "scopes": {
                "otds:groups": "Include user's groups in the token",
                "rgpartition:otds.admin": "Limit the included groups to those in the otds.admin partition"
            }
        }
    },
    "definitions": {
        "AttributeMapping": {
            "type": "object",
            "properties": {
                "sourceAttr": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "destAttr": {
                    "type": "string"
                },
                "mappingFormat": {
                    "type": "string"
                }
            }
        },
        "IdentityProviderAuthentication": {
            "type": "object",
            "properties": {
                "authenticationMethod": {
                    "type": "integer",
                    "format": "int32"
                },
                "bindDN": {
                    "type": "string"
                },
                "bindPassword": {
                    "type": "string"
                },
                "qualityOfProtection": {
                    "type": "integer",
                    "format": "int32"
                },
                "kerberosCredentialType": {
                    "type": "integer",
                    "format": "int32"
                },
                "servicePrincipalName": {
                    "type": "string"
                }
            }
        },
        "IdentityProviderBasicInfo": {
            "type": "object",
            "properties": {
                "schemaType": {
                    "type": "integer",
                    "format": "int32"
                },
                "searchType": {
                    "type": "integer",
                    "format": "int32"
                },
                "supportPagedSearchControl": {
                    "type": "boolean"
                },
                "pagedSearchPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "supportVLVControl": {
                    "type": "boolean"
                },
                "supportUnlimitedSearch": {
                    "type": "boolean"
                },
                "supportUSNQuery": {
                    "type": "boolean"
                },
                "supportDirSyncControl": {
                    "type": "boolean"
                },
                "monitoringPingTime": {
                    "type": "integer",
                    "format": "int32"
                },
                "monitoringFullSyncStartTime": {
                    "type": "string"
                },
                "supportPersistentSearchControl": {
                    "type": "boolean"
                },
                "monitorChanges": {
                    "type": "boolean"
                },
                "monitoringType": {
                    "type": "integer",
                    "format": "int32"
                },
                "enableUUIDTracking": {
                    "type": "boolean"
                },
                "objectUUIDAttribute": {
                    "type": "string"
                },
                "userLoginAttr": {
                    "type": "string"
                },
                "groupLoginAttr": {
                    "type": "string"
                },
                "externalIDAttribute": {
                    "type": "string"
                },
                "memberAttr": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "memberOfAttr": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "supportedSASLMechanisms": {
                    "type": "string"
                },
                "vlvsortingAttribute": {
                    "type": "string"
                },
                "vlvsearchPageSize": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "IdentityProviderConnectionParam": {
            "type": "object",
            "properties": {
                "hostName": {
                    "type": "string"
                },
                "portNumber": {
                    "type": "integer",
                    "format": "int32"
                },
                "encryptionMethod": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "IdentityProviderProfileEx": {
            "type": "object",
            "properties": {
                "ipSchemaType": {
                    "type": "integer",
                    "format": "int32"
                },
                "profileName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "baseDN": {
                    "type": "string"
                },
                "ipAuthentication": {
                    "$ref": "#/definitions/IdentityProviderAuthentication"
                },
                "ipConnectionParameter": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IdentityProviderConnectionParam"
                    }
                },
                "objectClassNameMapping": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectClassMapping"
                    }
                },
                "basicInfo": {
                    "$ref": "#/definitions/IdentityProviderBasicInfo"
                },
                "basicAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtdsBasicAttribute"
                    }
                },
                "authProvider": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ObjectClassMapping": {
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "integer",
                    "format": "int32"
                },
                "destObject": {
                    "type": "string"
                },
                "sourceFilter": {
                    "type": "string"
                },
                "attributeMapping": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeMapping"
                    }
                },
                "syncPairMapping": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SyncPairMapping"
                    }
                },
                "mustMappedAttributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "OtdsBasicAttribute": {
            "type": "object",
            "properties": {
                "attrId": {
                    "type": "string",
                    "xml": {
                        "name": "AttrId"
                    }
                },
                "attrValues": {
                    "type": "array",
                    "xml": {
                        "name": "AttrValues"
                    },
                    "items": {
                        "type": "string",
                        "xml": {
                            "name": "AttrValues"
                        }
                    }
                }
            }
        },
        "SyncPairMapping": {
            "type": "object",
            "properties": {
                "recurse": {
                    "type": "integer",
                    "format": "int32"
                },
                "sourceLocation": {
                    "type": "string"
                }
            }
        },
        "PartitionInfo": {
            "type": "object",
            "properties": {
                "activated": {
                    "type": "boolean"
                },
                "importStartTime": {
                    "type": "string"
                },
                "importEndTime": {
                    "type": "string"
                },
                "importStatus": {
                    "type": "integer",
                    "format": "int32"
                },
                "consolidationStartTime": {
                    "type": "string"
                },
                "consolidationEndTime": {
                    "type": "string"
                },
                "consolidationStatus": {
                    "type": "integer",
                    "format": "int32"
                },
                "numUsers": {
                    "type": "integer",
                    "format": "int64"
                },
                "numGroups": {
                    "type": "integer",
                    "format": "int64"
                },
                "numRoles": {
                    "type": "integer",
                    "format": "int64"
                },
                "numOUs": {
                    "type": "integer",
                    "format": "int64"
                },
                "connectedToOTDS": {
                    "type": "boolean"
                },
                "numRecycledUsers": {
                    "type": "integer",
                    "format": "int64"
                },
                "numRecycledGroups": {
                    "type": "integer",
                    "format": "int64"
                },
                "numRecycledRoles": {
                    "type": "integer",
                    "format": "int64"
                },
                "consolidationRequired": {
                    "type": "boolean"
                }
            }
        },
        "CommandParams": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                }
            }
        },
        "IdentityProviderProfileList": {
            "type": "object",
            "properties": {
                "identityProviderProfileList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IdentityProviderProfileEx"
                    }
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "IdentityProviderBasicProfile": {
            "type": "object",
            "properties": {
                "ipSchemaType": {
                    "type": "integer",
                    "format": "int32"
                },
                "profileName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "baseDN": {
                    "type": "string"
                },
                "ipAuthentication": {
                    "$ref": "#/definitions/IdentityProviderAuthentication"
                },
                "ipConnectionParameter": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IdentityProviderConnectionParam"
                    }
                },
                "authProvider": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "CSDSDepartmentMapping": {
            "type": "object",
            "properties": {
                "ldapDepartment": {
                    "type": "string"
                },
                "llDepartment": {
                    "type": "string"
                }
            }
        },
        "CSDSSyncSource": {
            "type": "object",
            "properties": {
                "syncSourceName": {
                    "type": "string"
                },
                "scheduleDayMask": {
                    "type": "integer",
                    "format": "int32"
                },
                "scheduleHourMask": {
                    "type": "integer",
                    "format": "int32"
                },
                "scheduleMinuteMask": {
                    "type": "integer",
                    "format": "int32"
                },
                "scheduleEnabled": {
                    "type": "integer",
                    "format": "int32"
                },
                "serverName": {
                    "type": "string"
                },
                "serverPort": {
                    "type": "string"
                },
                "sslEnabled": {
                    "type": "string"
                },
                "certPath": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "searchRoot": {
                    "type": "string"
                },
                "userSearchFilter": {
                    "type": "string"
                },
                "groupSearchFilter": {
                    "type": "string"
                },
                "pageSize": {
                    "type": "string"
                },
                "uniqueIDAttribute": {
                    "type": "string"
                },
                "synchronizeGroups": {
                    "type": "string"
                },
                "synchronizeGroupMembers": {
                    "type": "string"
                },
                "userMappingLoginName": {
                    "type": "string"
                },
                "userMappingFirstName": {
                    "type": "string"
                },
                "userMappingMiddleInitial": {
                    "type": "string"
                },
                "userMappingLastName": {
                    "type": "string"
                },
                "userMappingTitle": {
                    "type": "string"
                },
                "userMappingEmail": {
                    "type": "string"
                },
                "userMappingPhone": {
                    "type": "string"
                },
                "userMappingFax": {
                    "type": "string"
                },
                "userMappingOfficeLocation": {
                    "type": "string"
                },
                "userMappingDepartment": {
                    "type": "string"
                },
                "groupMappingName": {
                    "type": "string"
                },
                "groupMappingLeader": {
                    "type": "string"
                },
                "groupMappingMember": {
                    "type": "string"
                },
                "privileges": {
                    "type": "string"
                },
                "usernameStyle": {
                    "type": "string"
                },
                "groupnameStyle": {
                    "type": "string"
                },
                "usernameOption": {
                    "type": "string"
                },
                "groupnameOption": {
                    "type": "string"
                },
                "deleteUserAccounts": {
                    "type": "string"
                },
                "reEnableUserAccounts": {
                    "type": "string"
                },
                "userPasswordOption": {
                    "type": "string"
                },
                "userPassword": {
                    "type": "string"
                },
                "enableDepartmentMapping": {
                    "type": "string"
                },
                "departmentMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CSDSDepartmentMapping"
                    }
                }
            }
        },
        "CSDSSyncSourceList": {
            "type": "object",
            "properties": {
                "syncSourceList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CSDSSyncSource"
                    }
                }
            }
        },
        "StringResponse": {
            "type": "object",
            "properties": {
                "returnValue": {
                    "type": "string"
                }
            }
        },
        "TestResult": {
            "type": "object",
            "properties": {
                "otdsBasicAttributeList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtdsBasicAttribute"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "SimulationParams": {
            "type": "object",
            "properties": {
                "entry_dn": {
                    "type": "string"
                },
                "idPrProfile": {
                    "$ref": "#/definitions/IdentityProviderProfileEx"
                }
            }
        },
        "IdentityProviderProfile": {
            "type": "object",
            "properties": {
                "ipSchemaType": {
                    "type": "integer",
                    "format": "int32"
                },
                "profileName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "baseDN": {
                    "type": "string"
                },
                "ipAuthentication": {
                    "$ref": "#/definitions/IdentityProviderAuthentication"
                },
                "ipConnectionParameter": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IdentityProviderConnectionParam"
                    }
                },
                "objectClassNameMapping": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectClassMapping"
                    }
                },
                "authProvider": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ProfileName": {
            "type": "object",
            "properties": {
                "profileName": {
                    "type": "string"
                }
            }
        },
        "StringList": {
            "type": "object",
            "properties": {
                "stringList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DatabaseSettings": {
            "type": "object",
            "properties": {
                "getoTImportUnitDBDriver": {
                    "type": "string"
                },
                "getoTImportUnitDBServer": {
                    "type": "string"
                },
                "getoTImportUnitDBPort": {
                    "type": "string"
                },
                "getoTImportUnitDBUser": {
                    "type": "string"
                },
                "getoTImportUnitDBPassword": {
                    "type": "string"
                },
                "getoTImportUnitDBDatabase": {
                    "type": "string"
                },
                "getoTImportUnitUsersSQL": {
                    "type": "string"
                },
                "getoTImportUnitGroupsSQL": {
                    "type": "string"
                },
                "getoTImportUnitMappingsSQL": {
                    "type": "string"
                },
                "columnNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DsException": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int64"
                },
                "displayString": {
                    "type": "string"
                }
            }
        },
        "ImportUnit": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectAttribute"
                    }
                },
                "getoTImportUnitUsersMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImportUnitConfig"
                    }
                },
                "getoTImportUnitGroupsMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImportUnitConfig"
                    }
                },
                "getoTImportUnitMappingsMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImportUnitConfig"
                    }
                },
                "databaseSettings": {
                    "$ref": "#/definitions/DatabaseSettings"
                }
            }
        },
        "ImportUnitConfig": {
            "type": "object",
            "properties": {
                "importUnitColumn": {
                    "type": "string"
                },
                "otdsAttribute": {
                    "type": "string"
                }
            }
        },
        "ImportUnitsResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32"
                },
                "displayString": {
                    "type": "string"
                },
                "exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DsException"
                    }
                },
                "listImportUnitsResult": {
                    "$ref": "#/definitions/ListImportUnitsResult"
                },
                "userDatabaseSettings": {
                    "$ref": "#/definitions/DatabaseSettings"
                },
                "groupDatabaseSettings": {
                    "$ref": "#/definitions/DatabaseSettings"
                },
                "mappingDatabaseSettings": {
                    "$ref": "#/definitions/DatabaseSettings"
                },
                "xmlSettings": {
                    "$ref": "#/definitions/XMLSettings"
                },
                "version": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ListImportUnitsResult": {
            "type": "object",
            "properties": {
                "importUnits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImportUnit"
                    }
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "ObjectAttribute": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "XMLSettings": {
            "type": "object",
            "properties": {
                "xmlFileName": {
                    "type": "string"
                },
                "columnNamesUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "columnNamesGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "importError": {
                    "type": "string"
                },
                "columnNamesMappings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ResponseDatabaseSettings": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32"
                },
                "displayString": {
                    "type": "string"
                },
                "exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DsException"
                    }
                },
                "databaseSettings": {
                    "$ref": "#/definitions/DatabaseSettings"
                },
                "version": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ImportUnitXMLObject": {
            "type": "object",
            "properties": {
                "getoTImportUnitXMLFilePath": {
                    "type": "string"
                },
                "getUsers": {
                    "type": "boolean"
                },
                "getGroups": {
                    "type": "boolean"
                },
                "getMappings": {
                    "type": "boolean"
                }
            }
        },
        "Attribute": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the attribute"
                },
                "values": {
                    "type": "array",
                    "description": "List of the attribute's values. The list can be empty.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CustomAttribute": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Attribute type"
                },
                "name": {
                    "type": "string",
                    "description": "Attribute name"
                },
                "value": {
                    "type": "string",
                    "description": "Attribute value"
                }
            }
        },
        "ListRolesResult": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "description": "List of roles",
                    "items": {
                        "$ref": "#/definitions/Role"
                    }
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "Role": {
            "type": "object",
            "properties": {
                "numMembers": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of members in the group / assigned the role"
                },
                "userPartitionID": {
                    "type": "string",
                    "description": "OTDS partition where the group/role is located"
                },
                "values": {
                    "type": "array",
                    "description": "The object's attributes",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "description": "The object's custom attributes",
                    "items": {
                        "$ref": "#/definitions/CustomAttribute"
                    }
                },
                "objectClass": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The object ID"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string",
                    "description": "The object's DN"
                },
                "originUUID": {
                    "type": "string",
                    "description": "The (synchronized) origin object's immutable UUID"
                },
                "urlLocation": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The object's immutable UUID"
                },
                "urlId": {
                    "type": "string",
                    "description": "The object ID when used as part of the URL (mitigates %5C and %2F problem)"
                },
                "name": {
                    "type": "string",
                    "description": "The object name"
                }
            }
        },
        "Group": {
            "type": "object",
            "properties": {
                "numMembers": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of members in the group / assigned the role"
                },
                "userPartitionID": {
                    "type": "string",
                    "description": "OTDS partition where the group/role is located"
                },
                "values": {
                    "type": "array",
                    "description": "The object's attributes",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "description": "The object's custom attributes",
                    "items": {
                        "$ref": "#/definitions/CustomAttribute"
                    }
                },
                "objectClass": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The object ID"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string",
                    "description": "The object's DN"
                },
                "originUUID": {
                    "type": "string",
                    "description": "The (synchronized) origin object's immutable UUID"
                },
                "urlLocation": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The object's immutable UUID"
                },
                "urlId": {
                    "type": "string",
                    "description": "The object ID when used as part of the URL (mitigates %5C and %2F problem)"
                },
                "name": {
                    "type": "string",
                    "description": "The object name"
                }
            }
        },
        "ListGroupsResult": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "description": "List of groups",
                    "items": {
                        "$ref": "#/definitions/Group"
                    }
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The error/status code"
                },
                "error": {
                    "type": "string",
                    "description": "The error message"
                },
                "errorDetails": {
                    "type": "object",
                    "description": "The error details",
                    "additionalProperties": {
                        "type": "object"
                    }
                }
            }
        },
        "ListUsersResult": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "description": "List of users",
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "userPartitionID": {
                    "type": "string",
                    "description": "OTDS partition where the user is located"
                },
                "values": {
                    "type": "array",
                    "description": "The object's attributes",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "description": "The object's custom attributes",
                    "items": {
                        "$ref": "#/definitions/CustomAttribute"
                    }
                },
                "objectClass": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The object ID"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string",
                    "description": "The object's DN"
                },
                "originUUID": {
                    "type": "string",
                    "description": "The (synchronized) origin object's immutable UUID"
                },
                "urlLocation": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The object's immutable UUID"
                },
                "urlId": {
                    "type": "string",
                    "description": "The object ID when used as part of the URL (mitigates %5C and %2F problem)"
                },
                "name": {
                    "type": "string",
                    "description": "The object name"
                }
            }
        },
        "ListAllObjectsResult": {
            "type": "object",
            "properties": {
                "listGroupsResult": {
                    "$ref": "#/definitions/ListGroupsResult"
                },
                "listRolesResult": {
                    "$ref": "#/definitions/ListRolesResult"
                },
                "listUsersResult": {
                    "$ref": "#/definitions/ListUsersResult"
                },
                "listOrganizationalUnitsResult": {
                    "$ref": "#/definitions/ListOrganizationalUnitsResult"
                },
                "listUserPartitionsResult": {
                    "$ref": "#/definitions/ListUserPartitionsResult"
                },
                "allObjectsNumber": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ListOrganizationalUnitsResult": {
            "type": "object",
            "properties": {
                "_organizationalUnits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationalUnit"
                    }
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "ListUserPartitionsResult": {
            "type": "object",
            "properties": {
                "_userPartitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserPartition"
                    }
                },
                "warningMessage": {
                    "type": "string"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "OrganizationalUnit": {
            "type": "object",
            "properties": {
                "userPartitionID": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "description": "The object's attributes",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "description": "The object's custom attributes",
                    "items": {
                        "$ref": "#/definitions/CustomAttribute"
                    }
                },
                "objectClass": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The object ID"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string",
                    "description": "The object's DN"
                },
                "originUUID": {
                    "type": "string",
                    "description": "The (synchronized) origin object's immutable UUID"
                },
                "urlLocation": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The object's immutable UUID"
                },
                "urlId": {
                    "type": "string",
                    "description": "The object ID when used as part of the URL (mitigates %5C and %2F problem)"
                },
                "name": {
                    "type": "string",
                    "description": "The object name"
                }
            }
        },
        "SystemAttribute": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "friendlyName": {
                    "type": "string"
                },
                "requiresRestart": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "UserPartition": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "deleted": {
                    "type": "boolean"
                },
                "systemAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SystemAttribute"
                    }
                },
                "partitionInfo": {
                    "$ref": "#/definitions/PartitionInfo"
                },
                "usersOrganizationalUnitID": {
                    "type": "string"
                },
                "groupsOrganizationalUnitID": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "description": "The object's attributes",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "description": "The object's custom attributes",
                    "items": {
                        "$ref": "#/definitions/CustomAttribute"
                    }
                },
                "objectClass": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The object ID"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string",
                    "description": "The object's DN"
                },
                "originUUID": {
                    "type": "string",
                    "description": "The (synchronized) origin object's immutable UUID"
                },
                "urlLocation": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The object's immutable UUID"
                },
                "urlId": {
                    "type": "string",
                    "description": "The object ID when used as part of the URL (mitigates %5C and %2F problem)"
                },
                "name": {
                    "type": "string",
                    "description": "The object name"
                }
            }
        },
        "AccessRoleMember": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "userPartition": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "AccessRoleMembers": {
            "type": "object",
            "properties": {
                "userPartitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessRoleMember"
                    }
                },
                "organizationalUnits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessRoleMember"
                    }
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessRoleMember"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessRoleMember"
                    }
                },
                "roles": {
                    "type": "array",
                    "description": "Assigned Roles",
                    "items": {
                        "$ref": "#/definitions/AccessRoleMember"
                    }
                }
            }
        },
        "AccessRole": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                },
                "accessRoleMembers": {
                    "$ref": "#/definitions/AccessRoleMembers"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceConfig"
                    }
                },
                "attributeList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeConfiguration"
                    }
                }
            }
        },
        "AccessRoleHeader": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "AttributeConfiguration": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ResourceConfig": {
            "type": "object",
            "properties": {
                "resourceName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "resourceID": {
                    "type": "string"
                },
                "resourceState": {
                    "type": "integer",
                    "format": "int32"
                },
                "userSynchronizationState": {
                    "type": "boolean"
                },
                "resourceDN": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                },
                "accessRoleList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessRoleHeader"
                    }
                },
                "impersonateList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pcCreatePermissionAllowed": {
                    "type": "boolean"
                },
                "pcModifyPermissionAllowed": {
                    "type": "boolean"
                },
                "pcDeletePermissionAllowed": {
                    "type": "boolean"
                },
                "logoutURL": {
                    "type": "string"
                },
                "logoutMethod": {
                    "type": "string"
                },
                "allowImpersonation": {
                    "type": "boolean",
                    "description": "Whether to allow this resource to impersonate users"
                },
                "secretKey": {
                    "type": "array",
                    "description": "Only used in bootstrapping to load a pre-configured secret",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "ListDetailedAccessRolesResult": {
            "type": "object",
            "properties": {
                "accessRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessRole"
                    }
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "AttributeConfigurationList": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeConfiguration"
                    }
                }
            }
        },
        "AuthenticationHandlerInfo": {
            "type": "object",
            "properties": {
                "_name": {
                    "type": "string"
                },
                "_id": {
                    "type": "string"
                },
                "_description": {
                    "type": "string"
                },
                "_class": {
                    "type": "string"
                },
                "_enabled": {
                    "type": "boolean"
                },
                "_credentialBased": {
                    "type": "boolean"
                },
                "_priority": {
                    "type": "integer",
                    "format": "int32"
                },
                "_scope": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "_properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthenticationHandlerProperty"
                    }
                },
                "_authPrincipalAttrNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createPermission": {
                    "type": "boolean"
                },
                "readPermission": {
                    "type": "boolean"
                },
                "updatePermission": {
                    "type": "boolean"
                },
                "deletePermission": {
                    "type": "boolean"
                },
                "enablePermission": {
                    "type": "boolean"
                }
            }
        },
        "AuthenticationHandlerProperty": {
            "type": "object",
            "properties": {
                "_key": {
                    "type": "string"
                },
                "_name": {
                    "type": "string"
                },
                "_description": {
                    "type": "string"
                },
                "_required": {
                    "type": "boolean"
                },
                "_fileBased": {
                    "type": "boolean"
                },
                "_fileName": {
                    "type": "boolean"
                },
                "_fileExtensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "_value": {
                    "type": "string"
                },
                "_allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "_confidential": {
                    "type": "boolean"
                },
                "_keepOriginal": {
                    "type": "boolean"
                }
            }
        },
        "ListAuthenticationHandlersResult": {
            "type": "object",
            "properties": {
                "authenticationHandlerInfoList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthenticationHandlerInfo"
                    }
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "AuthenticationResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "ticket": {
                    "type": "string"
                },
                "resourceID": {
                    "type": "string"
                },
                "failureReason": {
                    "type": "string"
                },
                "passwordExpirationTime": {
                    "type": "integer",
                    "format": "int64"
                },
                "continuation": {
                    "type": "boolean"
                },
                "continuationContext": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "continuationData": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "AuthenticationParams": {
            "type": "object",
            "properties": {
                "tokenBinary": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "continuationContext": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "clientData": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "headersList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BasicAttribute"
                    }
                },
                "cookiesList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BasicAttribute"
                    }
                },
                "remoteAddr": {
                    "type": "string"
                },
                "remoteHost": {
                    "type": "string"
                },
                "authenticator": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "secureSecret": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "userName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "targetResourceId": {
                    "type": "string"
                },
                "sourceResourceId": {
                    "type": "string"
                },
                "ticketType": {
                    "type": "string",
                    "enum": [
                        "OTDSTICKET",
                        "LOGONTOKEN"
                    ]
                }
            }
        },
        "BasicAttribute": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "TicketContentResponse": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "urlUserId": {
                    "type": "string"
                },
                "entryDN": {
                    "type": "string"
                },
                "cipherText": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "integer",
                    "format": "int64"
                },
                "credentialUserName": {
                    "type": "string"
                },
                "credentialPassword": {
                    "type": "string"
                },
                "clientSessionKey": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "expiryTime": {
                    "type": "integer",
                    "format": "int64"
                },
                "sessionId": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "acr": {
                    "type": "string"
                },
                "sharedClientDataMap": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BasicAttribute"
                    }
                },
                "privateClientDataMap": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BasicAttribute"
                    }
                }
            }
        },
        "TicketParams": {
            "type": "object",
            "properties": {
                "ticket": {
                    "type": "string"
                },
                "sourceResourceId": {
                    "type": "string"
                },
                "targetResourceId": {
                    "type": "string"
                },
                "clientData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BasicAttribute"
                    }
                },
                "userName": {
                    "type": "string"
                },
                "authenticator": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "secureSecret": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "ThirdPartyTokenParams": {
            "type": "object",
            "properties": {
                "authHandlerName": {
                    "type": "string"
                },
                "tokenType": {
                    "type": "string"
                },
                "targetResourceId": {
                    "type": "string"
                },
                "contextUserId": {
                    "type": "string"
                },
                "useCallerContext": {
                    "type": "boolean"
                },
                "userName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "kerberosToken": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "kerberosSessionKey": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "OAuthTokenInfo": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "expiryTime": {
                    "type": "string"
                },
                "now": {
                    "type": "string"
                },
                "expiresIn": {
                    "type": "integer",
                    "format": "int64"
                },
                "tokenId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "dataMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "identities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceIdentity"
                    }
                },
                "actorId": {
                    "type": "string"
                }
            }
        },
        "ResourceIdentity": {
            "type": "object",
            "properties": {
                "resourceName": {
                    "type": "string"
                },
                "resourceID": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "userDomain": {
                    "type": "string"
                },
                "actorName": {
                    "type": "string"
                }
            }
        },
        "OAuthTokenParam": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "resourceId": {
                    "type": "string"
                }
            }
        },
        "ResourceConnectionParam": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "ResourceConnectionParamList": {
            "type": "object",
            "properties": {
                "resourceName": {
                    "type": "string"
                },
                "resourceConnectionParamList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceConnectionParam"
                    }
                }
            }
        },
        "AttributeMappingList": {
            "type": "object",
            "properties": {
                "attributeMappingList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeMapping"
                    }
                }
            }
        },
        "ResourceConnectionParamInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "helpText": {
                    "type": "string"
                },
                "defaultValue": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "confidential": {
                    "type": "boolean"
                },
                "order": {
                    "type": "integer",
                    "format": "int32"
                },
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ResourceConnectionParamResponse": {
            "type": "object",
            "properties": {
                "connectionParamInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceConnectionParamInfo"
                    }
                }
            }
        },
        "ConnectorInfo": {
            "type": "object",
            "properties": {
                "connectorName": {
                    "type": "string"
                },
                "connectorid": {
                    "type": "string"
                },
                "userDefaultAttributeMapping": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeMapping"
                    }
                },
                "groupDefaultAttributeMapping": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeMapping"
                    }
                }
            }
        },
        "ResourceConnectorInfoResponse": {
            "type": "object",
            "properties": {
                "connectorsInfoList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConnectorInfo"
                    }
                }
            }
        },
        "Activity": {
            "type": "object",
            "properties": {
                "source": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "Job": {
            "type": "object",
            "properties": {
                "startTime": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "STARTING",
                        "RUNNING",
                        "COMPLETED",
                        "CANCEL_PENDING",
                        "CANCELED",
                        "FAILED"
                    ]
                },
                "mostRecentActivity": {
                    "type": "string"
                },
                "finishTime": {
                    "type": "string"
                },
                "jobID": {
                    "type": "string"
                },
                "cancellable": {
                    "type": "boolean"
                },
                "recentInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Activity"
                    }
                },
                "warningCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "errorCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "recentErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Activity"
                    }
                },
                "recentWarnings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Activity"
                    }
                },
                "infoCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "ConsolidationObject": {
            "type": "object",
            "properties": {
                "dnToConsolidate": {
                    "type": "string"
                }
            }
        },
        "ConsolidationCommandParams": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "string"
                },
                "objectToConsolidate": {
                    "type": "string"
                },
                "resourceList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cleanupUsersInResource": {
                    "type": "boolean"
                },
                "cleanupGroupsInResource": {
                    "type": "boolean"
                },
                "consolidateWithIdentityProvider": {
                    "type": "boolean"
                },
                "repair": {
                    "type": "boolean"
                }
            }
        },
        "SessionInfo": {
            "type": "object",
            "properties": {
                "currentTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "renewedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "idleExpiresAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "absoluteExpiresAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "ipAddress": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                }
            }
        },
        "BooleanResponse": {
            "type": "object",
            "properties": {
                "returnValue": {
                    "type": "boolean"
                }
            }
        },
        "StringObject": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "SessionInfoList": {
            "type": "object",
            "properties": {
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SessionInfo"
                    }
                }
            }
        },
        "CurrentUserResponse": {
            "type": "object",
            "properties": {
                "isAdmin": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/User"
                },
                "isSysAdmin": {
                    "type": "boolean"
                }
            }
        },
        "TwoFactorSettings": {
            "type": "object",
            "properties": {
                "inheritSettings": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "applyToAPIRequests": {
                    "type": "boolean"
                },
                "applyToSSOUsers": {
                    "type": "boolean"
                },
                "applyToExtranetOnly": {
                    "type": "boolean"
                },
                "allowRememberedDevices": {
                    "type": "boolean"
                },
                "requireClientCertificate": {
                    "type": "boolean"
                }
            }
        },
        "CustomAttributeList": {
            "type": "object",
            "properties": {
                "customAttributeList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomAttribute"
                    }
                }
            }
        },
        "ListJobsResult": {
            "type": "object",
            "properties": {
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Job"
                    }
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "OAuthClient": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "redirectURLs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "accessTokenLifeTime": {
                    "type": "integer",
                    "format": "int64"
                },
                "refreshTokenLifeTime": {
                    "type": "integer",
                    "format": "int64"
                },
                "authCodeLifeTime": {
                    "type": "integer",
                    "format": "int64"
                },
                "allowRefreshToken": {
                    "type": "boolean"
                },
                "allowImpersonation": {
                    "type": "boolean"
                },
                "useSessionRefreshTokenLifeTime": {
                    "type": "boolean"
                },
                "allowedScopes": {
                    "type": "array",
                    "description": "Application-defined OAuth scopes that this client can be automatically granted, if requested.",
                    "items": {
                        "type": "string"
                    }
                },
                "defaultScopes": {
                    "type": "array",
                    "description": "OAuth scopes that will be used if the request does not contain a scope parameter.",
                    "items": {
                        "type": "string"
                    }
                },
                "impersonateList": {
                    "type": "array",
                    "description": "Resources in which this resource can impersonate users. If not provided, no restriction exists.",
                    "items": {
                        "type": "string"
                    }
                },
                "confidential": {
                    "type": "boolean"
                },
                "secret": {
                    "type": "string"
                },
                "customAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomAttribute"
                    }
                },
                "logoutURL": {
                    "type": "string"
                },
                "logoutMethod": {
                    "type": "string"
                },
                "authScopes": {
                    "type": "array",
                    "description": "The list of partitions whose users can authenticate through this OAuth client. If blank, no restriction exists.",
                    "items": {
                        "type": "string"
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "The object's immutable UUID"
                },
                "urlLocation": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ImpersonationSettings": {
            "type": "object",
            "properties": {
                "allowImpersonation": {
                    "type": "boolean"
                },
                "impersonateList": {
                    "type": "array",
                    "description": "Resources in which this resource can impersonate users. If not provided, no restriction exists.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ListOAuthClientsResult": {
            "type": "object",
            "properties": {
                "clients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OAuthClient"
                    }
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "PartitionState": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "SystemAttributeList": {
            "type": "object",
            "properties": {
                "systemAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SystemAttribute"
                    }
                }
            }
        },
        "OAuthSettings": {
            "type": "object",
            "properties": {
                "accessTokenLifeTime": {
                    "type": "integer",
                    "format": "int64"
                },
                "authCodeLifeTime": {
                    "type": "integer",
                    "format": "int64"
                },
                "refreshTokenLifeTime": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "PartitionRestrictions": {
            "type": "object",
            "properties": {
                "usersLimit": {
                    "type": "integer",
                    "format": "int64"
                },
                "groupsLimit": {
                    "type": "integer",
                    "format": "int64"
                },
                "ousLimit": {
                    "type": "integer",
                    "format": "int64"
                },
                "allowedDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bindAuthToAllowedDomains": {
                    "type": "boolean"
                },
                "restrictProvToAllowedDomains": {
                    "type": "boolean"
                }
            }
        },
        "OtdsPasswordPolicy": {
            "type": "object",
            "properties": {
                "passwordHistoryMaximumCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "daysBeforeNewPasswordMayBeChanged": {
                    "type": "integer",
                    "format": "int32"
                },
                "passwordMaximumDuration": {
                    "type": "integer",
                    "format": "int32"
                },
                "daysBeforeOldPasswordMayBeReused": {
                    "type": "integer",
                    "format": "int32"
                },
                "lockoutFailureCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "lockoutDuration": {
                    "type": "integer",
                    "format": "int32"
                },
                "minimumNumberOfCharacters": {
                    "type": "integer",
                    "format": "int32"
                },
                "complexPasswordValidationEnabled": {
                    "type": "boolean"
                },
                "minimumNumberOfDigits": {
                    "type": "integer",
                    "format": "int32"
                },
                "minimumNumberOfSymbols": {
                    "type": "integer",
                    "format": "int32"
                },
                "minimumNumberOfUppercase": {
                    "type": "integer",
                    "format": "int32"
                },
                "minimumNumberOfLowercase": {
                    "type": "integer",
                    "format": "int32"
                },
                "minimumChangesToPreviousPassword": {
                    "type": "integer",
                    "format": "int32"
                },
                "maxNumberOfConsecutiveANCharsInPassword": {
                    "type": "integer",
                    "format": "int32"
                },
                "blockCommonPassword": {
                    "type": "boolean"
                },
                "values": {
                    "type": "array",
                    "description": "The object's attributes",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "description": "The object's custom attributes",
                    "items": {
                        "$ref": "#/definitions/CustomAttribute"
                    }
                },
                "objectClass": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The object ID"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string",
                    "description": "The object's DN"
                },
                "originUUID": {
                    "type": "string",
                    "description": "The (synchronized) origin object's immutable UUID"
                },
                "urlLocation": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The object's immutable UUID"
                },
                "urlId": {
                    "type": "string",
                    "description": "The object ID when used as part of the URL (mitigates %5C and %2F problem)"
                },
                "name": {
                    "type": "string",
                    "description": "The object name"
                }
            }
        },
        "AuditEvent": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                },
                "eventType": {
                    "type": "string"
                },
                "result": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "auditObjectID": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                }
            }
        },
        "ListAuditEventsResult": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuditEvent"
                    }
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "BasicEnum": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "strID": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                }
            }
        },
        "BasicEnumList": {
            "type": "object",
            "properties": {
                "basicEnumList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BasicEnum"
                    }
                }
            }
        },
        "ResourceStatus": {
            "type": "object",
            "properties": {
                "isSynchronizationEnabled": {
                    "type": "boolean"
                },
                "isActivated": {
                    "type": "boolean"
                },
                "isAuthenticationEnabled": {
                    "type": "boolean"
                }
            }
        },
        "AccessRolesList": {
            "type": "object",
            "properties": {
                "accessRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessRoleHeader"
                    }
                }
            }
        },
        "ResourceResponse": {
            "type": "object",
            "properties": {
                "secretKey": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "ResourceAuthParams": {
            "type": "object",
            "properties": {
                "authenticator": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "secureSecret": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "ResourceSessionResponse": {
            "type": "object",
            "properties": {
                "sessionKey": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "ResourceConfigParam": {
            "type": "object",
            "properties": {
                "resourceName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "resourceID": {
                    "type": "string"
                },
                "resourceState": {
                    "type": "integer",
                    "format": "int32"
                },
                "userSynchronizationState": {
                    "type": "boolean"
                },
                "resourceDN": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                },
                "accessRoleList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessRoleHeader"
                    }
                },
                "impersonateList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pcCreatePermissionAllowed": {
                    "type": "boolean"
                },
                "pcModifyPermissionAllowed": {
                    "type": "boolean"
                },
                "pcDeletePermissionAllowed": {
                    "type": "boolean"
                },
                "logoutURL": {
                    "type": "string"
                },
                "logoutMethod": {
                    "type": "string"
                },
                "allowImpersonation": {
                    "type": "boolean",
                    "description": "Whether to allow this resource to impersonate users"
                },
                "secretKey": {
                    "type": "array",
                    "description": "Only used in bootstrapping to load a pre-configured secret",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "connectorName": {
                    "type": "string"
                },
                "connectorid": {
                    "type": "string"
                },
                "userAttributeMapping": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeMapping"
                    }
                },
                "groupAttributeMapping": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeMapping"
                    }
                },
                "connectionParamInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceConnectionParam"
                    }
                },
                "logonStyle": {
                    "type": "string"
                },
                "logonUXVersion": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "MemberIdentity": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name (as per __NAME__ attribute mapping) of the member in the resource"
                },
                "id": {
                    "type": "string",
                    "description": "The OTDS member ID"
                },
                "location": {
                    "type": "string",
                    "description": "The DN/location of the member"
                }
            }
        },
        "MemberIdentityList": {
            "type": "object",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MemberIdentity"
                    }
                }
            }
        },
        "SPSResourceNotificationsConfig": {
            "type": "object",
            "properties": {
                "threshold": {
                    "type": "integer",
                    "format": "int32"
                },
                "enabled": {
                    "type": "boolean"
                },
                "emailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ListResourcesResult": {
            "type": "object",
            "properties": {
                "resourceConfigList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceConfig"
                    }
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "UpdateParams": {
            "type": "object",
            "properties": {
                "updateFlags": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "RecycleBinConfig": {
            "type": "object",
            "properties": {
                "enableSyncPartitions": {
                    "type": "boolean"
                },
                "enableNonSyncPartitions": {
                    "type": "boolean"
                },
                "autoDelete": {
                    "type": "boolean"
                },
                "replaceIfExists": {
                    "type": "boolean"
                },
                "daysToKeep": {
                    "type": "integer",
                    "format": "int32"
                },
                "hoursBetweenDelete": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "SMTPConfig": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "format": "int32"
                },
                "userName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "fromName": {
                    "type": "string"
                },
                "useSSL": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "NotificationsConfig": {
            "type": "object",
            "properties": {
                "frequency": {
                    "type": "integer",
                    "format": "int32"
                },
                "maxRetries": {
                    "type": "integer",
                    "format": "int32"
                },
                "defaultLanguage": {
                    "type": "string"
                },
                "possibleLanguages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "otdsNotificationsEnabled": {
                    "type": "boolean"
                },
                "otdsEmailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "eventIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "possibleEventIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "eventLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "possibleEventLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "spsNotificationsEnabled": {
                    "type": "boolean"
                },
                "spsCertificatesNotificationsThreshold": {
                    "type": "integer",
                    "format": "int32"
                },
                "spsSendSchedule": {
                    "type": "integer",
                    "format": "int32"
                },
                "passwordNotificationsEnabled": {
                    "type": "boolean"
                },
                "passwordNotificationsDays": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            }
        },
        "ConnectionParams": {
            "type": "object",
            "properties": {
                "otdsURL": {
                    "type": "string"
                },
                "otdsPartitionID": {
                    "type": "string"
                },
                "otdsUsername": {
                    "type": "string"
                },
                "otdsPassword": {
                    "type": "string"
                },
                "paramsID": {
                    "type": "string"
                }
            }
        },
        "AuditConfig": {
            "type": "object",
            "properties": {
                "daysToKeep": {
                    "type": "integer",
                    "format": "int32"
                },
                "enabled": {
                    "type": "boolean"
                },
                "eventIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "possibleEventIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "configuredEvents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DiagnosticsProblem": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "problemID": {
                    "type": "integer",
                    "format": "int32"
                },
                "problemInfo": {
                    "type": "string"
                }
            }
        },
        "ProblemsResponse": {
            "type": "object",
            "properties": {
                "problems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DiagnosticsProblem"
                    }
                }
            }
        },
        "ContextResult": {
            "type": "object",
            "properties": {
                "context": {
                    "type": "string"
                }
            }
        },
        "VersionInfo": {
            "type": "object",
            "properties": {
                "productVersion": {
                    "type": "string"
                },
                "versionSuffix": {
                    "type": "string"
                },
                "buildNumber": {
                    "type": "string"
                },
                "buildDate": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "productVersionAsLong": {
                    "type": "integer",
                    "format": "int64"
                },
                "hardwareFingerprint": {
                    "type": "string"
                },
                "ldapFingerprint": {
                    "type": "string"
                },
                "spsFingerprint": {
                    "type": "string"
                }
            }
        },
        "IntegerResponse": {
            "type": "object",
            "properties": {
                "returnValue": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "PasswordChangeParams": {
            "type": "object",
            "properties": {
                "oldPassword": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "TwoFactorState": {
            "type": "object",
            "properties": {
                "suspended": {
                    "type": "boolean"
                },
                "suspendedUntil": {
                    "type": "string",
                    "format": "date-time"
                },
                "enrollmentState": {
                    "type": "string",
                    "enum": [
                        "ENROLLED",
                        "NOT_ENROLLED",
                        "UNKNOWN"
                    ]
                },
                "enrollmentUrl": {
                    "type": "string"
                }
            }
        },
        "PasswordResetParams": {
            "type": "object",
            "properties": {
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "LicenseUsageResponse": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "CounterResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32"
                },
                "displayString": {
                    "type": "string"
                },
                "exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DsException"
                    }
                },
                "counterObjects": {
                    "$ref": "#/definitions/ListLicenseCounterObject"
                },
                "version": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "LicenseCounterObject": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "unitName": {
                    "type": "string"
                },
                "unitCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "unitUsage": {
                    "type": "integer",
                    "format": "int64"
                },
                "userType": {
                    "type": "string"
                },
                "userTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ListLicenseCounterObject": {
            "type": "object",
            "properties": {
                "counterObjectList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LicenseCounterObject"
                    }
                }
            }
        },
        "LicenseBasicObject": {
            "type": "object",
            "properties": {
                "_oTLicenseType": {
                    "type": "string"
                },
                "_oTLicenseResource": {
                    "type": "string"
                },
                "_oTLicenseResourceName": {
                    "type": "string"
                },
                "_oTLicenseProduct": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "description": "The object's attributes",
                    "items": {
                        "$ref": "#/definitions/ObjectAttribute"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The object ID"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string",
                    "description": "The object's DN"
                },
                "name": {
                    "type": "string",
                    "description": "The object name"
                }
            }
        },
        "LicenseResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32"
                },
                "displayString": {
                    "type": "string"
                },
                "exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DsException"
                    }
                },
                "licenseObjects": {
                    "$ref": "#/definitions/ListLicensesResult"
                },
                "fingerprint": {
                    "type": "string"
                },
                "resourceID": {
                    "type": "string"
                },
                "nextPageCookie": {
                    "type": "string"
                },
                "usageCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "empty": {
                    "type": "boolean"
                },
                "version": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ListLicensesResult": {
            "type": "object",
            "properties": {
                "_licenses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LicenseBasicObject"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "requestedPageSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "actualPageSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of returned objects. Check nextPageCookie, if there is more data."
                },
                "nextPageCookie": {
                    "type": "array",
                    "description": "Cookie to be used in next request. Null, if there is no more data.",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            }
        },
        "LicenseUsageObjectFloating": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "The user name to attribute this usage"
                },
                "counter": {
                    "type": "string",
                    "description": "The name of the usage being consumed"
                },
                "increment": {
                    "type": "integer",
                    "format": "int64",
                    "description": "An increment value (mutually exclusive of total)"
                },
                "total": {
                    "type": "integer",
                    "format": "int64",
                    "description": "A new total usage value (must be greater than previous post)"
                },
                "quota": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The quota request (when controlled by application)"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the instance that consumed the usage"
                },
                "userType": {
                    "type": "string",
                    "description": "The user type to pre-set for a first usage call (must be valid based on license)"
                },
                "comments": {
                    "type": "string",
                    "description": "The comments of the instance that consumed the usage. Can only contain upper and lower case ASCII letters, numbers, spaces and dashes."
                },
                "leaseType": {
                    "type": "string",
                    "enum": [
                        "PER_INSTANCE",
                        "PER_USER",
                        "PER_USER_PER_INSTANCE"
                    ]
                },
                "callerDateTime": {
                    "type": "string",
                    "description": "The date/time of the caller (yyyy/MM/dd HH:mm:ss) to detect when there are time zone differences between the server and the caller"
                },
                "occurrence": {
                    "type": "string"
                }
            }
        },
        "LicenseUsageObject": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "The user name to attribute this usage"
                },
                "counter": {
                    "type": "string",
                    "description": "The name of the usage being consumed"
                },
                "increment": {
                    "type": "integer",
                    "format": "int64",
                    "description": "An increment value (mutually exclusive of total)"
                },
                "total": {
                    "type": "integer",
                    "format": "int64",
                    "description": "A new total usage value (must be greater than previous post)"
                },
                "quota": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The quota request (when controlled by application)"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the instance that consumed the usage"
                },
                "userType": {
                    "type": "string",
                    "description": "The user type to pre-set for a first usage call (must be valid based on license)"
                },
                "comments": {
                    "type": "string",
                    "description": "The comments of the instance that consumed the usage. Can only contain upper and lower case ASCII letters, numbers, spaces and dashes."
                }
            }
        },
        "LicenseReport": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "unitsInUse": {
                    "type": "integer",
                    "format": "int64"
                },
                "version": {
                    "type": "string"
                },
                "expiryDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "unitDuration": {
                    "type": "string"
                },
                "unitDur": {
                    "type": "string"
                },
                "inputDate": {
                    "type": "string"
                },
                "product": {
                    "type": "string"
                },
                "unitsTotal": {
                    "type": "integer",
                    "format": "int64"
                },
                "unitMeasurement": {
                    "type": "string"
                },
                "cumulative": {
                    "type": "boolean"
                },
                "userBased": {
                    "type": "boolean"
                },
                "lastAccessDate": {
                    "type": "string"
                },
                "extraInfo": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "fileContent": {
                    "type": "string"
                },
                "reports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LicenseRow"
                    }
                }
            }
        },
        "LicenseReportResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32"
                },
                "displayString": {
                    "type": "string"
                },
                "exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DsException"
                    }
                },
                "generatedDate": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "endDateDisp": {
                    "type": "string"
                },
                "hostName": {
                    "type": "string"
                },
                "dnsHostName": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                },
                "reports": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/LicenseReport"
                    }
                },
                "textReport": {
                    "type": "string"
                },
                "version": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "LicenseRow": {
            "type": "object",
            "properties": {
                "startDate": {
                    "type": "string"
                },
                "unitValue": {
                    "type": "integer",
                    "format": "int64"
                },
                "tamperingDetected": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "LicenseeBasicObject": {
            "type": "object",
            "properties": {
                "values": {
                    "type": "array",
                    "description": "The object's attributes",
                    "items": {
                        "$ref": "#/definitions/ObjectAttribute"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The object ID"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string",
                    "description": "The object's DN"
                },
                "name": {
                    "type": "string",
                    "description": "The object name"
                }
            }
        },
        "UserGroupResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32"
                },
                "displayString": {
                    "type": "string"
                },
                "exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DsException"
                    }
                },
                "retValue": {
                    "type": "integer",
                    "format": "int32"
                },
                "listGroupsResults": {
                    "$ref": "#/definitions/ListGroupsResult"
                },
                "listUsersResults": {
                    "$ref": "#/definitions/ListUsersResult"
                },
                "listUserPartitionResult": {
                    "$ref": "#/definitions/ListUserPartitionsResult"
                },
                "version": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        }
    }
}