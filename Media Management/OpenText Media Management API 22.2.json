{
    "openapi": "3.0.1",
    "info": {
        "title": "OpenText Media Management API",
        "description": "The Media Management REST API is an API that follows the REST architectural style and that generally runs over HTTP. It uses the HTTP methods GET, POST, DELETE, PUT and PATCH to execute operations in Media Management. The currently supported data interchange format between client and all REST endpoints is JSON. In many cases, JSON structures are used for specifying REST Services parameter values for resources defined in Media Management API. So, you should pass parameter values as JSON structures only. Other formats are not supported.<p> Only the current version (v6) and the previous version of the REST endpoints are supported. </p><p> Please click the implementation notes below for further clarification on the listed topics. </p><b>Implementation Notes</b><details><summary>Authentication</summary> <p>Below are the different mechanisms to authenticate with OTMM using Media Management REST API</p><b>Basic: </b>Invoke POST method on /v6/sessions resource with user credentials. The OTMM will validate user credentials and creates a session.</br></br><b>Remote User Header: </b>To configure remote user header, please refer to section \"Configuring Remote User Header\" in OpenText Media Management Integration guide. You should invoke GET method on /v6/sessions resource.</br></br><b>Single Sign-On Resolver: </b> To configure, please refer to section \"Configuring Single Sign-On Resolver\" in OpenText Media Management Integration guide. You should invoke GET method on /v6/sessions resource.</br></br><b>OAuth 2.0 Token: </b> To configure, please refer to section \"Using OAuth2.0 to Access OTMM REST APIs\" in OpenText Media Management Integration guide. </br><p>For all the subsequent requests to OTMM with REST Services.</br>1. Set JSESSIONID cookie in all the HTTP requests. (or)</br>2. Set user message digest as a header(otmmauthtoken) in all the HTTP requests. You can find the user message digest in the response of the /v6/sessions request. </br><code><font color=blue>Eg: otmmauthtoken: 3dba7a9383964e759b3427378d338febc4dc0485</font></code> . (or)</br>3. Set OAuth2.0 access token as a Authorization header in all the HTTP requests.<code><font color=blue> Eg: Authorization: Basic [access_token]</font></code><p> The following code snippet demonstrates how to perform basic authentication to OTMM that uses Jersey Client API to communicate with REST services.</p><pre><code>Client client = ClientBuilder.newClient();</br>client.register(MOXyContextResolver.class);</br>client.register(JsonMoxyConfigurationContextResolver.class);</br>client.register(MultiPartFeature.class);</br>rootTarget = client.target(\"http://<span/>localhost:11090/otmmapi\");</br></br>Form form = new Form();</br>form.param(\"username\", username);</br>form.param(\"password\", password);</br></br>// Making POST request on session resource to authenticate</br>Response response = rootTarget.path(\"/v6/sessions\").request().post(Entity.entity(form, MediaType.APPLICATION_FORM_URLENCODED), Response.class);</br></br> Map<String, NewCookie> cookieMap = response.getCookies();</br>// Getting jsessionId from cookie</br>String <b>jsessionId</b> = cookieMap.get(\"JSESSIONID\");</br>SessionRepresentation sessionRepresentation = response.readEntity(SessionRepresentation.class);</br>// Getting user authentication token from response</br>string <b>otmmauthtoken</b> = sessionRepresentation.getSession().getMessageDigest();</br></br></code></pre>Below is code snippet to logout from OTMM</br><pre><code>// How to set JSESSIONID cookie into request</br>rootTarget.path(\"/v6/sessions\").request().cookie(<b>jsessionId</b>).delete();</br></br>// How to set otmm authentication token into request </br>rootTarget.path(\"/v6/sessions\").request().header(\"otmmauthtoken\",<b>otmmauthtoken</b>).delete()</br>    </code></pre></details><details><summary>REST API Java client library</summary><p>The Media Management REST API Java client library contains representation objects which you can use in your Java based REST client application. To use, all you need to do is add <code><font color=blue>otmm-rest-representations.jar</font></code> and the dependencies listed below to your application CLASSPATH. The <code><font color=blue>otmm-rest-representations.jar</font></code> file is located in  ear/artesia/restapi/WEB-INF/lib directory incase of tomee and ear\\artesia.ear\\restapi.war\\WEB-INF\\lib directory in case of jboss in Media Management installation.</br></br>Here is the list of other jar files required to use Media Management REST API Java client <code><font color=blue>TEAMS-sdk.jar, TEAMS-common.jar, ot-transfer-scheme.jar, commons-lang-2.4.jar, commons-logging-1.2.jar, commons-io-2.8.0.jar and commons-beanutils-1.9.4.jar</font></code>.The TEAMS-sdk.jar, ot-transfer-scheme.jar and TEAMS-common.jar are located in deploy/artesia directory and all apache commons jars are located in deploy/commons directory in Media Management installation.</br></br>The Media Management REST API Client Library Javadocs are available in the OpenText Media Management Programmer's guide\r\n> NOTE:\r\n>> fields, methods, and classes that are not included in the javadocs are not part of the publicly supported API and should be avoided. These are temporary items used internally by Media Management \r\n applications and may be removed or modified at any time.\r\n</details><details><summary>Element and attribute names</summary> <p>The Media Manager REST API uses Snake Case notation for element and attribute names. In Snake case multiple words in an identifier are separated by an underscore. For example let us say that there is a&nbsp;resource abstraction called WildAnimal&nbsp;with an attribute \"speciesIdentifier\". In a REST response, the abstraction is&nbsp;referred&nbsp;to&nbsp;as \"wild_animal\" with a property \"species_identifier\". Therefore there has to be a conversion from Camel Case (used in Java abstractions) to Snake Case when a REST request payload is constructed. This can be achieved by using a custom JAXB provider implementation like the one provided by Eclipse Link Moxy where in a custom XMLNameTransformer can be registered that maps camel case to snake case.</p>While there are JAXB implementations that support snake case conversions in JSON marshalling and un-marshalling, one can leverage the Media Management's snake case conversion working out of Eclipse Link MOXy JAXB provider. If your application uses MOXy library for JSON binding you can use this implementation. To use, you need to register <code><font color=blue>com.opentext.mediamanager.restapi.util.MOXyContextResolver, com.opentext.mediamanager.restapi.util.JsonMoxyConfigurationContextResolver</font></code> and <code><font color=blue>MoxyJsonFeature</font></code> classes in client application. </br></br>The following code snippet demonstrates how to register MOXy providers in the client application that uses Jersey Client API to communicate with REST services.</br><pre><code>Client client = ClientBuilder.newClient();</br>client.register(MoxyJsonFeature.class);</br>client.register(MOXyContextResolver.class);</br>client.register(JsonMoxyConfigurationContextResolver.class);</br></code></pre>You need to add <code><font color=blue>org.eclipse.persistence.moxy-2.7.6.jar, org.eclipse.persistence.antlr-2.7.6.jar, org.eclipse.persistence.asm-2.7.6.jar and org.eclipse.persistence.core-2.7.6.jar</font></code> in your application CLASSPATH to use Eclipse Link MOXy. All these jar files are located in ear/artesia.ear/war/restapi.war/WEB-INF/lib directory in the Media Management installation.</br></br></details><details><summary>Required request headers</summary> <p>When invoking a REST API, you need to include either one of the below headers in each request. If the header is not available, then the REST API requests made to the OTMM server are rejected with bad request (HTTP 400) error. </br><pre><code>Header Name: \"X-Requested-By\"</br>Header Value: [Authenticated OTMM Session ID]</code></pre>(OR) </br><pre><code>Header Name: \"otmmauthtoken\" </br>Header Value: [MessageDigest]</code></pre>(OR)</br><pre><code>Header Name: \"Authorization\" </br>Header Value: Basic [access_token]</code></pre>Sample code snippet</br><pre><code>Client client = ClientBuilder.newClient();</brclient.register(MoxyJsonFeature.class);</br>client.register(MOXyContextResolver.class);</br>client.register(JsonMoxyConfigurationContextResolver.class);</br>WebTarget target = client.target(URI.create(\"http://example.com/otmmapi/v2\"));</br>Invocation.Builder builder = target.request();</br></br>// Adding CSRF Header - Add any one of the below header </br></br>builder.header(\"X-Requested-By\", \"1233576834\"); (OR)</br></br>builder.header(\"otmmauthtoken\", \"3dba7a9383964e759b3427378d338febc4dc0485\"); (OR)</br></br>builder.header(\"Authorization\", \"Basic eyJraWQiOiI0ZTQ1MDIxYjFkMDM1YzBhNjQzNzEwMzg5NWRmNWU0MWEzYzA0MDljIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiI0MWU0MGEyYi02NmVkLTRlMzctOWRhYy1lMjg1NTUxZTA3ZmQiLCJzY3AiOltdLCJkbXAiOnt9LCJzYXQiOjE1OTg0Mzc1MTEsImlzcyI6Imh0dHA6Ly8xMC45Ni4xMzMuNTI6MTgwODAvb3Rkc3dzIiwiZ3J0IjoiY2xpZW50X2NyZWRlbnRpYWxzIiwidHlwIjoiYWNjZXNzX3Rva2VuIiwicGlkIjoiT0F1dGhDbGllbnRzIiwicmlkIjp7fSwidGlkIjoiIiwic2lkIjoiOTdiMGI4OWYtYjFiNy00MTcyLTgxMzEtMWY2wermZDI1MGYwIiwidWlkIjoiY2xpZW50MUBPQXV0aENsaWVudHMiLCJ1bm0iOiJjbGllbnQxIiwibmFtZSI6IiIsImV4cCI6MTU5ODQ0NDcxMSwiaWF0IjoxNTk4NDM3NTExLCJqdGkiOiJlYTViM2IyZS05ZjAyLTRhMGUtYWExMi1lMjFmMDZlZWMzNDciLCJjaWQiOiJjbGllbnQxIn0.CrsITY7S5ml5kBpFEfvPTxp3Y95Sjn6_NCSf-iMZbaGHpbt-vfHmKcODatESspBHf47wgxtY4q1vqqJhHm3eYkJn6zhqy0g5m71AUQ7OgWJkC_cjfNdB05kiTqOKHcHX34XWS7y4qFjBdkHN9cnRFugvKKwerS-qXRTbzRoZCDVZ2AjyFDUnly-Y9ORt_ZaWF6Ffgccby_6zCMoxGOwzTE0vrFKLuUigdZk80BzhowRwLia_GJX_d404gzx_sEJzqaPVs8Mv89m1M0Ip8fju9W8X1N9yxeKYXaogEEVPzdyG2tV3fV6VGOgVDMtlgc8uhzuk23NaKUbVAAch2BNvVg\");</br></code></pre></details><details><summary>Callback URL</summary> <p>The callback URL is the url that Media Management invokes after the job completion. All the Import/Export REST APIs contains \"callbackurl\" as a query parameter. The consumers can provide a HTTP(s) endpoint to the \"callbackurl\" parameter, which can be invoked by the Media Management at the completion of Import,Export,Check-in and all the other Media Management jobs. When providing the callback url as part of the request,consumers needs to ensure guidelines below are followed.</br><p>The value provided for the \"callbackurl\" parameter should be in the format.</p><p>callbackurl=<font color=blue>URL_withParms&callbackmethod=POST/GET</font></p><ul><li><p>If the value for callbackMethod is set to \"GET\", then a GET request is made to notify the consumer after the job completion. Media Management will send the details below as request parameters to the callback.</p></li><ol><li> Job Id </li><li> Job Status</li></ol><li><p>If the value for callbackMethod is set to \"POST\", then a POST request is made to notify the consumer after the job completion. Media Management will send the details below as request parameters to the callback.</p></li><ol><li>List of assetIds</li><li>Job Id</li><li>Job Status</li><li>Error detail(s) if any during the job execution</li></ol><li><p>If request params passed in the URL are prefixed with \"header_\", then during the callback, the params prefixed with \"header_\" will be send as part of the request headers.Other request params passed are sent as is during the callback.</p></li><p><b>Example:</b> Consider the value of the callbackurl as <font color=blue>http://[hostname]:[port]?parameter1=value1&amp;parameter2=value2&amp;header_parameter3=value3&amp;callbackmethod=POST </font><ol><li>parameter1, and parameter2 will be sent as request parameters during the callback.</li><li>parameter3 will be sent as request header during the callback.</li></ol><li><p> The above URL passed as part of the request should be encoded by the caller. Media Management will decode the URL and make the callback once the job is complete.</p></li><li><p>If the consumer intends to add any authentication check to callback end point, it can be achieved by implementing the \"com.opentext.job.notification.JobCallbackNotifier\" interface. The following steps need to be followed when you are using a custom implementation for the callback</p></li><pre><code>public interface JobCallbackNotifier</br>{</br>    /**</br>    * @param url</br>    * callbackurl which needs to be notified</br>    */</br>    public void callback(String url) throws BaseTeamsException;</br>}</br></code></pre><ol><li>You need to create a custom system setting under [JOB\\CONFIG] component. The value for the custom system setting should be the fully qualified custom implementation class name.<li>The callbackurl passed in the REST API request should include \"callbackauthscheme\" and \"callbackclientId\" as the request parameters.</li><li>The value for the callbackauthscheme parameter should be set to \"CUSTOM\"</li><li>The value for the callbackclientId parameter should be set to custom setting name which is created in step 1</li></ol><p><b>Example: </b> callbackurl will be <font color=blue>http://[hostname]:[port]?parameter1=value1&amp;parameter2=value2&amp;header_parameter3=value3&amp;callbackmethod=POST</br>&amp;callbackauthscheme=CUSTOM&amp;callbackclientId=customSetting </font><ul><li>\r\n\"customSetting\" is the name of system setting which is created under [JOB\\CONFIG] component.</li></ul></ul></details><details><summary>Error responses</summary> <p>The response body returned for all unsuccesful REST API calls is an object with the format</p> <pre><code>{</br>    \"exception_body\": {</br>        \"http_response_code\": int32,</br>        \"message\": \"string\",</br>        \"debug_message\": \"string\",</br>        \"failed_ids\": [</br>            \"string\"</br>        ],</br>        \"error_code\": int64</br>    }</br>}</br></code></pre><p>Properties returned in error response:</p><dl>  <dt>http_response_code</dt>  <dd>The HTTP response status code.</dd>  <dt>message</dt>  <dd>A localized error message.</dd>  <dt>debug_message</dt>  <dd>An additional informational message. Not localized.</dd>  <dt>failed_ids</dt>  <dd>Where applicable, the ids of the units that failed. For example, if an exception occurred while saving metadata for assets, the ids of the failed units would likely represent the ids of the assets that could not have the metadata saved. Not populated for all endpoint or HTTP response status codes.</dd>  <dt>error_code</dt>  <dd>The internal Media Management error code.</dd></dl></details>",
        "contact": {
            "name": "Opentext Support",
            "url": "http://support.opentext.com",
            "email": "support@opentext.com"
        },
        "version": "v6"
    },
    "servers": [
        {
            "url": "/otmmapi",
            "variables": {}
        }
    ],
    "tags": [
        {
            "name": "assets",
            "description": "Operations on Assets"
        },
        {
            "name": "auditactivity",
            "description": "Operations on Audit Tab"
        },
        {
            "name": "brandings",
            "description": "Operations on Brandings"
        },
        {
            "name": "cascadinggroups",
            "description": "Operations on Cascading Groups"
        },
        {
            "name": "collections",
            "description": "Operations on Collections"
        },
        {
            "name": "colorfilters",
            "description": "Operations on Color Filters"
        },
        {
            "name": "exports",
            "description": "Operations on export schedules"
        },
        {
            "name": "facetconfigurations",
            "description": "Operations on Facet Configurations"
        },
        {
            "name": "featurepermissions",
            "description": "Operations on feature permissions"
        },
        {
            "name": "folders",
            "description": "Operations on Folders"
        },
        {
            "name": "foldertypes",
            "description": "Operations on Folder Types"
        },
        {
            "name": "hightail",
            "description": "Operations used by the Hightail Integration"
        },
        {
            "name": "importtemplates",
            "description": "Operations on Property Templates"
        },
        {
            "name": "integrationservices",
            "description": "Operations on integrations service"
        },
        {
            "name": "intervalprofiles",
            "description": "Operations on Interval Profiles"
        },
        {
            "name": "jobs",
            "description": "Operations on user jobs"
        },
        {
            "name": "linktypes",
            "description": "Operations on Link Types"
        },
        {
            "name": "lookupdomains",
            "description": "Operations on Lookup Domains"
        },
        {
            "name": "metadatafieldgroups",
            "description": "Operations on Metadata Field Groups"
        },
        {
            "name": "metadatafields",
            "description": "Operations on Metadata Fields"
        },
        {
            "name": "metadatalocales",
            "description": "Operations on Metadata Locales"
        },
        {
            "name": "metadatamodels",
            "description": "Operations on Metadata Models"
        },
        {
            "name": "preferences",
            "description": "Operations on User Preferences"
        },
        {
            "name": "renditions",
            "description": "Operations on Renditions"
        },
        {
            "name": "savedsearches",
            "description": "Operations on Saved Searches"
        },
        {
            "name": "search",
            "description": "Perform a search"
        },
        {
            "name": "searchconfigurations",
            "description": "Operations on Search Configurations"
        },
        {
            "name": "searchoperators",
            "description": "Operations on Search Operators"
        },
        {
            "name": "searchscopes",
            "description": "Operations on Search Scopes"
        },
        {
            "name": "securitypolicies",
            "description": "Operations on Security Policies"
        },
        {
            "name": "sessions",
            "description": "Operations on Sessions"
        },
        {
            "name": "systemannouncements",
            "description": "Operations on system announcements"
        },
        {
            "name": "systemdetails",
            "description": "Operations to retreive system details"
        },
        {
            "name": "systemsettings",
            "description": "Operations to retrieve system settings"
        },
        {
            "name": "tasks",
            "description": "Operations on user tasks"
        },
        {
            "name": "transferschemes",
            "description": "Operations on server transfer schemes"
        },
        {
            "name": "transformers",
            "description": "Operations on transformers"
        },
        {
            "name": "usageapplications",
            "description": "Operations on usage applications"
        },
        {
            "name": "usagecategories",
            "description": "Operations on usage categories"
        },
        {
            "name": "usergroups",
            "description": "Operations on UserGroups"
        },
        {
            "name": "users",
            "description": "Operations on Users"
        },
        {
            "name": "usertypes",
            "description": "Operations on User Type"
        },
        {
            "name": "videos",
            "description": "Operations on Video Assets"
        }
    ],
    "paths": {
        "/v6/assets": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve assets based on the provided selection context.",
                "description": "Retrieve assets based on the provided selection context. The request needs the pagination parameters to be passed. The asset collection will also include summary about the collection. To load only collection summary pass limit as 0.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p><p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "getAssets",
                "parameters": [
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "selection_context",
                        "in": "query",
                        "description": "The selection context for the assets. ",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/SelectionContextParam"
                        }
                    },
                    {
                        "name": "asset_id_container_path_map",
                        "in": "query",
                        "description": "Map of asset id and container path to expand. The given path will be expanded to have children of path elements.",
                        "schema": {
                            "$ref": "#/components/schemas/AssetIdToPathMapParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "description": "Attribute to group and count the assets in a asset collection",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "content_type",
                                "metadata_model",
                                "data_type"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "assets"
                ],
                "summary": "Create Assets",
                "description": "Create Asset(s) with the specified asset representation or import template. This should be a multipart/form-data request. Please use the utf-8 charset encoding so that any unicode characters in names of the attached files are interpreted properly. The operation creates a job and returns the job handle. Using the job id in job handle, you can query the 'jobs' resource for completion status.<p>If only an asset representation is specified the user is required to have Apply/Remove Security Policy permission for all security policies assigned. If only an import template is specified the user is not required to have Apply/Remove Security Policy permission for the security policies inherited from the import template. If both an asset representation and an import template are specified the metadata, security policies, and categories populated into the assets will be determined by the asset representation, but the user will only be required to have Apply/Remove Security Policy permission for the security policies not present in the import template.",
                "operationId": "createAsset",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "asset_representation": {
                                        "$ref": "#/components/schemas/AssetRepresentation"
                                    },
                                    "import_template_id": {
                                        "type": "string",
                                        "description": "Id of the import template to use"
                                    },
                                    "parent_folder_id": {
                                        "type": "string",
                                        "description": "The parent folder id"
                                    },
                                    "review_job_id": {
                                        "type": "string",
                                        "description": "The review job id"
                                    },
                                    "review_task_id": {
                                        "type": "string",
                                        "description": "The review job task id"
                                    },
                                    "job_id": {
                                        "type": "string",
                                        "description": "The id of the job from where import is initiated."
                                    },
                                    "task_id": {
                                        "type": "string",
                                        "description": "The id of the task from where import is initiated."
                                    },
                                    "no_content": {
                                        "type": "boolean",
                                        "description": "Optional flag that indicates whether this asset has content or not. Set to true if the asset is not associated with content and false if associated with content. If set to true then any attached files and upload manifest will be ignored.",
                                        "default": false
                                    },
                                    "manifest": {
                                        "$ref": "#/components/schemas/UploadManifestParam"
                                    },
                                    "files": {
                                        "type": "array",
                                        "description": "The file attachments that form the physical content of the asset. Each of the attached files should be bound with the form parameter name 'files'",
                                        "items": {
                                            "$ref": "#/components/schemas/FormDataBodyPart"
                                        }
                                    },
                                    "job_name": {
                                        "type": "string",
                                        "description": "User defined name of the job. If this parameter is not set, the default value is job class name."
                                    },
                                    "job_type": {
                                        "type": "string",
                                        "description": "Name of the job to be triggered on the server. If this parameter is not set, the default value will be picked from settings. This parameter has highest precedence while deciding the job to trigger."
                                    },
                                    "callback_url": {
                                        "type": "string",
                                        "description": "Callback URL in the encoded form, which needs to be notified once the job is complete. For more information on the format of callbackURl , refer to integration guide."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "The request has been accepted for processing. The returned job handle can be used to check for completion status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobHandle"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "assets"
                ],
                "summary": "Update an Asset",
                "description": "Update metadata and/or reassign applicable security policies and/or associated categories for the specified Asset.<br/>For metadata fields, only the type, id and value need to be specified.</br>The asset must be locked by the user who is performing the edit operation.</br>If the value for lockStrategy parameter passed is optimistic, then the user doesn't need to lock the asset prior to calling.The API will obtain the lock internally and perform the asset update",
                "operationId": "updateAssets",
                "parameters": [],
                "requestBody": {
                    "description": "An uploaded file to serve as content of asset renditions",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkEditRequestParam"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobHandle"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A metadata field id / lookup domain id is invalid"
                    },
                    "403": {
                        "description": "Permission denied to update given asset"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/duplicate": {
            "post": {
                "tags": [
                    "assets"
                ],
                "summary": "Duplicate the given set of assets.",
                "description": "Duplicate assets based on the selection context to the given destination folder.\n For duplicating the hierarchy of folders, use the depth parameter. Using selection context to expand will flatten out the asset structure and duplicate it.\n Using selection context parameter to duplicate hierarchy of asset will result in validation error.<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "duplicateAssets",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "asset_copy_request",
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "destination_folder_id": {
                                        "type": "string",
                                        "description": "Destination folder id to move, copy or duplicate assets"
                                    },
                                    "position_type": {
                                        "type": "string",
                                        "description": "Method used to determine the position of the new children in the Folder",
                                        "default": "absolute",
                                        "enum": [
                                            "absolute",
                                            "relative"
                                        ]
                                    },
                                    "position": {
                                        "type": "string",
                                        "description": "If <b>position_type</b> is <b>absolute</b> the numeric position where the new children should be inserted into the existing children. If not specified the new children will be position after all existing children. If <b>position_type</b> is <b>relative</b> then you must specify either <b>before</b> or <b>after</b> to determine where the new children are inserted relative to the existing child identified by the <b>relative_asset_id</b> parameter."
                                    },
                                    "relative_asset_id": {
                                        "type": "string",
                                        "description": "If <b>position_type</b> is <b>relative</b> then this parameter must be set to the asset id of the existing child relative to which new children should be added or moved. If <b>position_type</b> is <b>absolute</b> this parameter is ignored"
                                    },
                                    "asset_copy_request": {
                                        "$ref": "#/components/schemas/AssetCopyRequestParam"
                                    },
                                    "depth": {
                                        "type": "string",
                                        "description": "Depth to traverse when duplicating containers. Less than zero means traverse all the way down.",
                                        "default": "-1"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/links": {
            "post": {
                "tags": [
                    "assets"
                ],
                "summary": "Create one or more links between assets.",
                "description": "Create one or more links between assets.",
                "operationId": "createLinksForAssets",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "asset_ids",
                                    "link_list_param"
                                ],
                                "type": "object",
                                "properties": {
                                    "asset_ids": {
                                        "type": "string",
                                        "description": "Comma separated list of source asset ids"
                                    },
                                    "link_list_param": {
                                        "$ref": "#/components/schemas/LinkListParam"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "assets"
                ],
                "summary": "Remove the links between assets",
                "description": "Remove the links between assets",
                "operationId": "deleteLinks",
                "parameters": [
                    {
                        "name": "delete_links_param",
                        "in": "query",
                        "description": "Delete links parameter holding information about mode of removing the links between the assets and assetIds.AssetIds specified must be source of given links",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/DeleteLinksParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/nofolders": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve all orphan assets",
                "description": "Retrieve all orphan assets.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getOrphanedAssets",
                "parameters": [
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/nofolders/sortoptions": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve all orphan assets sort options",
                "description": "Retrieves all sort options to sortorphan assets of the logged in user.",
                "operationId": "getOrphanAssetSortOptions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            }
        },
        "/v6/assets/recent": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve all recent Asset",
                "description": "Retrieve all recently accessed assets of the logged in user.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getRecentAccessAssets",
                "parameters": [
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/recent/sortoptions": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve all recent assets sort options",
                "description": "Retrieves all sort options to sort recently accessed assets of the logged in user.",
                "operationId": "getSortOptions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            }
        },
        "/v6/assets/state": {
            "put": {
                "tags": [
                    "assets"
                ],
                "summary": "Lock or unlock or check-out or cancel check-out or delete or un-delete of an asset",
                "description": "Lock or unlock or check-out or cancel check-out or delete or un-delete of an asset<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "updateAssetsState",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "action",
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "asset_state_options": {
                                        "$ref": "#/components/schemas/AssetStateOptionsParam"
                                    },
                                    "action": {
                                        "type": "string",
                                        "description": "Asset 'state change' action; allowed values are check_out, cancel_check_out, lock, unlock, delete, un_delete",
                                        "enum": [
                                            "check_out",
                                            "cancel_check_out",
                                            "lock",
                                            "unlock",
                                            "delete",
                                            "un_delete",
                                            "expire"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/subscriptions": {
            "post": {
                "tags": [
                    "assets"
                ],
                "summary": "subscribe of assets",
                "description": "subscribe of assets<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "subscribeToAssets",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "after": {
                                        "type": "string",
                                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection"
                                    },
                                    "limit": {
                                        "type": "string",
                                        "description": "Maximum number of items to retrieve."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "assets"
                ],
                "summary": "un-subscribe of assets",
                "description": "un-subscribe of assets<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "unsubscribeToAssets",
                "parameters": [
                    {
                        "name": "selection_context",
                        "in": "query",
                        "description": "The selection context for the assets. ",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/SelectionContextParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve an Asset",
                "description": "Retrieve an Asset by asset id.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getAsset",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "asset_id_container_path_map",
                        "in": "query",
                        "description": "Map of asset id and container path to expand. The given path will be expanded to have children of path elements.",
                        "schema": {
                            "$ref": "#/components/schemas/AssetIdToPathMapParam"
                        }
                    },
                    {
                        "name": "collection_id",
                        "in": "query",
                        "description": "A comma separated list of Collection Ids",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "assets"
                ],
                "summary": "Update an Asset",
                "description": "Update metadata and/or reassign applicable security policies and/or associated categories for the specified Asset.<br/>For metadata fields, only the type, id and value need to be specified.</br>The asset must be locked by the user who is performing the edit operation.</br>If the value for lockStrategy parameter passed is optimistic, then the user doesn't need to lock the asset prior to calling.The API will obtain the lock internally and perform the asset update",
                "operationId": "updateAsset",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lock_strategy",
                        "in": "query",
                        "description": "Lock Strategy: allowed values are optimistic,default. ",
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "optimistic",
                                "default"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representation of the EditedAsset object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditedAsset"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A metadata field id / lookup domain id is invalid"
                    },
                    "403": {
                        "description": "Permission denied to update given asset"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/collections": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve the collections associated for the given asset id.",
                "description": "Retrieve the collections associated for the given asset id.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getAssetCollections",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/contents": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve the content or a rendition of an Asset",
                "description": "Retrieve the content or a rendition for the specified Asset. If no <b>rendition_type</b> parameter is specified the content of the asset will be returned.",
                "operationId": "getRenditions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collection_id",
                        "in": "query",
                        "description": "Collection Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rendition_type",
                        "in": "query",
                        "description": "The rendition type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "thumbnail",
                                "preview",
                                "pdf_preview",
                                "mac_resource",
                                "default_thumbnail",
                                "default_preview",
                                "video_rollover",
                                "3d_preview"
                            ]
                        }
                    },
                    {
                        "name": "disposition",
                        "in": "query",
                        "description": "The disposition type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "attachment"
                            ]
                        }
                    },
                    {
                        "name": "enable_caching",
                        "in": "query",
                        "description": "Is caching enabled for this request",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "user-agent",
                        "in": "header",
                        "description": "User-Agent HTTP header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "format": "java.io.InputStream"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "No rendition of given rendition type for the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "assets"
                ],
                "summary": "Add Or Update Renditions of an Asset",
                "description": "Add Or Update Renditions of an Asset. Supported Rendtion types are Thumbnail or Preview. The content image supported as a multipart/form-data format. If the rendition sent other than png file, the file name with extension must be set to FormDataBodyPart.",
                "operationId": "addRenditions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "rendition_type"
                                ],
                                "type": "object",
                                "properties": {
                                    "rendition_type": {
                                        "type": "string",
                                        "description": "The rendition type",
                                        "enum": [
                                            "thumbnail",
                                            "preview",
                                            "pdf_preview",
                                            "mac_resource"
                                        ]
                                    },
                                    "job_name": {
                                        "type": "string",
                                        "description": "User defined name of the job. If this parameter is not set, the default value is job class name."
                                    },
                                    "file": {
                                        "$ref": "#/components/schemas/FormDataBodyPart"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/contents/spin360": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve spin360 content of an Asset",
                "description": "Retrieve spin360 content of an Asset by asset id.",
                "operationId": "getSpin360Content",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Spin360ContentRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/duplicate": {
            "post": {
                "tags": [
                    "assets"
                ],
                "summary": "Duplicate the given asset/folder.",
                "description": "Duplicate the given asset/folder to the destination folder.",
                "operationId": "duplicateAsset",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "asset_copy_request"
                                ],
                                "type": "object",
                                "properties": {
                                    "destination_folder_id": {
                                        "type": "string",
                                        "description": "Destination folder id to move, copy or duplicate assets"
                                    },
                                    "position_type": {
                                        "type": "string",
                                        "description": "Method used to determine the position of the new children in the Folder",
                                        "default": "absolute",
                                        "enum": [
                                            "absolute",
                                            "relative"
                                        ]
                                    },
                                    "position": {
                                        "type": "string",
                                        "description": "If <b>position_type</b> is <b>absolute</b> the numeric position where the new children should be inserted into the existing children. If not specified the new children will be position after all existing children. If <b>position_type</b> is <b>relative</b> then you must specify either <b>before</b> or <b>after</b> to determine where the new children are inserted relative to the existing child identified by the <b>relative_asset_id</b> parameter."
                                    },
                                    "relative_asset_id": {
                                        "type": "string",
                                        "description": "If <b>position_type</b> is <b>relative</b> then this parameter must be set to the asset id of the existing child relative to which new children should be added or moved. If <b>position_type</b> is <b>absolute</b> this parameter is ignored"
                                    },
                                    "asset_copy_request": {
                                        "$ref": "#/components/schemas/AssetCopyRequestParam"
                                    },
                                    "depth": {
                                        "type": "string",
                                        "description": "Depth to traverse when duplicating containers. Less than zero means traverse all the way down.",
                                        "default": "-1"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/parents": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve the parents for given asset id.",
                "description": "Retrieve the parents for given asset id.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getParentFolders",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "assets"
                ],
                "summary": "Remove list of specified parents for Asset Id.",
                "description": "Remove parents which are mentioned in comma separated parentIds string for current asset resource.",
                "operationId": "removeParents",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "parent_ids",
                                    "type"
                                ],
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "Type of operation.",
                                        "enum": [
                                            "remove"
                                        ]
                                    },
                                    "parent_ids": {
                                        "type": "string",
                                        "description": "Comma separated list of the parent's ids to be detached"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParentsOperationRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/relatedassets": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve related assets of an asset",
                "description": "Retrieve related assets of an asset.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getRelationShips",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "link_type_ids",
                        "in": "query",
                        "description": "List of asset relations to retrieve assets",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/state": {
            "put": {
                "tags": [
                    "assets"
                ],
                "summary": "Lock or unlock or check-out or cancel check-out or delete or un-delete of an asset",
                "description": "Lock or unlock or check-out or cancel check-out or delete or un-delete of an asset",
                "operationId": "updateAssetState",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "action"
                                ],
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "type": "string",
                                        "description": "Asset 'state change' action; allowed values are check_out, cancel_check_out, lock, unlock, delete, un_delete",
                                        "enum": [
                                            "check_out",
                                            "cancel_check_out, lock",
                                            "unlock",
                                            "delete",
                                            "un_delete",
                                            "expire"
                                        ]
                                    },
                                    "asset_state_options": {
                                        "$ref": "#/components/schemas/AssetStateOptionsParam"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/subscriptions": {
            "post": {
                "tags": [
                    "assets"
                ],
                "summary": "subscribe of an asset",
                "description": "subscribe of an asset",
                "operationId": "subscribeToAsset",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "assets"
                ],
                "summary": "un-subscribe of an asset",
                "description": "un-subscribe of an asset",
                "operationId": "unsubscribeToAsset",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/usage": {
            "post": {
                "tags": [
                    "assets"
                ],
                "summary": "Register asset usage",
                "description": "The API to register the asset usage into the system. You can set category/application properties value either id or name of the category/application accordingly.",
                "operationId": "registerAssetUsageData",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "application",
                                    "category"
                                ],
                                "type": "object",
                                "properties": {
                                    "application": {
                                        "type": "string",
                                        "description": "Id or Name of the application"
                                    },
                                    "category": {
                                        "type": "string",
                                        "description": "Id or Name of the category"
                                    },
                                    "campaign": {
                                        "type": "string",
                                        "description": "Campaign name"
                                    },
                                    "tracking_url": {
                                        "type": "string",
                                        "description": "Tracking url"
                                    },
                                    "external_tracking_id": {
                                        "type": "string",
                                        "description": "External tracking id"
                                    },
                                    "register_app_catg_flag": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/usages": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve asset usages",
                "description": "The API to get usages of the asset. It returns collection summary when limit is set to '0'.",
                "operationId": "getAssetUsageData",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending). Sorting on asset usages are supported for the fields category, application, usage_time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_by_category",
                        "in": "query",
                        "description": "Specify id or name of the category to filter the results",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_by_application",
                        "in": "query",
                        "description": "Specify id or name of the application to filter the results",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetUsageCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{id}/versions": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve all versions of an Asset",
                "description": "Retrieve all versions of the specified Asset.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getVersions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/assets/{original_asset_id}/latestversion": {
            "get": {
                "tags": [
                    "assets"
                ],
                "summary": "Retrieve the latest version of an Asset",
                "description": "Retrieve the latest version of an Asset by original asset id.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getLatestVersion",
                "parameters": [
                    {
                        "name": "original_asset_id",
                        "in": "path",
                        "description": "The Original Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/auditactivity/eventfilter/{assetType}": {
            "get": {
                "tags": [
                    "auditactivity"
                ],
                "summary": "Retrieve all audit tab event filter options",
                "description": "Retrieve all audit tab event filter options based on asset type to populate the filter.",
                "operationId": "getAuditDropDownItems",
                "parameters": [
                    {
                        "name": "assetType",
                        "in": "path",
                        "description": "Accepted value is \"container\" or \"asset\"",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditDropdownItemsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/auditactivity/sortoptions": {
            "get": {
                "tags": [
                    "auditactivity"
                ],
                "summary": "Retrieve all audit tab sort options",
                "description": "Retrieve all sort options to sort audited events for assets or containers.",
                "operationId": "getSortOptions_1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/auditactivity/{assetId}/activityhistory": {
            "get": {
                "tags": [
                    "auditactivity"
                ],
                "summary": "Retrieve audited events for given asset id",
                "description": "Retrieve audited events for the selected asset.",
                "operationId": "getAssetAuditActivitiesHistory",
                "parameters": [
                    {
                        "name": "assetId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "event_type",
                        "in": "query",
                        "description": "Event Ids, comma delimited, If not specified, will retrieve based on System Settings.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_Id",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date_range",
                        "in": "query",
                        "description": "Date Range for retrieveing events by audited date.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ALL",
                                "TODAY",
                                "PAST_DAY",
                                "PAST_WEEK",
                                "PAST_MONTH",
                                "PAST_YEAR"
                            ]
                        }
                    },
                    {
                        "name": "asset_type",
                        "in": "query",
                        "description": "Accepted value is \"container\" or \"asset\"",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Field to sort audited events. Prefix with asc_ or desc_ to specify the order",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "event",
                                "date",
                                "user"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.If limit is not specified, the default limit will be 25.",
                        "schema": {
                            "type": "string",
                            "default": "25"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/auditactivity/{sequenceId}/details": {
            "get": {
                "tags": [
                    "auditactivity"
                ],
                "summary": "Retrieve event details for event with given sequence id",
                "description": "Retrieve event details for event with given sequence id. Event details are only available for events whose extended_msg_data property is true.",
                "operationId": "getAuditEventDetails",
                "parameters": [
                    {
                        "name": "sequenceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditEventDetailsRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Event with the specified sequence id not found"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/brandings": {
            "get": {
                "tags": [
                    "brandings"
                ],
                "summary": "Retrieve all or user specific brandings depends upon apply_user_filter flag",
                "description": "Retrieve list of branings for logged in user (from session) if apply_user_filter is not set or true(default is true) and it retrieves all brandings in the system if apply_user_filter is set as false.",
                "operationId": "getBrandings",
                "parameters": [
                    {
                        "name": "apply_user_filter",
                        "in": "query",
                        "description": "Apply user filter",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "enum": [
                                true,
                                false
                            ]
                        }
                    },
                    {
                        "name": "load_content",
                        "in": "query",
                        "description": "Loads branding content information",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandingRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "User not found with the specified name"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/brandings/{id}": {
            "get": {
                "tags": [
                    "brandings"
                ],
                "summary": "Retrieve branding",
                "description": "Retrieve branding by branding id",
                "operationId": "getBrand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Branding Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_content",
                        "in": "query",
                        "description": "Loads branding content information",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandingRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/cascadinggroups/{id}": {
            "get": {
                "tags": [
                    "cascadinggroups"
                ],
                "summary": "Retrieve a Cascading Group",
                "description": "Retrieve a Cascading Group by cascading group id.",
                "operationId": "getCascadingGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cascading Group Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_cascading_domain_values",
                        "in": "query",
                        "description": "Load cascading domain values.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CascadingGroupRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Cascading group not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/cascadinggroups/{id}/lookupvalues": {
            "get": {
                "tags": [
                    "cascadinggroups"
                ],
                "summary": "Retrieve the cascading lookup values for a level based on the values provided for previous levels",
                "description": "Retrieve the cascading lookup values for a level based on the values provided for previous levels. The value(s) need to be passed as query parameter(s) named as \"path\" in the same order they were populated.",
                "operationId": "getDomainValues",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cascading Group Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "path",
                        "in": "query",
                        "description": "List of selected parent cascading domain value(s) as query parameter(s). The values should appear in the same order as they are populated in cascading domain.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "input_filter_string",
                        "in": "query",
                        "description": "<b>String for filtering cascading lookup values. If this parameter is provided, it returns only those cascading lookup values whose display field value starts with the value provided for this parameter and one which doesn't start are filtered out.</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "domain_value_id",
                        "in": "query",
                        "description": "<b>String for retrieving cascading lookup value, based on id of the value of lookup domain.<br><br>Note : If this value is set then search parameter \"input_filter_string\" will be ignored.</b>",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DomainValuesCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The given values to query the cascading values are not valid"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Cascading group not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Get list of collections for current user",
                "description": "Get list of collections for current user",
                "operationId": "getUserCollections",
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collection_filters",
                        "in": "query",
                        "description": "JSON representation of ContainerFilters object to perform filtering on collections.",
                        "schema": {
                            "$ref": "#/components/schemas/CollectionFiltersParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "collections"
                ],
                "summary": "Delete a Collection",
                "description": "This collection will be delete from the system and it will no longer be accessible. This operation cannot be undone. All shared recipients will be removed from the collection and they will no longer be able to access it.",
                "operationId": "deleteCollection_1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "action",
                                    "collection_list_selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "type": "string",
                                        "description": "Actions to be performed on the collection. An 'delete' action expects 'collection_list_selection_context'",
                                        "enum": [
                                            "delete"
                                        ]
                                    },
                                    "collection_list_selection_context": {
                                        "$ref": "#/components/schemas/CollectionListSelectionContextParam"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionOperationResultRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "403": {
                        "description": "Invalid request to delete collection with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "Create a Collection",
                "description": "Create a collection for the given user. In the CollectionRepresentation, specify the name, permissions and rating enabled or not.",
                "operationId": "createCollection",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "collection_resource"
                                ],
                                "type": "object",
                                "properties": {
                                    "collection_resource": {
                                        "$ref": "#/components/schemas/CollectionParam"
                                    },
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "brand_id": {
                                        "type": "string",
                                        "description": "Brand id for the current logged in user"
                                    },
                                    "action": {
                                        "type": "string",
                                        "description": "Collection microsite action type ; allowed values are create or delete.",
                                        "enum": [
                                            "create",
                                            "delete"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/accesstypes": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Get all list of access types",
                "description": "Get all list of access types to share the collection",
                "operationId": "getAccessPermissionsList",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessTypeRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/assets": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieve assets based on the provided selection context.",
                "description": "Retrieve assets based on the provided selection context. The request needs the pagination parameters to be passed. The asset collection will also include summary about the collection. To load only collection summary pass limit as 0.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p><p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "getAssets_1",
                "parameters": [
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "selection_context",
                        "in": "query",
                        "description": "The selection context for the assets. ",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/SelectionContextParam"
                        }
                    },
                    {
                        "name": "asset_id_container_path_map",
                        "in": "query",
                        "description": "Map of asset id and container path to expand. The given path will be expanded to have children of path elements.",
                        "schema": {
                            "$ref": "#/components/schemas/AssetIdToPathMapParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "description": "Attribute to group and count the assets in a asset collection",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "content_type",
                                "metadata_model",
                                "data_type"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "collections"
                ],
                "summary": "Add Assets to the selected collections",
                "description": "Add Selected assets by creating new private collection and also add into existing collections.",
                "operationId": "addOrRemoveAssetsToCollection",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "collection_list",
                                    "operation",
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Private Collection Name"
                                    },
                                    "collection_list": {
                                        "type": "array",
                                        "description": "List of Collection Ids",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "operation": {
                                        "type": "string",
                                        "description": "Operation to be performed on the collection assets. An 'add/remove' operation expects 'selection_context'",
                                        "enum": [
                                            "add",
                                            "remove"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionOperationResultRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/assets/sortoptions": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieve all recent assets sort options",
                "description": "Retrieves all sort options to sort recently accessed assets of the logged in user.",
                "operationId": "getCollectionAssetsSortOptions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            }
        },
        "/v6/collections/filterTypes": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieve list of all collection filter types.",
                "description": "Retrieve list of all collection filter types.",
                "operationId": "getCollectionFilterTypes",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            }
        },
        "/v6/collections/me/promotions": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Get list of collections promoted for current user",
                "description": "Get list of collections promoted for current user",
                "operationId": "getCollectionPromotionsofLoggedinUser",
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            }
        },
        "/v6/collections/sharedFilterTypes": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieve list of all collection filter types.",
                "description": "Retrieve list of all collection filter types.",
                "operationId": "getCollectionSharedFilterTypes",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            }
        },
        "/v6/collections/sortoptions": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieve all collection sort options",
                "description": "Retrieves all sort options to sorting the collections of the logged in user.",
                "operationId": "getSortOptions_2",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            }
        },
        "/v6/collections/subscriptions": {
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "subscribe collections",
                "description": "subscribe collectionsSelection context for performing action on single/list of Collections.",
                "operationId": "subscribeToCollections",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "collection_list_selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "collection_list_selection_context": {
                                        "$ref": "#/components/schemas/CollectionListSelectionContextParam"
                                    },
                                    "after": {
                                        "type": "string",
                                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection"
                                    },
                                    "limit": {
                                        "type": "string",
                                        "description": "Maximum number of items to retrieve."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionOperationResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "collections"
                ],
                "summary": "un-subscribe of assets",
                "description": "un-subscribe of assets<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "unsubscribeToCollections",
                "parameters": [
                    {
                        "name": "selection_context",
                        "in": "query",
                        "description": "The selection context for the assets. ",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CollectionListSelectionContextParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionOperationResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/{id}": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Get collection by collection id",
                "description": "Get collection by collection id",
                "operationId": "getUserCollectionById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "slim",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "collections"
                ],
                "summary": "Update a collection",
                "description": "Update properties of a collection.<br>CollectionSource can't be modified using this endpoint.</br>",
                "operationId": "updateCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "collection_resource"
                                ],
                                "type": "object",
                                "properties": {
                                    "collection_resource": {
                                        "$ref": "#/components/schemas/CollectionParam"
                                    },
                                    "brand_id": {
                                        "type": "string",
                                        "description": "Brand id for the current logged in user"
                                    },
                                    "action": {
                                        "type": "string",
                                        "description": "Collection microsite action type ; allowed values are create or delete.",
                                        "enum": [
                                            "create",
                                            "delete"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A metadata field id / lookup domain id is invalid"
                    },
                    "403": {
                        "description": "Permission denied to update given collection"
                    },
                    "404": {
                        "description": "Collection not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "collections"
                ],
                "summary": "Delete a Collection",
                "description": "This collection will be delete from the system and it will no longer be accessible. This operation cannot be undone. All shared recipients will be removed from the collection and they will no longer be able to access it.",
                "operationId": "deleteCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "403": {
                        "description": "Invalid request to delete collection with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "collections"
                ],
                "summary": "Update a collection",
                "description": "Update properties of a collection selectively.<br>name, description, collectionType, ratingEnabled, collectionShareAccessInfo can be modified using this endpoint.</br>",
                "operationId": "updateCollectionProperties",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representation of CollectionParam object",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionParam"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A metadata field id / lookup domain id is invalid"
                    },
                    "403": {
                        "description": "Permission denied to update given collection"
                    },
                    "404": {
                        "description": "Collection not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/{id}/assets": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieve all assets of a Collection",
                "description": "Retrieve all the assets for the specified Collection.",
                "operationId": "getCollectionAssets",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "description": "Attribute to group and count the assets in a asset collection",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "content_type",
                                "metadata_model"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Collection not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/{id}/promotions": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieve promoted user groups in a collection.",
                "description": "Retrieve promoted user groups in a collection.",
                "operationId": "getUserGroupsPromotedforCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroupCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            },
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "Promote or demote the collection.",
                "description": "Promote or demote the collection.All the selected user groups will be considered as promoted user groups. All the remaining user groups not selected will be consided as demoted.",
                "operationId": "promoteCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "user_group_ids"
                                ],
                                "type": "object",
                                "properties": {
                                    "user_group_ids": {
                                        "type": "string",
                                        "description": "List of user groups selected for promotion."
                                    },
                                    "brand_id": {
                                        "type": "string",
                                        "description": "Brand id for the current logged in user"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/{id}/publish": {
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "Publish the collection.",
                "description": "Publish the collection in OTMM to generate microsite for the collection.",
                "operationId": "publishCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "brand_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "brand_id": {
                                        "type": "string",
                                        "description": "Brand id for the current logged in user"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/{id}/rating": {
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "Rate the collection.",
                "description": "Rate the shared collection as the logged in user.",
                "operationId": "rateCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "rating"
                                ],
                                "type": "object",
                                "properties": {
                                    "rating": {
                                        "type": "integer",
                                        "description": "Rating to be added for an collection.",
                                        "format": "int32"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/{id}/subscriptions": {
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "subscribe a collection",
                "description": "subscribe a collection",
                "operationId": "subscribeToCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionOperationResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "collections"
                ],
                "summary": "un-subscribe a collection",
                "description": "un-subscribe a collection",
                "operationId": "unsubscribeToCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionOperationResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/{id}/thumbnail": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieve collection thumbnail",
                "description": "Retrieve the thumbnail for the specified collection.",
                "operationId": "retrieveCollectionThumbnail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "disposition",
                        "in": "query",
                        "description": "The disposition type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "attachment"
                            ]
                        }
                    },
                    {
                        "name": "enable_caching",
                        "in": "query",
                        "description": "Is caching enabled for this request",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "user-agent",
                        "in": "header",
                        "description": "User-Agent HTTP header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "format": "java.io.InputStream"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Rendition not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "Change the collection thumbnail",
                "description": "Change the collection thumbnail to the thumbnail of the specified asset id. Asset should be part of the collection",
                "operationId": "setCollectionThumbnail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "asset_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "asset_id": {
                                        "type": "string",
                                        "description": "The id of the asset to be used as the collection thumbnail, Asset should be part of the collection"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "collections"
                ],
                "summary": "Remove the collection thumbnail",
                "description": "Remove the collection thumbnail to the thumbnail of the specified asset id.",
                "operationId": "removeCollectionThumbnail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Rendition not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/collections/{id}/unpublish": {
            "delete": {
                "tags": [
                    "collections"
                ],
                "summary": "Unpublish the collection.",
                "description": "Unpublish the collection in OTMM to remove microsite for the collection.",
                "operationId": "unpublishCollection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Collection Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "403": {
                        "description": "Invalid request to delete collection with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/colorfilters": {
            "get": {
                "tags": [
                    "colorfilters"
                ],
                "summary": "Retrieve all Color Filters",
                "description": "Retrieve all Color Filters. Color Filters are used when filtering a search result by colr. Color Filters are only supported for text based searches.",
                "operationId": "getColorFilters",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ColorFilterCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/colorfilters/{id}": {
            "get": {
                "tags": [
                    "colorfilters"
                ],
                "summary": "Retrieve a Color Filter",
                "description": "Retrieve a Color Filter by color filter id. Color Filters are used when filtering a search result by colr. Color Filters are only supported for text based searches.",
                "operationId": "getColorFilter",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Color Filter Id.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ColorFilterRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Color Filter not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/exports/schedules": {
            "post": {
                "tags": [
                    "exports"
                ],
                "summary": "Create a export schedule",
                "description": "Create a new export schedule. If the <b>export_contents</b> parameter is set to <b>assets_and_assets_list</b> then asset metadata will not be included in the export schedule. If metadata is exported then metadata file format to export schedule should be specified in <b>export_request</b> parameter.<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}<P>If delivery template is set to 'Email Asset URL' in export request and FolderSelectionContext is provided for the selection_context parameter then 'include_descendants' and 'child_type' flags in the selection_context object are overridden to 'IMMEDIATE' and 'ASSETS_AND_CONTAINERS' respectively. Similarly, when AssetIdsSelectionContext or SearchSelectionContext is provided for the selection_context parameter then 'include_descendants' flag is set to 'NONE' in the selection_context object</P>",
                "operationId": "createExportJob_1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "export_request",
                                    "schedule_request",
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "export_contents": {
                                        "type": "string",
                                        "description": "Data load type",
                                        "default": "assets_and_metadata",
                                        "enum": [
                                            "assets_and_metadata",
                                            "assets_and_assets_list"
                                        ]
                                    },
                                    "metadata_to_return": {
                                        "type": "string",
                                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b>"
                                    },
                                    "load_multilingual_values": {
                                        "type": "string",
                                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b>.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "export_request": {
                                        "$ref": "#/components/schemas/ExportRequestParam"
                                    },
                                    "schedule_request": {
                                        "$ref": "#/components/schemas/ScheduleRequestParam"
                                    },
                                    "content_type_to_transformers_map": {
                                        "$ref": "#/components/schemas/ContentTypeTransformerMapParam"
                                    },
                                    "export_schedule_name": {
                                        "type": "string",
                                        "description": "User defined name of the export schedule. If this parameter is not set, the default value is export schedule class name."
                                    },
                                    "force_mode": {
                                        "type": "string",
                                        "description": "Create an export schedule in force mode, by updating an existing schedule delivery if it is matched with given folder id or search id",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchedulerHandle"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/facetconfigurations": {
            "get": {
                "tags": [
                    "facetconfigurations"
                ],
                "summary": "Retrieve all Facet Configurations",
                "description": "Retrieve all Facet Configurations. Facet Configurations are used to configure what facet information is returned with search results.",
                "operationId": "getFacetConfigurations",
                "parameters": [
                    {
                        "name": "retrieval_type",
                        "in": "query",
                        "description": "If <b>partial</b> is specified only a subset of the Facet Configuration information will be retrieved. This is intended for use in generating a list of available Facet Configurations",
                        "schema": {
                            "type": "string",
                            "default": "partial",
                            "enum": [
                                "full",
                                "partial"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FacetConfigurationCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/facetconfigurations/{id}": {
            "get": {
                "tags": [
                    "facetconfigurations"
                ],
                "summary": "Retrieve a Facet Configuration",
                "description": "Retrieve a Facet Configuration by facet configuration id. Facet Configurations are used to configure what facet information is returned with search results.",
                "operationId": "getFacetConfiguration",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Facet Configuration Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FacetConfigurationRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Facet Configuration not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/featurepermissions": {
            "get": {
                "tags": [
                    "featurepermissions"
                ],
                "summary": "Get all supported feature permissions",
                "description": "Get all supported feature permissions",
                "operationId": "getFeaturePermissions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeaturesRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/featurepermissions/me": {
            "get": {
                "tags": [
                    "featurepermissions"
                ],
                "summary": "Get feature permissions for logged in user",
                "description": "Get feature permissions for logged in user",
                "operationId": "getFeaturePermissionsForUser",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeaturesRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/recent": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve recent Folders",
                "description": "Retrieve all recently accessed folders of the logged in user.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getFolder_1",
                "parameters": [
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asset_filter_request",
                        "in": "query",
                        "description": "JSON representation of AssetFilterRequest objcet to perform filtering on assets",
                        "schema": {
                            "$ref": "#/components/schemas/AssetFilterRequestParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/recent/sortoptions": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve all recent folders sort options",
                "description": "Retrieves all Sort Options to sort recently accessed folders of the logged in user.",
                "operationId": "getRecentSortOptions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            }
        },
        "/v6/folders/rootfolders": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve all Root Folders",
                "description": "Retrieve all system Root Folders.",
                "operationId": "getRootFolders",
                "parameters": [
                    {
                        "name": "generate_child_count",
                        "in": "query",
                        "description": "Should a child count be returned for each root folder",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/sortoptions": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve all folder Sort Options",
                "description": "Retrieves all Sort Options available for sorting folder content. These options can be used when retrieving the children of a folder, the assets with in a folder, or the subfolders of a folder.",
                "operationId": "getSortOptions_3",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    }
                }
            }
        },
        "/v6/folders/{id}": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve a Folder",
                "description": "Retrieve a Folder by folder id.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getFolder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "asset_id_container_path_map",
                        "in": "query",
                        "description": "Map of asset id and container path to expand. The given path will be expanded to have children of path elements.",
                        "schema": {
                            "$ref": "#/components/schemas/AssetIdToPathMapParam"
                        }
                    },
                    {
                        "name": "asset_filter_request",
                        "in": "query",
                        "description": "JSON representation of AssetFilterRequest objcet to perform filtering on assets",
                        "schema": {
                            "$ref": "#/components/schemas/AssetFilterRequestParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "folders"
                ],
                "summary": "Create a Folder",
                "description": "Create a sub-folder under the specified Folder. In the supplied FolderRepresentation, one needs to set only folder name, folder type id, metadata and security policies. In metadata, set only field id and value.",
                "operationId": "createFolder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representation of FolderRepresentation object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FolderRepresentation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "403": {
                        "description": "Folder not allowed to be root"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "folders"
                ],
                "summary": "Delete a Folder",
                "description": "Mark the specified Folder as DELETED. The Folder is not purged from the system.",
                "operationId": "deleteFolder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "403": {
                        "description": "Invalid request to delete Root Container with the specified id"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "folders"
                ],
                "summary": "Update a folder",
                "description": "Update metadata and/or reassign applicable security policies for the specified folder.<br/>For Metadata Fields, only the type, Id and value need to be specified. For security policies, <br/>only the teams identifier(s) need to be specified. <br/>The asset must be locked by the user who is performing the edit operation.<br/>If the value for lockStrategy parameter passed is optimistic, then the user doesn't need to lock the asset prior to calling.The API will obtain the lock internally and perform the asset update",
                "operationId": "updateFolder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lock_strategy",
                        "in": "query",
                        "description": "Lock Strategy: allowed values are optimistic,default. ",
                        "schema": {
                            "type": "string",
                            "default": "default",
                            "enum": [
                                "optimistic",
                                "default"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representation of EditedFolder object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditedFolder"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A metadata field id / lookup domain id is invalid"
                    },
                    "403": {
                        "description": "Permission denied to update given folder"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/{id}/assets": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve all Assets in a Folder",
                "description": "Retrieve all Assets in the specified Folder.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getChildAssets",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "description": "Attribute to group and count the assets in a asset collection",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "content_type",
                                "metadata_model"
                            ]
                        }
                    },
                    {
                        "name": "asset_filter_request",
                        "in": "query",
                        "description": "JSON representation of AssetFilterRequest objcet to perform filtering on assets",
                        "schema": {
                            "$ref": "#/components/schemas/AssetFilterRequestParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/{id}/children": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve all children (Assets and Folders) of a Folder",
                "description": "Retrieve all the children, both Assets and Folders, of the specified Folder.<p>You can distinguish between the Folders and Assets in the response with the help of the <b>type</b> field. The <b>type</b> field is present only for Folders and has the value <b>com.artesia.container.Container</b>.</p><p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getChildren",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "asset_filter_request",
                        "in": "query",
                        "description": "JSON representation of AssetFilterRequest objcet to perform filtering on assets",
                        "schema": {
                            "$ref": "#/components/schemas/AssetFilterRequestParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderChildrenRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "folders"
                ],
                "summary": "Add or move or remove children (Assets and Folders) to/from current Folder",
                "description": "Add children to, or move children into the specified Folder or remove children from current folder. Whether an add or move or remove is performed is determined by the value assigned to the required <b>type</b> parameter. A move operation moves children from one Folder to another Folder. One should specify either <b>asset_ids</b> or <b>selection_context</b> parameter value in the request. A remove operation removes children from current selected Folder, which are mentioned as either <b>asset_ids</b> or <b>selection_context</b> parameter value in the request. The <b>selection_context</b> identifies the assets that will be part of the operation.<p>The response of this operation includes both the Folder into which the children were inserted, a list of children successfully added or moved, and a list of children that could not be added or moved.</p>The failed list also specifies the reason for failure - </br></br>Failure errors can be one of the following:<ul><li>CIRCULAR - Has circular dependency</li><li>NOT_EXIST - Folder/Asset with given id does not exist</li><li>ASSET_NOT_ALLOWED - Assets not allowed to be children</li><li>CONTAINER_TYPE_NOT_ALLOWED - The folder type associated with child folder is not allowed to be child or parent</li><li>SINGLE_PARENT - Child folder can have only single parent</li><li>WRONG_TREE - Child folder does not belong to same tree</li><li>CANT_BE_ROOT - Folder/Asset cannot be root</li><li>EXISTING_CHILD - Folder/Asset already a child</li><li>INACTIVE - Folder type associated with folder is inactive</li><li>NO_EDIT_PARENTS - User does not have permission on the parent folder to add or move children.</li><li>CONTAINER_TYPE_NOT_ALLOWED_FOR_USER - User does not belong to allowable user groups for the folder type associated with the parent folder</li></br><p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "addOrRemoveChildren",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "required": [
                                    "type"
                                ],
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "Type of operation.",
                                        "enum": [
                                            "add",
                                            "move",
                                            "remove"
                                        ]
                                    },
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "asset_ids": {
                                        "type": "string",
                                        "description": "Comma separated list of the ids of the children to add or move"
                                    },
                                    "parent_id": {
                                        "type": "string",
                                        "description": "For move operations, the id of the Folder in which all children are currently located. This parameter is required for move operations and ignored for add operations"
                                    },
                                    "position_type": {
                                        "type": "string",
                                        "description": "Method used to determine the position of the new children in the Folder",
                                        "default": "absolute",
                                        "enum": [
                                            "absolute",
                                            "relative"
                                        ]
                                    },
                                    "position": {
                                        "type": "string",
                                        "description": "If <b>position_type</b> is <b>absolute</b> the numeric position where the new children should be inserted into the existing children. If not specified the new children will be position after all existing children. If <b>position_type</b> is <b>relative</b> then you must specify either <b>before</b> or <b>after</b> to determine where the new children are inserted relative to the existing child identified by the <b>relative_asset_id</b> parameter."
                                    },
                                    "relative_asset_id": {
                                        "type": "string",
                                        "description": "If <b>position_type</b> is <b>relative</b> then this parameter must be set to the asset id of the existing child relative to which new children should be added or moved. If <b>position_type</b> is <b>absolute</b> this parameter is ignored"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderOperationRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/{id}/contents": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve a rendition of a Folder",
                "description": "Retrieve a rendition for the specified Folder. Folders may optionally have either thumbnail or preview renditions.",
                "operationId": "getRenditions_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rendition_type",
                        "in": "query",
                        "description": "The rendition type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "thumbnail",
                                "preview"
                            ]
                        }
                    },
                    {
                        "name": "disposition",
                        "in": "query",
                        "description": "The disposition type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "attachment"
                            ]
                        }
                    },
                    {
                        "name": "enable_caching",
                        "in": "query",
                        "description": "Is caching enabled for this request",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "user-agent",
                        "in": "header",
                        "description": "User-Agent HTTP header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "format": "java.io.InputStream"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "No content could be found for given folder"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "folders"
                ],
                "summary": "Add Or Update Renditions of folder",
                "description": "Add Or Update Renditions of a folder. Supported Rendtion types are Thumbnail or Preview. The content image supported as a multipart/form-data format or asset id. Asset Id should be child of current folder",
                "operationId": "addRenditions_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "rendition_type"
                                ],
                                "type": "object",
                                "properties": {
                                    "rendition_type": {
                                        "type": "string",
                                        "description": "The rendition type",
                                        "enum": [
                                            "thumbnail",
                                            "preview"
                                        ]
                                    },
                                    "asset_id": {
                                        "type": "string",
                                        "description": "Asset to be set as Renditions of a parent folder"
                                    },
                                    "job_name": {
                                        "type": "string",
                                        "description": "User defined name of the job. If this parameter is not set, the default value is job class name."
                                    },
                                    "file": {
                                        "$ref": "#/components/schemas/FormDataBodyPart"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "folders"
                ],
                "summary": "Delete Renditions of folder",
                "description": "Remove Renditions of a folder",
                "operationId": "deleteRenditions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/{id}/duplicate": {
            "post": {
                "tags": [
                    "folders"
                ],
                "summary": "Duplicate the given asset/folder.",
                "description": "Duplicate the given asset/folder to the destination folder.",
                "operationId": "duplicateAsset_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "asset_copy_request"
                                ],
                                "type": "object",
                                "properties": {
                                    "destination_folder_id": {
                                        "type": "string",
                                        "description": "Destination folder id to move, copy or duplicate assets"
                                    },
                                    "position_type": {
                                        "type": "string",
                                        "description": "Method used to determine the position of the new children in the Folder",
                                        "default": "absolute",
                                        "enum": [
                                            "absolute",
                                            "relative"
                                        ]
                                    },
                                    "position": {
                                        "type": "string",
                                        "description": "If <b>position_type</b> is <b>absolute</b> the numeric position where the new children should be inserted into the existing children. If not specified the new children will be position after all existing children. If <b>position_type</b> is <b>relative</b> then you must specify either <b>before</b> or <b>after</b> to determine where the new children are inserted relative to the existing child identified by the <b>relative_asset_id</b> parameter."
                                    },
                                    "relative_asset_id": {
                                        "type": "string",
                                        "description": "If <b>position_type</b> is <b>relative</b> then this parameter must be set to the asset id of the existing child relative to which new children should be added or moved. If <b>position_type</b> is <b>absolute</b> this parameter is ignored"
                                    },
                                    "asset_copy_request": {
                                        "$ref": "#/components/schemas/AssetCopyRequestParam"
                                    },
                                    "depth": {
                                        "type": "string",
                                        "description": "Depth to traverse when duplicating containers. Less than zero means traverse all the way down.",
                                        "default": "-1"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/{id}/folders": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve all child Folders in a Folder",
                "description": "Retrieve all child Folders in the specified Folder.  If the request is for the first page or all folders within a system Root Folder, the Public Orphans or My Orphans is also retrieved.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getChildFolders",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "asset_filter_request",
                        "in": "query",
                        "description": "JSON representation of AssetFilterRequest objcet to perform filtering on assets",
                        "schema": {
                            "$ref": "#/components/schemas/AssetFilterRequestParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/{id}/parents": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve the parents for given asset id.",
                "description": "Retrieve the parents for given asset id.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getParentFolders_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "folders"
                ],
                "summary": "Remove list of specified parents for Folder Id.",
                "description": "Remove parents which are mentioned in comma separated parentIds string for current folder resource.",
                "operationId": "removeParents_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "required": [
                                    "parent_ids",
                                    "type"
                                ],
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "Type of operation.",
                                        "enum": [
                                            "remove"
                                        ]
                                    },
                                    "parent_ids": {
                                        "type": "string",
                                        "description": "Comma separated list of the parent's ids to be detached"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParentsOperationRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Folder not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/{id}/state": {
            "put": {
                "tags": [
                    "folders"
                ],
                "summary": "Lock or unlock or un-delete of a folder",
                "description": "Lock or unlock or un-delete of a folder",
                "operationId": "updateFolderState",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "action"
                                ],
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "type": "string",
                                        "description": "Folder 'state change' action; allowed values are lock, unlock, delete, un_delete",
                                        "enum": [
                                            "lock",
                                            "unlock",
                                            "un_delete",
                                            "delete"
                                        ]
                                    },
                                    "asset_state_options": {
                                        "$ref": "#/components/schemas/AssetStateOptionsParam"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/{id}/subscriptions": {
            "post": {
                "tags": [
                    "folders"
                ],
                "summary": "subscribe of an asset",
                "description": "subscribe of an asset",
                "operationId": "subscribeToAsset_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "folders"
                ],
                "summary": "un-subscribe of an asset",
                "description": "un-subscribe of an asset",
                "operationId": "unsubscribeToAsset_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/folders/{id}/templates": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Retrieve assigned property templates of a folder",
                "description": "Retrieve all content specific Property templates including default property template of a folder.",
                "operationId": "getContainerPropertyTemplates",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderPropertyTemplateRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "folders"
                ],
                "summary": "Update property templates of a folder",
                "description": "Update all content specific Property templates including default property template of a folder.",
                "operationId": "updateOrRemoveContainerPropertyTemplates",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Folder property templates representation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FolderPropertyTemplateRepresentation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/foldertypes": {
            "get": {
                "tags": [
                    "foldertypes"
                ],
                "summary": "Retrieve all Folder Types",
                "description": "Retrieve all Folder Types. Optionally just Folder Types that are configued as active, Folder Types that the user has permission to create Folders with, or Folder Types that are configured as valid for creating top level folders can be retrieved. These options can be combined.",
                "operationId": "getFolderTypes",
                "parameters": [
                    {
                        "name": "load_active_only",
                        "in": "query",
                        "description": "Retrieve only Folder Types configured as active",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_creatable_only",
                        "in": "query",
                        "description": "Retrieve only Folder Types that the user has permission to create Folders with",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_root_only",
                        "in": "query",
                        "description": "Retrieve only Folder Types configured as valid for creating top level Folders",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderTypeCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/foldertypes/{id}": {
            "get": {
                "tags": [
                    "foldertypes"
                ],
                "summary": "Retrieve a Folder Type",
                "description": "Retrieve a Folder Type by folder type id.",
                "operationId": "getFolderType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Folder Type Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FolderTypeRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/hightail/contacts": {
            "get": {
                "tags": [
                    "hightail"
                ],
                "summary": "Retrieve User Contacts",
                "description": "Retrieve User Contacts.<br/>Contacts will be retrieved from both Hightail send/share address book and users configured in OTMM.",
                "operationId": "getContacts",
                "parameters": [
                    {
                        "name": "where_first_and_last_name",
                        "in": "query",
                        "description": "Filter by user's first and last name. This parameter supports wildcards.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "where_for_job",
                        "in": "query",
                        "description": "Indicates whether to retrieve contacts for use with a Hightail based Review Job",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserContactCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "No contacts found that match the specified string"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/hightail/spaces": {
            "post": {
                "tags": [
                    "hightail"
                ],
                "summary": "Create a Hightail Space",
                "description": "Create a Hightail Space.",
                "operationId": "createSpace",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "required": [
                                    "space_type"
                                ],
                                "type": "object",
                                "properties": {
                                    "space_type": {
                                        "type": "string",
                                        "description": "Space type",
                                        "enum": [
                                            "share",
                                            "approval"
                                        ]
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Space name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Space description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HightailSpaceRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/hightail/tokens": {
            "delete": {
                "tags": [
                    "hightail"
                ],
                "summary": "Logout Hightail Access Token",
                "description": "Logout the cached Hightail Access Token.",
                "operationId": "logoutTokens",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "No access token found for the current user"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/hightail/tokens/oauth2": {
            "get": {
                "tags": [
                    "hightail"
                ],
                "summary": "Callback to generate Hightail Oauth2 Tokens",
                "description": "Callback to generate Hightail Oauth2 Tokens.",
                "operationId": "oauth2Callback",
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Oauth2 Code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Oauth2 State",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "error",
                        "in": "query",
                        "description": "Oauth2 Error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Oauth2 Error Description",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/hightail/tokens/validations": {
            "post": {
                "tags": [
                    "hightail"
                ],
                "summary": "Validate Hightail Access Token",
                "description": "Validate that the cached Hightail Access Token is valid.",
                "operationId": "validateTokens",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenValidationRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/importtemplates": {
            "get": {
                "tags": [
                    "importtemplates"
                ],
                "summary": "Retrieve all Property Templates",
                "description": "Retrieve all Permissible Property Templates.<p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "Response",
                "parameters": [
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON Representation of ImportTemplateDataLoadRequest object",
                        "schema": {
                            "$ref": "#/components/schemas/ImportTemplateDataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImportTemplatesCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/integrationservices": {
            "get": {
                "tags": [
                    "integrationservices"
                ],
                "summary": "Retrieve all the integration services",
                "description": "Retrieves all the integration services along with its metadata mappings",
                "operationId": "retrieveAllServices",
                "parameters": [
                    {
                        "name": "where_state",
                        "in": "query",
                        "description": "Allows you to filter results to include only services whose state is equal to given state. Allowed state values are ENABLED, DISABLED.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ENABLED",
                                "DISABLED"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "integrationservices"
                ],
                "summary": "Update integration service",
                "description": "Update existing integration service and its metadata mappings",
                "operationId": "updateIntegrationService",
                "parameters": [],
                "requestBody": {
                    "description": "JSON Representation of service object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRepresentation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceRepresentation"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "integrationservices"
                ],
                "summary": "Register integration service",
                "description": "Register a new integration service along with its metadata mappings",
                "operationId": "registerIntegrationService",
                "parameters": [],
                "requestBody": {
                    "description": "JSON Representation of service object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRepresentation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceRepresentation"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/integrationservices/{id}": {
            "delete": {
                "tags": [
                    "integrationservices"
                ],
                "summary": "Delete integration service",
                "description": "Delate integration service for the given id",
                "operationId": "deleteIntegrationService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Integration service id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/integrationservices/{id}/state": {
            "patch": {
                "tags": [
                    "integrationservices"
                ],
                "summary": "Update integration service state",
                "description": "Update integratoin service state for the given service. The allowed states are DISABLED, ENABLED",
                "operationId": "updateIntegrationServiceState",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Integration service id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "type": "string",
                                        "description": "Specify value to update integration service state. Allowed state values are ENABLED, DISABLED.",
                                        "enum": [
                                            "ENABLED",
                                            "DISABLED"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/intervalprofiles": {
            "get": {
                "tags": [
                    "intervalprofiles"
                ],
                "summary": "Retrieve all Interval Profiles",
                "description": "Retrieve all Interval Profiles. Interval Profiles are used to implement Interval Facets in a Facet Configuration. Either the full Interval Profile representation can be retrieved, or just a partial representation. A partial representation does not include the interval definitions, and is intended for use in generating a list of available Interval Profiles.",
                "operationId": "getIntervalProfiles",
                "parameters": [
                    {
                        "name": "retrieval_type",
                        "in": "query",
                        "description": "The retrieval type",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "full",
                                "partial"
                            ]
                        }
                    },
                    {
                        "name": "profile_types",
                        "in": "query",
                        "description": "The profile types",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all",
                                "date",
                                "numeric"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntervalProfileCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/intervalprofiles/{id}": {
            "get": {
                "tags": [
                    "intervalprofiles"
                ],
                "summary": "Retrieve an Interval Profile",
                "description": "Retrieve an Interval Profile by interval profile id. Interval Profiles are used to implement Interval Facets in a Facet Configuration.",
                "operationId": "getIntervalProfile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Interval Profile Id.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntervalProfileRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Interval Profile not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Get Jobs information for current user",
                "description": "Get Jobs for current user with filters.<br/><b>Note :</b><br/>1. Parameter job_class will have precedence over job_type. If job_class is present, job_type will be ignored.",
                "operationId": "getJobs",
                "parameters": [
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.If limit is set to zero then only collection summary is returned assuming that the request is made only to retrieve the counts.If limit is not passed, the default limit will be picked from the 'JOB_LIST_RECORD_COUNT' setting.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma separated list of status ids. Use the '/statusoptions' resource to get the list of statuses",
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Comma separated list of assigned roles. Use the '/roleoptions' resource to get the list of assigned roles",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending). Sorting on jobs is supported for the fields job_name, job_class, start_time, end_time, status. For sorting the results by status, the status values COMPLETED, ERROR and WARN are treated alike as all these statuses are considered as 'end' in BPM server",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_job_data",
                        "in": "query",
                        "description": "Flag to load job data",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_job_details",
                        "in": "query",
                        "description": "Flag to load job details. If set to true, will load job details.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_asset_details",
                        "in": "query",
                        "description": "Flag to load asset ids and asset count are part of job. If set to true, will load asset details.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_form",
                        "in": "query",
                        "description": "Flag to load job form(prelaunch form)",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "asset_ids_limit",
                        "in": "query",
                        "description": "Maximum number of asset ids to retrieve. This parameter is honored only when load_asset_details is set to true. If limit is not passed, the default limit will be picked from the 'ASSET_IDS_TO_LOAD_INTO_JOB' setting. ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_steps",
                        "in": "query",
                        "description": "Flag to load steps",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_downloadable_jobs_only",
                        "in": "query",
                        "description": "Flag to load only downloadable jobs",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_inprogress_task_jobs",
                        "in": "query",
                        "description": "Flag to load the jobs those have inprogress task",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "job_type",
                        "in": "query",
                        "description": "Filter to retrieve Jobs based on the job's type. Parameter can be set to a comma separated list of job types.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "job_class",
                        "in": "query",
                        "description": "Job class to be used to filter jobs.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BULK_EDIT",
                                "CUSTOM",
                                "EXPORT",
                                "IMPORT",
                                "MOVE_CONTENT",
                                "PUBLISH"
                            ]
                        }
                    },
                    {
                        "name": "start_date_time",
                        "in": "query",
                        "description": "Date Range for retrieveing jobs by creation date. Dates ranges are calculate w.r.t server time.",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "TODAY",
                                "PAST_DAY",
                                "PAST_WEEK",
                                "PAST_MONTH",
                                "PAST_YEAR"
                            ]
                        }
                    },
                    {
                        "name": "end_date_time",
                        "in": "query",
                        "description": "Date Range for retrieving jobs by completion date. Dates ranges are calculate w.r.t server time.",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "TODAY",
                                "PAST_DAY",
                                "PAST_WEEK",
                                "PAST_MONTH",
                                "PAST_YEAR"
                            ]
                        }
                    },
                    {
                        "name": "last_updated_date_time",
                        "in": "query",
                        "description": "Date Range for retrieving jobs by completion date. Dates ranges are calculate w.r.t server time.",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "TODAY",
                                "PAST_DAY",
                                "PAST_WEEK",
                                "PAST_MONTH",
                                "PAST_YEAR"
                            ]
                        }
                    },
                    {
                        "name": "job_end_date_start",
                        "in": "query",
                        "description": "Retrieving jobs by end date range, starting limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "job_category",
                        "in": "query",
                        "description": "Name of the job category: System or Custom",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "SYSTEM",
                                "CUSTOM"
                            ]
                        }
                    },
                    {
                        "name": "job_end_date_end",
                        "in": "query",
                        "description": "Retrieving jobs by end date range,ending limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "job_start_date_start",
                        "in": "query",
                        "description": "Retrieving jobs by start date range, starting limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "job_start_date_end",
                        "in": "query",
                        "description": "Retrieving jobs by start date range, ending limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "jobs"
                ],
                "summary": "Create a new job",
                "description": "Instantiates a new job and returns the job handle holding id of the new job",
                "operationId": "instantiateJob",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "job_request"
                                ],
                                "type": "object",
                                "properties": {
                                    "job_request": {
                                        "$ref": "#/components/schemas/JobRequestParam"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobHandle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "jobs"
                ],
                "summary": "Update jobs",
                "description": "Add assets to all the given jobs. The assets will be added only to the jobs which are triggered by the requested user.",
                "operationId": "addAssetsToJobs",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "job_ids",
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "job_ids": {
                                        "type": "string",
                                        "description": "Comma separated list of job id's"
                                    },
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/attachcontents/{import_job_id}": {
            "put": {
                "tags": [
                    "jobs"
                ],
                "summary": "Attach Content for specified metadata only asset(s)",
                "description": "Attach Content for specified metadata only asset(s). This should be a multipart/form-data request. The operation creates an attachcontent job and returns the job handle. Using the job id in job handle, you can query the 'jobs' resource for completion status.",
                "operationId": "attachContent",
                "parameters": [
                    {
                        "name": "import_job_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "manifest": {
                                        "$ref": "#/components/schemas/UploadManifestParam"
                                    },
                                    "transfer_details": {
                                        "$ref": "#/components/schemas/TransferDetailsParam"
                                    },
                                    "job_name": {
                                        "type": "string",
                                        "description": "User defined name of the job. If this parameter is not set, the default value is job class name."
                                    },
                                    "job_type": {
                                        "type": "string",
                                        "description": "Name of the job to be triggered on the server. If this parameter is not set, the default value will be picked from settings. This parameter has highest precedence while deciding the job to trigger."
                                    },
                                    "callback_url": {
                                        "type": "string",
                                        "description": "Callback URL in the encoded form, which needs to be notified once the job is complete. For more information on the format of callbackURl , refer to integration guide."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "The request has been accepted for processing. The returned job handle can be used to check for completion status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobHandle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "No job found for the given import job id."
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/checkins/{import_job_id}": {
            "put": {
                "tags": [
                    "jobs"
                ],
                "summary": "Create version for specified Asset(s)",
                "description": "Create Asset(s) version for the specified asset(s). This should be a multipart/form-data request. The operation creates an checkin job and returns the job handle. Using the job id in job handle, you can query the 'jobs' resource for completion status.",
                "operationId": "createAssetVersion",
                "parameters": [
                    {
                        "name": "import_job_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "manifest": {
                                        "$ref": "#/components/schemas/UploadManifestParam"
                                    },
                                    "transfer_details": {
                                        "$ref": "#/components/schemas/TransferDetailsParam"
                                    },
                                    "job_name": {
                                        "type": "string",
                                        "description": "User defined name of the job. If this parameter is not set, the default value is job class name."
                                    },
                                    "job_type": {
                                        "type": "string",
                                        "description": "Name of the job to be triggered on the server. If this parameter is not set, the default value will be picked from settings. This parameter has highest precedence while deciding the job to trigger."
                                    },
                                    "job_id": {
                                        "type": "string",
                                        "description": "The id of the job from where import is initiated."
                                    },
                                    "task_id": {
                                        "type": "string",
                                        "description": "The id of the task from where import is initiated."
                                    },
                                    "callback_url": {
                                        "type": "string",
                                        "description": "Callback URL in the encoded form, which needs to be notified once the job is complete. For more information on the format of callbackURl , refer to integration guide."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "The request has been accepted for processing. The returned job handle can be used to check for completion status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobHandle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "No job found for the given import job id."
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/definitions": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Retrieve all Job definitions.",
                "description": "Retrieves all Job definitions that the user has access to. User can instantiate only those jobs returned by this api.",
                "operationId": "getJobDefinitions",
                "parameters": [
                    {
                        "name": "job_type",
                        "in": "query",
                        "description": "Name of the job to filter jobs.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_steps",
                        "in": "query",
                        "description": "Flag to load steps",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_all_versions",
                        "in": "query",
                        "description": "Flag to load all versions of the job definitions",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobDefinitionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/exports": {
            "post": {
                "tags": [
                    "jobs"
                ],
                "summary": "Create a new export job",
                "description": "Create a new export job. If the <b>export_contents</b> parameter is set to <b>assets_and_assets_list</b> then asset metadata will not be included in the export. If metadata is exported then metadata file format to export should be specified in <b>export_request</b> parameter.<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}<P>If delivery template is set to 'Email Asset URL' in export request and FolderSelectionContext is provided for the selection_context parameter then 'include_descendants' and 'child_type' flags in the selection_context object are overridden to 'IMMEDIATE' and 'ASSETS_AND_CONTAINERS' respectively. Similarly, when AssetIdsSelectionContext or SearchSelectionContext is provided for the selection_context parameter then 'include_descendants' flag is set to 'NONE' in the selection_context object</P>",
                "operationId": "createExportJob",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "export_request",
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "export_contents": {
                                        "type": "string",
                                        "description": "Data load type",
                                        "default": "assets_and_metadata",
                                        "enum": [
                                            "assets_and_metadata",
                                            "assets_and_assets_list",
                                            "metadata_only"
                                        ]
                                    },
                                    "metadata_to_return": {
                                        "type": "string",
                                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b>"
                                    },
                                    "preference_id": {
                                        "type": "string",
                                        "description": "Preference id to be honored during operation on assets and metadata during an export job. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b>"
                                    },
                                    "load_multilingual_values": {
                                        "type": "string",
                                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b>.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "export_request": {
                                        "$ref": "#/components/schemas/ExportRequestParam"
                                    },
                                    "content_type_to_transformers_map": {
                                        "$ref": "#/components/schemas/ContentTypeTransformerMapParam"
                                    },
                                    "asset_id_to_transformers_map": {
                                        "$ref": "#/components/schemas/AssetIdTransformerMapParam"
                                    },
                                    "job_name": {
                                        "type": "string",
                                        "description": "User defined name of the job. If this parameter is not set, the default value is job class name."
                                    },
                                    "job_type": {
                                        "type": "string",
                                        "description": "Name of the job to be triggered on the server. If this parameter is not set, the default value will be picked from settings. This parameter has highest precedence while deciding the job to trigger."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExportJobHandle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/imports": {
            "post": {
                "tags": [
                    "jobs"
                ],
                "summary": "Create an import job",
                "description": "Create an import job to upload content and create asset(s) against. The Job Id in the returned job handle can be used to upload content for the import job against the 'renditions' resource.",
                "operationId": "createImportJob",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/imports/{import_job_id}": {
            "put": {
                "tags": [
                    "jobs"
                ],
                "summary": "Register Assets for creation",
                "description": "Register Asset(s) for creation with the specified asset representation or import template. This should be a multipart/form-data request. The operation creates an import job and returns the job handle. Using the job id in job handle, you can query the 'jobs' resource for completion status.",
                "operationId": "createAsset_1",
                "parameters": [
                    {
                        "name": "import_job_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "asset_representation": {
                                        "$ref": "#/components/schemas/AssetRepresentation"
                                    },
                                    "import_template_id": {
                                        "type": "string",
                                        "description": "Id of the import template to use"
                                    },
                                    "parent_folder_id": {
                                        "type": "string",
                                        "description": "The parent folder id"
                                    },
                                    "folder_representation": {
                                        "$ref": "#/components/schemas/FolderRepresentation"
                                    },
                                    "review_job_id": {
                                        "type": "string",
                                        "description": "The review job id"
                                    },
                                    "review_task_id": {
                                        "type": "string",
                                        "description": "The review job task id"
                                    },
                                    "job_id": {
                                        "type": "string",
                                        "description": "The id of the job from where import is initiated."
                                    },
                                    "task_id": {
                                        "type": "string",
                                        "description": "The id of the task from where import is initiated."
                                    },
                                    "manifest": {
                                        "$ref": "#/components/schemas/UploadManifestParam"
                                    },
                                    "transfer_details": {
                                        "$ref": "#/components/schemas/TransferDetailsParam"
                                    },
                                    "job_name": {
                                        "type": "string",
                                        "description": "User defined name of the job. If this parameter is not set, the default value is job class name."
                                    },
                                    "job_type": {
                                        "type": "string",
                                        "description": "Name of the job to be triggered on the server. If this parameter is not set, the default value will be picked from settings. This parameter has highest precedence while deciding the job to trigger."
                                    },
                                    "callback_url": {
                                        "type": "string",
                                        "description": "Callback URL in the encoded form, which needs to be notified once the job is complete. For more information on the format of callbackURl , refer to integration guide."
                                    },
                                    "merge_folder_hierarchies": {
                                        "type": "string",
                                        "description": "Flag indicating whether folder hierarchies should be merged with existing hierarchies. Default is create hierarchies without merging into existing hierarchies. This flag is optional and will be considered only if assets are uploaded with hierarchy.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "The request has been accepted for processing. The returned job handle can be used to check for completion status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobHandle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "404": {
                        "description": "No Import job found for the given import job id."
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/publish": {
            "post": {
                "tags": [
                    "jobs"
                ],
                "summary": "Create a new publish job",
                "description": "Create a new publish job. If the <b>publish_contents</b> parameter is set to <b>assets_and_assets_list</b> then asset metadata will not be included in the publish. If metadata is publish then metadata file format to publish should be specified in <b>publish_request</b> parameter.<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "createPublishJob",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "publish_request",
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "publish_contents": {
                                        "type": "string",
                                        "description": "Data load type",
                                        "default": "assets_and_assets_list",
                                        "enum": [
                                            "assets_and_metadata",
                                            "assets_and_assets_list",
                                            "metadata_only"
                                        ]
                                    },
                                    "metadata_to_return": {
                                        "type": "string",
                                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b>"
                                    },
                                    "preference_id": {
                                        "type": "string",
                                        "description": "Preference id to be honored during operation on assets and metadata during an publish job. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b>"
                                    },
                                    "load_multilingual_values": {
                                        "type": "string",
                                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b>.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "publish_request": {
                                        "$ref": "#/components/schemas/PublishRequestParam"
                                    },
                                    "content_type_to_transformers_map": {
                                        "$ref": "#/components/schemas/ContentTypeTransformerMapParam"
                                    },
                                    "asset_id_to_transformers_map": {
                                        "$ref": "#/components/schemas/AssetIdTransformerMapParam"
                                    },
                                    "job_name": {
                                        "type": "string",
                                        "description": "User defined name of the job. If this parameter is not set, the default value is job class name."
                                    },
                                    "job_type": {
                                        "type": "string",
                                        "description": "Name of the job to be triggered on the server. If this parameter is not set, the default value will be picked from settings. This parameter has highest precedence while deciding the job to trigger."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PublishJobHandle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/roleoptions": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Retrieve all assignee roles for job",
                "description": "Retrieves all supported assignee roles options available for retrieving Jobs.",
                "operationId": "getRoleOptions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/sortoptions": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Retrieve all jobs Sort Options",
                "description": "Retrieves all Sort Options available for sorting jobs contents.",
                "operationId": "getSortOptions_4",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/statusoptions": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Retrieve all Status Options for Jobs",
                "description": "Retrieves all supported Status Options available for retrieving Jobs.",
                "operationId": "getStatusOptions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/stepstatusoptions": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Retrieve all Status Options for Jobs",
                "description": "Retrieves all supported Status Options available for retrieving Jobs.",
                "operationId": "getStepStatusOptions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/{id}": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Retrieve a specific user job",
                "description": "Retrieve user job by id. This operation is allowed for user who triggered the job and system administrator",
                "operationId": "getJobById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the job to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_job_data",
                        "in": "query",
                        "description": "Flag to load job data",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_job_details",
                        "in": "query",
                        "description": "Flag to load job details. If set to true, will load job details.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_asset_details",
                        "in": "query",
                        "description": "Flag to load asset ids and asset count are part of job. If set to true, will load asset details.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "asset_ids_limit",
                        "in": "query",
                        "description": "Maximum number of asset ids to retrieve. This parameter is honored only when load_asset_details is set to true. If limit is not passed, the default limit will be picked from the 'ASSET_IDS_TO_LOAD_INTO_JOB' setting. ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_steps",
                        "in": "query",
                        "description": "Flag to load steps",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_task_details",
                        "in": "query",
                        "description": "Flag to load in-progress tasks information. The return object includes user assignment details of the task",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_form",
                        "in": "query",
                        "description": "Flag to load job form(prelaunch form)",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "jobs"
                ],
                "summary": "Updates the Job data.",
                "description": "Updates the Job data.<br/><b>Note :</b><br/>1. Currently it only updates content downloaded flag, anything else passed will be ignored. ",
                "operationId": "updateJobData",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the job to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representation of job data",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JobDataParam"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "204": {
                        "description": "No content was found"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/{id}/assets": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Retrieve assets for job",
                "description": "Retrieve assets associated with a job by job id. This operation is allowed for user who triggered the job and system administrator<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getAssetsForJob",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the job to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.If limit is set to zero then only collection summary is returned assuming that the request is made only to retrieve the counts.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "task_id",
                        "in": "query",
                        "description": "Specify the task id to skip the assets which are present in the task while retrieving the job assets.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/{id}/exports/contents": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Get job contents",
                "description": "Get contents of a job by job id",
                "operationId": "getDownloadableContentForJob",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the job to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user-agent",
                        "in": "header",
                        "description": "User-Agent HTTP header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enable_caching",
                        "in": "query",
                        "description": "Is caching enabled for this request",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "204": {
                        "description": "No content was found"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/{id}/state": {
            "put": {
                "tags": [
                    "jobs"
                ],
                "summary": "Sets status of a specific user job",
                "description": "Sets job status for a user job and all sub jobs instantiated from current job. This operation is allowed for user who triggered the job.",
                "operationId": "setJobStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the job to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "required": [
                                    "job_state"
                                ],
                                "type": "object",
                                "properties": {
                                    "job_state": {
                                        "type": "string",
                                        "description": "Job State to set. Current allowed value is 'end' only.",
                                        "enum": [
                                            "end"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/{id}/tasks": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Get related tasks information for a job id",
                "description": "Get related tasks information for a job id",
                "operationId": "getTasksForJob",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the job to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TasksCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/{id}/users": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Get all job users",
                "description": "Get all the job users who are participated in the job. The list includes both participants and assignees",
                "operationId": "getUsersForJob",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the job to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobUserCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/jobs/{name}/forms": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Retrieve pre launch form.",
                "description": "Retrieve pre launch form associated with the given activity name",
                "operationId": "getForms",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the activity to retrieve pre launch form which is configured to the activity",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "USER"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityFormRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/linktypes": {
            "get": {
                "tags": [
                    "linktypes"
                ],
                "summary": "Retrieve all Link Types",
                "description": "Retreive all Link Types.",
                "operationId": "getLinkTypes",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LinkTypeCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/lookupdomains": {
            "get": {
                "tags": [
                    "lookupdomains"
                ],
                "summary": "Retrieve all Lookup Domains",
                "description": "Retrieve all Lookup Domains. In each of the retrieved Lookup Domains, only the valid domain values are populated. Expired values are excluded.",
                "operationId": "getAllLookupDomains",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LookupDomainsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/lookupdomains/{id}": {
            "get": {
                "tags": [
                    "lookupdomains"
                ],
                "summary": "Retrieve a Lookup Domain",
                "description": "Retrieve a Lookup Domain by lookup domain id. Only valid domain values are populated. Expired values are excluded. \nIf search string is provided it returns only lookup domain id along with domain values matching the search string and other information related to lookup domain will be filtered out.",
                "operationId": "getLookupDomain",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Lookup Domain Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search_string",
                        "in": "query",
                        "description": "search string for filtering Lookup Domain values",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "is_prefix_only",
                        "in": "query",
                        "description": "If true, search only for domain values starting with search string",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LookupDomainRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Lookup Domain not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/metadatafieldgroups": {
            "get": {
                "tags": [
                    "metadatafieldgroups"
                ],
                "summary": "Retrieve all Metadata Field Groups",
                "description": "Retrieve all Metadata Field Groups.",
                "operationId": "getMetadataFields",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetadataFieldGroupsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/metadatafieldgroups/{id}": {
            "get": {
                "tags": [
                    "metadatafieldgroups"
                ],
                "summary": "Retrieve a Metadata Field Group",
                "description": "Retrieve a Metadata Field Group by metadata field group id.",
                "operationId": "getMetadataField",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Metadata Field Group Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetadataFieldGroupRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Metadata Field Group not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/metadatafields": {
            "get": {
                "tags": [
                    "metadatafields"
                ],
                "summary": "Retrieve all Metadata Fields",
                "description": "Retrieve all Metadata Fields. Optionally the Metadata Fields returned can be limited using the <b>id</b> parameter.",
                "operationId": "getMetadataFields_1",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetadataFieldsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/metadatafields/{id}": {
            "get": {
                "tags": [
                    "metadatafields"
                ],
                "summary": "Retrieve a Metadata Field",
                "description": "Retrieve a Metadata Field by metadata field id.",
                "operationId": "getMetadataField_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Metadata Field Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetadataFieldRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Metadata Field not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/metadatalocales": {
            "get": {
                "tags": [
                    "metadatalocales"
                ],
                "summary": "Retrieve all Metadata Locales",
                "description": "Retrieve all Metadata Locales.",
                "operationId": "getMetadataLocales",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetadataLocalesCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Metadata Locales not found"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/metadatamodels": {
            "get": {
                "tags": [
                    "metadatamodels"
                ],
                "summary": "Retrieve Metadata Models for specified object type.",
                "description": "Retrieve Metadata Models for specified object type. If object type provided is null, it retrieves all models in the system. If model doesn't have type been set, then it considered for all.",
                "operationId": "getMetadataModels",
                "parameters": [
                    {
                        "name": "object_type",
                        "in": "query",
                        "description": "Model Object Type",
                        "schema": {
                            "type": "string",
                            "default": "null"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetadataModelsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/metadatamodels/{id}": {
            "get": {
                "tags": [
                    "metadatamodels"
                ],
                "summary": "Retrieve a Metadata Model",
                "description": "Retrieve a Metadata Model by metadata model id.",
                "operationId": "getMetadataModel",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Metadata Model Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetadataModelRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Metadata Model not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/preferences": {
            "get": {
                "tags": [
                    "preferences"
                ],
                "summary": "Get all user preferences",
                "description": "Get all user preferences for logged in user",
                "operationId": "getUserPreferences",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPreferenceCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "preferences"
                ],
                "summary": "Set user preferences",
                "description": "Set user preferences to logged in user",
                "operationId": "setUserPreferenceData",
                "parameters": [],
                "requestBody": {
                    "description": "JSON representation of user preferences",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPreferenceCollectionRepresentation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPreferenceCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/preferences/dateranges": {
            "get": {
                "tags": [
                    "preferences"
                ],
                "summary": "Get user preference date ranges",
                "description": "Get the user preference by preference id for logged in user",
                "operationId": "getUserPreferenceDateRanges",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPreferenceDateRangeCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/preferences/{preference_id}": {
            "get": {
                "tags": [
                    "preferences"
                ],
                "summary": "Get user preference by preference id",
                "description": "Get the user preference by preference id for logged in user",
                "operationId": "getUserPreferenceById",
                "parameters": [
                    {
                        "name": "preference_id",
                        "in": "path",
                        "description": "Preference id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPreferenceRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "preferences"
                ],
                "summary": "Set user preference by preference id",
                "description": "Set the user preference by preference id to logged in user",
                "operationId": "setUserPreferenceData_1",
                "parameters": [
                    {
                        "name": "preference_id",
                        "in": "path",
                        "description": "Preference id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representation of user preference. There is no need to specify preference id in user preference representation and it is ignored even if present.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPreferenceRepresentation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPreferenceRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/renditions": {
            "post": {
                "tags": [
                    "renditions"
                ],
                "summary": "Create a rendition for an earlier created import job",
                "description": "Create a rendition for an earlier created import job, this method also supports chunk file upload.To enable chunk file upload, client must set request header \"X-USES-CHUNKS\" as \"true\" and include chunk parameters as part of the rest client request.",
                "operationId": "createRendition",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file",
                                    "import_job_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "import_job_id": {
                                        "type": "string",
                                        "description": "The id of the import job as part of which the asset(s) is(are) being created."
                                    },
                                    "file_name": {
                                        "type": "string",
                                        "description": "The file name for the rendition. If specified, overrides the file name set in the 'file' part's Content-Disposition header"
                                    },
                                    "file_path": {
                                        "type": "string",
                                        "description": "The path of the file relative to the import working directory."
                                    },
                                    "file": {
                                        "$ref": "#/components/schemas/FormDataBodyPart"
                                    },
                                    "chunk_size": {
                                        "type": "string",
                                        "description": "Upload chunk size."
                                    },
                                    "file_size": {
                                        "type": "string",
                                        "description": "File size."
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "description": "Unique file identifier."
                                    },
                                    "chunks_count": {
                                        "type": "integer",
                                        "description": "Total number of chunks for file.",
                                        "format": "int32"
                                    },
                                    "file_index": {
                                        "type": "integer",
                                        "description": "Upload chunk index.",
                                        "format": "int32"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/renditions/{id}": {
            "get": {
                "tags": [
                    "renditions"
                ],
                "summary": "Retrieve a Rendition",
                "description": "Retrieve a Rendition associated with an Asset or Folder by rendition id.",
                "operationId": "getRendition",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Rendition Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "disposition",
                        "in": "query",
                        "description": "The disposition type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "attachment"
                            ]
                        }
                    },
                    {
                        "name": "enable_caching",
                        "in": "query",
                        "description": "Is caching enabled for this request",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "user-agent",
                        "in": "header",
                        "description": "User-Agent HTTP header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collection_id",
                        "in": "query",
                        "description": "Collection Id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "object",
                                    "format": "java.io.InputStream"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/renditions/{id}/contentsignedurls": {
            "get": {
                "tags": [
                    "renditions"
                ],
                "summary": "Generate and retrieve content signed url of the content.",
                "description": "Generate and retrieve content signed url of the content to access it directly from storage provider.",
                "operationId": "getContentSignedUrl",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Rendition Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentInfoRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/savedsearches": {
            "get": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Retrieve all Saved Searches",
                "description": "Retrieves all Saved Searches. Optionally just Saved Searches of a specific type (public, restricted or private) can be retrieved, or Saved Searches can be retrieved by id by specifying <b>selected</b> as the <b>save_type</b> and populating a comma separated list of Saved Search ids in the <b>search_ids</b> parameter. <p>Either the full Saved Search representation can be retrieved, just a partial representation, or a partial representation with the sort conditions added. A partial representation does not include the search criteria or sort conditions, and is intended for use in generating a list of available Saved Searches.",
                "operationId": "getSavedSearches",
                "parameters": [
                    {
                        "name": "retrieval_type",
                        "in": "query",
                        "description": "The retrieval type",
                        "schema": {
                            "type": "string",
                            "default": "partial",
                            "enum": [
                                "full",
                                "sort_conditions",
                                "partial"
                            ]
                        }
                    },
                    {
                        "name": "save_type",
                        "in": "query",
                        "description": "The saved search type",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "public",
                                "restricted",
                                "private",
                                "all",
                                "selected"
                            ]
                        }
                    },
                    {
                        "name": "search_ids",
                        "in": "query",
                        "description": "Comma separated list of ids of the Saved Searches to retrieve. This parameter is ignored unless <b>save_type</b> is set to <b>selected</b>. Note that the paging related parameters will be ignored when retrieving Saved Searches by id.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Allows you to override the default sort order. Specify the property to sort Saved Searches on. Prefix with asc_ (default) or desc_ to specify the order",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "name",
                                "create_date",
                                "is_favorite"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedSearchCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/savedsearches/database": {
            "post": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Create a database Saved Search",
                "description": "Create a database based Saved Search.",
                "operationId": "createDatabaseSavedSearch",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name",
                                    "search_condition_list"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Saved Search name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Saved Search description"
                                    },
                                    "is_public": {
                                        "type": "string",
                                        "description": "Saved Search public flag",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "is_favorite": {
                                        "type": "string",
                                        "description": "Saved Search favorite flag",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "search_condition_list": {
                                        "$ref": "#/components/schemas/SearchConditionListParam"
                                    },
                                    "sort": {
                                        "type": "string",
                                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending)."
                                    },
                                    "search_plugin_id": {
                                        "type": "string",
                                        "description": "The search plugin id",
                                        "default": "ARTESIA.PLUGIN.SEARCH.DATABASE"
                                    },
                                    "user_group_ids": {
                                        "type": "array",
                                        "description": "List of user groups to be associated with the saved search. Only users belonging to these groups or sub groups can use this search",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedSearchRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/savedsearches/saved": {
            "post": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Create a new Saved Search from an existing Saved Search",
                "description": "Create a new Saved Search from an existing Saved Search.",
                "operationId": "createSavedSearchFromSavedSearch",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name",
                                    "saved_search_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Saved Search name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Saved Search description"
                                    },
                                    "is_public": {
                                        "type": "string",
                                        "description": "Saved Search public flag",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "is_favorite": {
                                        "type": "string",
                                        "description": "Saved Search favorite flag",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "saved_search_id": {
                                        "type": "string",
                                        "description": "Saved Search Id"
                                    },
                                    "sort": {
                                        "type": "string",
                                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending)."
                                    },
                                    "facet_config_id": {
                                        "type": "string",
                                        "description": "Facet Configuration Id"
                                    },
                                    "user_group_ids": {
                                        "type": "array",
                                        "description": "List of user groups to be associated with the saved search. Only users belonging to these groups or sub groups can use this search",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedSearchRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Saved Search not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/savedsearches/sortoptions": {
            "get": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Retrieve Saved Search sort options",
                "description": "Retrieve all supported options for overriding the default sort order of Saved Searches",
                "operationId": "getSortOptions_5",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/savedsearches/text": {
            "post": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Create a text Saved Search",
                "description": "Create a text based Saved Search.",
                "operationId": "createOrUpdateTextSavedSearch",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Saved Search name"
                                    },
                                    "id": {
                                        "type": "string",
                                        "description": "Saved Search Id"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Saved Search description"
                                    },
                                    "is_public": {
                                        "type": "string",
                                        "description": "Saved Search public flag",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "is_favorite": {
                                        "type": "string",
                                        "description": "Saved Search favorite flag",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "keyword_query": {
                                        "type": "string",
                                        "description": "The keyword search query"
                                    },
                                    "keyword_scope_id": {
                                        "type": "string",
                                        "description": "The keyword scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                                        "default": "3",
                                        "enum": [
                                            "1",
                                            "2",
                                            "3"
                                        ]
                                    },
                                    "search_condition_list": {
                                        "$ref": "#/components/schemas/SearchConditionListParam"
                                    },
                                    "facet_restriction_list": {
                                        "$ref": "#/components/schemas/FacetRestrictionParam"
                                    },
                                    "keyword_filter": {
                                        "type": "array",
                                        "description": "A keyword query that can be used to filter search results",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "keyword_filter_scope_id": {
                                        "type": "string",
                                        "description": "The keyword filter scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                                        "default": "3",
                                        "enum": [
                                            "1",
                                            "2",
                                            "3"
                                        ]
                                    },
                                    "search_config_id": {
                                        "type": "string",
                                        "description": "Search Configuration Id. This parameter cannot be used if either the <b>fixed_condition_list</b> or <b>candidate_field_list</b> parameters have been specified."
                                    },
                                    "fixed_condition_list": {
                                        "$ref": "#/components/schemas/SearchConditionListParam"
                                    },
                                    "candidate_field_list": {
                                        "$ref": "#/components/schemas/CandidateFieldListParam"
                                    },
                                    "keyword_search_allowed": {
                                        "type": "string",
                                        "description": "Sets whether the UI should allow keyword search conditions to be added to this search. This parameter will be ignored if a <b>search_config_id</b> parameter has been specified. To execute a search based on a Search Configuration, specifying the <b>search_config_id</b> parameter is recommended. This parameter can be used if a saved search based on a Search Configuration has been retrieved, and you wish to modify and re-execute the search and retain the Keyword Search Allowed property inherited from the Search Configuration.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "default_operator": {
                                        "type": "string",
                                        "description": "The default operator<br>If not specified then set using the Tresource [SEARCH\\SERVER] DEFAULT_OPERATOR entry",
                                        "enum": [
                                            "or",
                                            "and"
                                        ]
                                    },
                                    "facet_config_id": {
                                        "type": "string",
                                        "description": "Facet Configuration Id"
                                    },
                                    "collection_filter": {
                                        "type": "string",
                                        "description": "Allows you to filter your search result to include only assets that are part of one of the specified list of collections. Specify a comma separated list of the ids of the collections to be used to filter results."
                                    },
                                    "color_filter": {
                                        "type": "string",
                                        "description": "Allows you to filter your search result to include only assets whose score for the specified color exceeds the configured threshold. Specify the id of the color to be used to filter results."
                                    },
                                    "folder_filter": {
                                        "type": "string",
                                        "description": "Allows you to filter your search result to include only descendants of the specified folder. Specify the id of the folder to be used to filter results. The <b>folder_filter_type</b> parameter can be used to modify the behavior of the folder filter."
                                    },
                                    "folder_filter_type": {
                                        "type": "string",
                                        "description": "Modifies the behavior of the <b>folder_filter</b> parameter. If set to <b>all</b> all descendants of the specified folder are included in the filtered result. If set to <b>direct</b> only the immediate children of the specified folder are included in the filtered result. This parameter is ignored if the <b>folder_filter</b> parameter is not set.",
                                        "default": "all",
                                        "enum": [
                                            "all",
                                            "direct"
                                        ]
                                    },
                                    "sort": {
                                        "type": "string",
                                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending)."
                                    },
                                    "search_plugin_id": {
                                        "type": "string",
                                        "description": "The search plugin id",
                                        "default": "ARTESIA.PLUGIN.SEARCH.SOLR.V1"
                                    },
                                    "multilingual_language_code": {
                                        "type": "string",
                                        "description": "If searching multilingual fields, allows you to specify the code of the language varient to search against"
                                    },
                                    "user_group_ids": {
                                        "type": "array",
                                        "description": "List of user groups to be associated with the saved search. Only users belonging to these groups or sub groups can use this search",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedSearchRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/savedsearches/{id}": {
            "get": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Retrieve a Saved Search",
                "description": "Retrieve a Saved Search by saved search id.",
                "operationId": "getSavedSearch",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved Search Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedSearchRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Saved Search not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Update a Saved Search",
                "description": "Update a Saved Search by saved search id.",
                "operationId": "replaceSavedSearch",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved Search Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representation of the SavedSearchRepresentation object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SavedSearchRepresentation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedSearchRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Saved Search not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Delete a Saved Search",
                "description": "Delete a Saved Search by saved search id.",
                "operationId": "deleteSavedSearch",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved Search Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Saved Search not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Update properties of a Saved Search",
                "description": "Update properties of a Saved Search by saved search id.",
                "operationId": "updateSavedSearchProperties",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved Search Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Saved Search name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Saved Search description"
                                    },
                                    "is_public": {
                                        "type": "string",
                                        "description": "Saved Search public flag",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "is_favorite": {
                                        "type": "string",
                                        "description": "Saved Search favorite flag",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "user_group_ids": {
                                        "type": "array",
                                        "description": "List of user groups to be associated with the saved search. Only users belonging to these groups or sub groups can use this search",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedSearchRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Saved Search not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/savedsearches/{id}/thumbnail": {
            "post": {
                "tags": [
                    "savedsearches"
                ],
                "summary": "Change the Saved Search thumbnail",
                "description": "Change the Saved Search thumbnail",
                "operationId": "setSavedSearchThumbnail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved Search Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "asset_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "asset_id": {
                                        "type": "string",
                                        "description": "The id of the asset to be used as the Saved Search thumbnail"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SavedSearchRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/search/database": {
            "get": {
                "tags": [
                    "search"
                ],
                "summary": "Perform a database based Search",
                "description": "Generate a search result from the database search engine.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "runDatabaseSearchAsGet",
                "parameters": [
                    {
                        "name": "search_condition_list",
                        "in": "query",
                        "description": "JSON representation of the SearchCondition List object</br></br>Database search supports the following SearchCondition sub types:<ul><li><b>SearchMetadataCondition</b></li></br>",
                        "schema": {
                            "$ref": "#/components/schemas/SearchConditionListParam"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search_plugin_id",
                        "in": "query",
                        "description": "The search plugin id",
                        "schema": {
                            "type": "string",
                            "default": "ARTESIA.PLUGIN.SEARCH.DATABASE"
                        }
                    },
                    {
                        "name": "generate_type_counts",
                        "in": "query",
                        "description": "Generate type counts for this search",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "apply_search_filters",
                        "in": "query",
                        "description": "Apply search filter user preferences for this search",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "description": "Attribute to group and count the assets in a asset collection",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "content_type",
                                "metadata_model"
                            ]
                        }
                    },
                    {
                        "name": "return_type",
                        "in": "query",
                        "description": "The amount of information to be passed back in the response</br></br>The following return types are supported:<ul><li><b>count</b> - only the number of assets matching the query will be returned. Parameters other than the search criteria will be ignored</li><li><b>ids</b> - asset ids returned</li><li><b>objects</b> - asset objects returned</li><li><b>all</b> - both ids and objects returned</li></br>",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all",
                                "count",
                                "ids",
                                "objects"
                            ]
                        }
                    },
                    {
                        "name": "return_search_object",
                        "in": "query",
                        "description": "If true the SDK search object generated for this search is returned in the SearchResultRepresentation",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "context_notes",
                        "in": "query",
                        "description": "Optional notes on the context in which this search is being performed. This parameter has no impact on the search execution and is not persisted when searches are saved, but if the <b>return_search_object</b> parameter is set to true will be passed back with the search result.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "search"
                ],
                "summary": "Perform a database based Search",
                "description": "Generate a search result from the database search engine.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "runDatabaseSearchAsPost",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "search_condition_list": {
                                        "$ref": "#/components/schemas/SearchConditionListParam"
                                    },
                                    "sort": {
                                        "type": "string",
                                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending)."
                                    },
                                    "search_plugin_id": {
                                        "type": "string",
                                        "description": "The search plugin id",
                                        "default": "ARTESIA.PLUGIN.SEARCH.DATABASE"
                                    },
                                    "generate_type_counts": {
                                        "type": "string",
                                        "description": "Generate type counts for this search",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "apply_search_filters": {
                                        "type": "string",
                                        "description": "Apply search filter user preferences for this search",
                                        "default": "true",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "load_type": {
                                        "type": "string",
                                        "description": "Data load type",
                                        "default": "system",
                                        "enum": [
                                            "full",
                                            "system",
                                            "metadata",
                                            "inherited_metadata",
                                            "custom"
                                        ]
                                    },
                                    "metadata_to_return": {
                                        "type": "string",
                                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>"
                                    },
                                    "preference_id": {
                                        "type": "string",
                                        "description": "Preference Id"
                                    },
                                    "filter_fields_by_model": {
                                        "type": "string",
                                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                                        "default": "true",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "load_multilingual_values": {
                                        "type": "string",
                                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "data_load_request": {
                                        "$ref": "#/components/schemas/DataLoadRequestParam"
                                    },
                                    "after": {
                                        "type": "string",
                                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection"
                                    },
                                    "before": {
                                        "type": "string",
                                        "description": "Retrieve collection starting at the position before the specified value and going backwards"
                                    },
                                    "limit": {
                                        "type": "string",
                                        "description": "Maximum number of items to retrieve."
                                    },
                                    "level_of_detail": {
                                        "type": "string",
                                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                                        "default": "full",
                                        "enum": [
                                            "slim",
                                            "full"
                                        ]
                                    },
                                    "group_by": {
                                        "type": "string",
                                        "description": "Attribute to group and count the assets in a asset collection",
                                        "enum": [
                                            "content_type",
                                            "metadata_model"
                                        ]
                                    },
                                    "return_type": {
                                        "type": "string",
                                        "description": "The amount of information to be passed back in the response</br></br>The following return types are supported:<ul><li><b>count</b> - only the number of assets matching the query will be returned. Parameters other than the search criteria will be ignored</li><li><b>ids</b> - asset ids returned</li><li><b>objects</b> - asset objects returned</li><li><b>all</b> - both ids and objects returned</li></br>",
                                        "default": "all",
                                        "enum": [
                                            "all",
                                            "count",
                                            "ids",
                                            "objects"
                                        ]
                                    },
                                    "return_search_object": {
                                        "type": "string",
                                        "description": "If true the SDK search object generated for this search is returned in the SearchResultRepresentation",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "context_notes": {
                                        "type": "string",
                                        "description": "Optional notes on the context in which this search is being performed. This parameter has no impact on the search execution and is not persisted when searches are saved, but if the <b>return_search_object</b> parameter is set to true will be passed back with the search result."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/search/saved/{id}": {
            "get": {
                "tags": [
                    "search"
                ],
                "summary": "Execute a Saved Search",
                "description": "Generate a search result from a Saved Search.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "runSavedSearchAsGet",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved Search Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "facet_config_id",
                        "in": "query",
                        "description": "Facet Configuration Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "generate_facets",
                        "in": "query",
                        "description": "Generated facets for this search",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "facet_restriction_list",
                        "in": "query",
                        "description": "JSON representation of the FacetRestriction List object",
                        "schema": {
                            "$ref": "#/components/schemas/FacetRestrictionParam"
                        }
                    },
                    {
                        "name": "merge_filters",
                        "in": "query",
                        "description": "If true any facet restrictions or keyword filters passed in will be merged with the facet restrictions and keyword filters inherited from the saved search. If false the facet restrictions and keyword filters from the saved search will be ignored, and the passed in <b>facet_restriction_list</b> and <b>keyword_filter</b> parameters (if any) will be used exclusively.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "generate_type_counts",
                        "in": "query",
                        "description": "Generate type counts for this search",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "apply_search_filters",
                        "in": "query",
                        "description": "Apply search filter user preferences for this search",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "keyword_filter",
                        "in": "query",
                        "description": "A keyword query that can be used to filter search results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "keyword_filter_scope_id",
                        "in": "query",
                        "description": "The keyword filter scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                        "schema": {
                            "type": "string",
                            "default": "3",
                            "enum": [
                                "1",
                                "2",
                                "3"
                            ]
                        }
                    },
                    {
                        "name": "keyword_query",
                        "in": "query",
                        "description": "The keyword search query. If specified, this overrides any keyword query present in the saved search.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "keyword_scope_id",
                        "in": "query",
                        "description": "The keyword scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                        "schema": {
                            "type": "string",
                            "default": "3",
                            "enum": [
                                "1",
                                "2",
                                "3"
                            ]
                        }
                    },
                    {
                        "name": "ignore_keyword_query",
                        "in": "query",
                        "description": "Ignore the original keyword search query present in the saved search. If a <b>keyword_query</b> parameter has been specified, the original keyword search query will always be ignored regardless of how this parameter is set.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "search_condition_list",
                        "in": "query",
                        "description": "JSON representation of the SearchCondition List object. If specified, this overrides any condition list present in the saved search.</br></br>The SearchCondition sub types supported is dependent on the search plugin the saved search is based on.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchConditionListParam"
                        }
                    },
                    {
                        "name": "ignore_search_condition_list",
                        "in": "query",
                        "description": "Ignore the original search condition list present in the saved search. If a <b>search_condition_list</b> parameter has been specified, the original search condition list will always be ignored regardless of how this parameter is set.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "collection_filter",
                        "in": "query",
                        "description": "Allows you to filter your search result to include only assets that are part of one of the specified list of collections. Specify a comma separated list of the ids of the collections to be used to filter results. If specified, this overrides any collection filter present in the saved search.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore_collection_filter",
                        "in": "query",
                        "description": "Ignore the original collection filter present in the saved search. If a <b>collection_filter</b> parameter has been specified, the original collection filter will always be ignored regardless of how this parameter is set.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "color_filter",
                        "in": "query",
                        "description": "Allows you to filter your search result to include only assets whose score for the specified color exceeds the configured threshold. Specify the id of the color to be used to filter results.If specified, this overrides any color filter present in the saved search.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore_color_filter",
                        "in": "query",
                        "description": "Ignore the original color filter present in the saved search. If a <b>color_filter</b> parameter has been specified, the original color filter will always be ignored regardless of how this parameter is set.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "folder_filter",
                        "in": "query",
                        "description": "Allows you to filter your search result to include only descendants of the specified folder. Specify the id of the folder to be used to filter results. If specified, this overrides any folder filter present in the saved search. The <b>folder_filter_type</b> parameter can be used to modify the behavior of the folder filter.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "folder_filter_type",
                        "in": "query",
                        "description": "Modifies the behavior of the <b>folder_filter</b> parameter. If set to <b>all</b> all descendants of the specified folder are included in the filtered result. If set to <b>direct</b> only the immediate children of the specified folder are included in the filtered result. This parameter is ignored if the <b>folder_filter</b> parameter is not set.",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all",
                                "direct"
                            ]
                        }
                    },
                    {
                        "name": "ignore_folder_filter",
                        "in": "query",
                        "description": "Ignore the original folder filter present in the saved search. If a <b>folder_filter</b> parameter has been specified, the original folder filter will always be ignored regardless of how this parameter is set.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "multilingual_language_code",
                        "in": "query",
                        "description": "If searching multilingual fields, allows you to specify the code of the language varient to search against. If specified, this overrides any language varient code present in the saved search.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "description": "Attribute to group and count the assets in a asset collection",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "content_type",
                                "metadata_model"
                            ]
                        }
                    },
                    {
                        "name": "return_type",
                        "in": "query",
                        "description": "The amount of information to be passed back in the response</br></br>The following return types are supported:<ul><li><b>count</b> - only the number of assets matching the query will be returned. Parameters other than the search criteria will be ignored</li><li><b>ids</b> - asset ids returned</li><li><b>objects</b> - asset objects returned</li><li><b>all</b> - both ids and objects returned</li></br>",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all",
                                "count",
                                "ids",
                                "objects"
                            ]
                        }
                    },
                    {
                        "name": "return_search_object",
                        "in": "query",
                        "description": "If true the SDK search object generated for this search is returned in the SearchResultRepresentation",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "context_notes",
                        "in": "query",
                        "description": "Optional notes on the context in which this search is being performed. This parameter has no impact on the search execution and is not persisted when searches are saved, but if the <b>return_search_object</b> parameter is set to true will be passed back with the search result.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Saved Search not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "search"
                ],
                "summary": "Execute a Saved Search",
                "description": "Generate a search result from a Saved Search.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "runSavedSearchAsPost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved Search Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "facet_config_id": {
                                        "type": "string",
                                        "description": "Facet Configuration Id"
                                    },
                                    "generate_facets": {
                                        "type": "string",
                                        "description": "Generated facets for this search",
                                        "default": "true",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "facet_restriction_list": {
                                        "$ref": "#/components/schemas/FacetRestrictionParam"
                                    },
                                    "merge_filters": {
                                        "type": "string",
                                        "description": "If true any facet restrictions or keyword filters passed in will be merged with the facet restrictions and keyword filters inherited from the saved search. If false the facet restrictions and keyword filters from the saved search will be ignored, and the passed in <b>facet_restriction_list</b> and <b>keyword_filter</b> parameters (if any) will be used exclusively.",
                                        "default": "true",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "sort": {
                                        "type": "string",
                                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending)."
                                    },
                                    "generate_type_counts": {
                                        "type": "string",
                                        "description": "Generate type counts for this search",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "apply_search_filters": {
                                        "type": "string",
                                        "description": "Apply search filter user preferences for this search",
                                        "default": "true",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "keyword_filter": {
                                        "type": "array",
                                        "description": "A keyword query that can be used to filter search results",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "keyword_filter_scope_id": {
                                        "type": "string",
                                        "description": "The keyword filter scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                                        "default": "3",
                                        "enum": [
                                            "1",
                                            "2",
                                            "3"
                                        ]
                                    },
                                    "keyword_query": {
                                        "type": "string",
                                        "description": "The keyword search query. If specified, this overrides any keyword query present in the saved search."
                                    },
                                    "keyword_scope_id": {
                                        "type": "string",
                                        "description": "The keyword scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                                        "default": "3",
                                        "enum": [
                                            "1",
                                            "2",
                                            "3"
                                        ]
                                    },
                                    "ignore_keyword_query": {
                                        "type": "string",
                                        "description": "Ignore the original keyword search query present in the saved search. If a <b>keyword_query</b> parameter has been specified, the original keyword search query will always be ignored regardless of how this parameter is set.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "search_condition_list": {
                                        "$ref": "#/components/schemas/SearchConditionListParam"
                                    },
                                    "ignore_search_condition_list": {
                                        "type": "string",
                                        "description": "Ignore the original search condition list present in the saved search. If a <b>search_condition_list</b> parameter has been specified, the original search condition list will always be ignored regardless of how this parameter is set.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "collection_filter": {
                                        "type": "string",
                                        "description": "Allows you to filter your search result to include only assets that are part of one of the specified list of collections. Specify a comma separated list of the ids of the collections to be used to filter results. If specified, this overrides any collection filter present in the saved search."
                                    },
                                    "ignore_collection_filter": {
                                        "type": "string",
                                        "description": "Ignore the original collection filter present in the saved search. If a <b>collection_filter</b> parameter has been specified, the original collection filter will always be ignored regardless of how this parameter is set.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "color_filter": {
                                        "type": "string",
                                        "description": "Allows you to filter your search result to include only assets whose score for the specified color exceeds the configured threshold. Specify the id of the color to be used to filter results.If specified, this overrides any color filter present in the saved search."
                                    },
                                    "ignore_color_filter": {
                                        "type": "string",
                                        "description": "Ignore the original color filter present in the saved search. If a <b>color_filter</b> parameter has been specified, the original color filter will always be ignored regardless of how this parameter is set.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "folder_filter": {
                                        "type": "string",
                                        "description": "Allows you to filter your search result to include only descendants of the specified folder. Specify the id of the folder to be used to filter results. If specified, this overrides any folder filter present in the saved search. The <b>folder_filter_type</b> parameter can be used to modify the behavior of the folder filter."
                                    },
                                    "folder_filter_type": {
                                        "type": "string",
                                        "description": "Modifies the behavior of the <b>folder_filter</b> parameter. If set to <b>all</b> all descendants of the specified folder are included in the filtered result. If set to <b>direct</b> only the immediate children of the specified folder are included in the filtered result. This parameter is ignored if the <b>folder_filter</b> parameter is not set.",
                                        "default": "all",
                                        "enum": [
                                            "all",
                                            "direct"
                                        ]
                                    },
                                    "ignore_folder_filter": {
                                        "type": "string",
                                        "description": "Ignore the original folder filter present in the saved search. If a <b>folder_filter</b> parameter has been specified, the original folder filter will always be ignored regardless of how this parameter is set.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "multilingual_language_code": {
                                        "type": "string",
                                        "description": "If searching multilingual fields, allows you to specify the code of the language varient to search against. If specified, this overrides any language varient code present in the saved search."
                                    },
                                    "load_type": {
                                        "type": "string",
                                        "description": "Data load type",
                                        "default": "system",
                                        "enum": [
                                            "full",
                                            "system",
                                            "metadata",
                                            "inherited_metadata",
                                            "custom"
                                        ]
                                    },
                                    "metadata_to_return": {
                                        "type": "string",
                                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>"
                                    },
                                    "preference_id": {
                                        "type": "string",
                                        "description": "Preference Id"
                                    },
                                    "filter_fields_by_model": {
                                        "type": "string",
                                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                                        "default": "true",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "load_multilingual_values": {
                                        "type": "string",
                                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "data_load_request": {
                                        "$ref": "#/components/schemas/DataLoadRequestParam"
                                    },
                                    "after": {
                                        "type": "string",
                                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection"
                                    },
                                    "before": {
                                        "type": "string",
                                        "description": "Retrieve collection starting at the position before the specified value and going backwards"
                                    },
                                    "limit": {
                                        "type": "string",
                                        "description": "Maximum number of items to retrieve."
                                    },
                                    "level_of_detail": {
                                        "type": "string",
                                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                                        "default": "full",
                                        "enum": [
                                            "slim",
                                            "full"
                                        ]
                                    },
                                    "group_by": {
                                        "type": "string",
                                        "description": "Attribute to group and count the assets in a asset collection",
                                        "enum": [
                                            "content_type",
                                            "metadata_model"
                                        ]
                                    },
                                    "return_type": {
                                        "type": "string",
                                        "description": "The amount of information to be passed back in the response</br></br>The following return types are supported:<ul><li><b>count</b> - only the number of assets matching the query will be returned. Parameters other than the search criteria will be ignored</li><li><b>ids</b> - asset ids returned</li><li><b>objects</b> - asset objects returned</li><li><b>all</b> - both ids and objects returned</li></br>",
                                        "default": "all",
                                        "enum": [
                                            "all",
                                            "count",
                                            "ids",
                                            "objects"
                                        ]
                                    },
                                    "return_search_object": {
                                        "type": "string",
                                        "description": "If true the SDK search object generated for this search is returned in the SearchResultRepresentation",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "context_notes": {
                                        "type": "string",
                                        "description": "Optional notes on the context in which this search is being performed. This parameter has no impact on the search execution and is not persisted when searches are saved, but if the <b>return_search_object</b> parameter is set to true will be passed back with the search result."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Saved Search not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/search/sortoptions": {
            "get": {
                "tags": [
                    "search"
                ],
                "summary": "Retrieve all search Sort Options",
                "description": "Retrieves all Sort Options available for sorting search results.",
                "operationId": "getCollectionAssetsSortOptions_1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchSortOptionCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/search/text": {
            "get": {
                "tags": [
                    "search"
                ],
                "summary": "Perform a text based Search",
                "description": "Generate a search result from the text search engine.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "runTextSearchAsGet",
                "parameters": [
                    {
                        "name": "keyword_query",
                        "in": "query",
                        "description": "The keyword search query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "keyword_scope_id",
                        "in": "query",
                        "description": "The keyword scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                        "schema": {
                            "type": "string",
                            "default": "3",
                            "enum": [
                                "1",
                                "2",
                                "3"
                            ]
                        }
                    },
                    {
                        "name": "search_condition_list",
                        "in": "query",
                        "description": "JSON representation of the SearchCondition List object</br></br>Text search supports the following SearchCondition sub types:<ul><li><b>SearchScalarCondition</b></li><li><b>SearchTabularCondition</b></li><li><b>SearchFulltextCondition</b></li></br>",
                        "schema": {
                            "$ref": "#/components/schemas/SearchConditionListParam"
                        }
                    },
                    {
                        "name": "search_config_id",
                        "in": "query",
                        "description": "Search Configuration Id. This parameter cannot be used if either the <b>fixed_condition_list</b> or <b>candidate_field_list</b> parameters have been specified.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fixed_condition_list",
                        "in": "query",
                        "description": "JSON representation of the Fixed SearchCondition List object. This parameter cannot be used if a <b>search_config_id</b> parameter has been specified. To execute a search based on a Search Configuration, specifying the <b>search_config_id</b> parameter is recommended. This parameter can be used if a saved search based on a Search Configuration has been retrieved, and you wish to modify and re-execute the search and retain the Fixed SearchCondition List inherited from the Search Configuration. </br></br>Text search supports the following SearchCondition sub types in the Fixed SearchCondition List:<ul><li><b>SearchScalarCondition</b></li><li><b>SearchTabularCondition</b></li></br>",
                        "schema": {
                            "$ref": "#/components/schemas/SearchConditionListParam"
                        }
                    },
                    {
                        "name": "candidate_field_list",
                        "in": "query",
                        "description": "JSON representation of the CandidateFieldListParam object. This parameter cannot be used if a <b>search_config_id</b> parameter has been specified. To execute a search based on a Search Configuration, specifying the <b>search_config_id</b> parameter is recommended. This parameter can be used if a saved search based on a Search Configuration has been retrieved, and you wish to modify and re-execute the search and retain the Candidate Field List inherited from the Search Configuration.",
                        "schema": {
                            "$ref": "#/components/schemas/CandidateFieldListParam"
                        }
                    },
                    {
                        "name": "keyword_search_allowed",
                        "in": "query",
                        "description": "Sets whether the UI should allow keyword search conditions to be added to this search. This parameter will be ignored if a <b>search_config_id</b> parameter has been specified. To execute a search based on a Search Configuration, specifying the <b>search_config_id</b> parameter is recommended. This parameter can be used if a saved search based on a Search Configuration has been retrieved, and you wish to modify and re-execute the search and retain the Keyword Search Allowed property inherited from the Search Configuration.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator<br>If not specified then set using the Tresource [SEARCH\\SERVER] DEFAULT_OPERATOR entry",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "or",
                                "and"
                            ]
                        }
                    },
                    {
                        "name": "facet_config_id",
                        "in": "query",
                        "description": "Facet Configuration Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "generate_facets",
                        "in": "query",
                        "description": "Generated facets for this search",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "facet_restriction_list",
                        "in": "query",
                        "description": "JSON representation of the FacetRestriction List object",
                        "schema": {
                            "$ref": "#/components/schemas/FacetRestrictionParam"
                        }
                    },
                    {
                        "name": "keyword_filter",
                        "in": "query",
                        "description": "A keyword query that can be used to filter search results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "keyword_filter_scope_id",
                        "in": "query",
                        "description": "The keyword filter scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                        "schema": {
                            "type": "string",
                            "default": "3",
                            "enum": [
                                "1",
                                "2",
                                "3"
                            ]
                        }
                    },
                    {
                        "name": "collection_filter",
                        "in": "query",
                        "description": "Allows you to filter your search result to include only assets that are part of one of the specified list of collections. Specify a comma separated list of the ids of the collections to be used to filter results.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "color_filter",
                        "in": "query",
                        "description": "Allows you to filter your search result to include only assets whose score for the specified color exceeds the configured threshold. Specify the id of the color to be used to filter results.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "folder_filter",
                        "in": "query",
                        "description": "Allows you to filter your search result to include only descendants of the specified folder. Specify the id of the folder to be used to filter results. The <b>folder_filter_type</b> parameter can be used to modify the behavior of the folder filter.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "folder_filter_type",
                        "in": "query",
                        "description": "Modifies the behavior of the <b>folder_filter</b> parameter. If set to <b>all</b> all descendants of the specified folder are included in the filtered result. If set to <b>direct</b> only the immediate children of the specified folder are included in the filtered result. This parameter is ignored if the <b>folder_filter</b> parameter is not set.",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all",
                                "direct"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search_plugin_id",
                        "in": "query",
                        "description": "The search plugin id",
                        "schema": {
                            "type": "string",
                            "default": "ARTESIA.PLUGIN.SEARCH.SOLR.V1"
                        }
                    },
                    {
                        "name": "generate_type_counts",
                        "in": "query",
                        "description": "Generate type counts for this search",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "apply_search_filters",
                        "in": "query",
                        "description": "Apply search filter user preferences for this search",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "multilingual_language_code",
                        "in": "query",
                        "description": "If searching multilingual fields, allows you to specify the code of the language varient to search against",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "description": "Attribute to group and count the assets in a asset collection",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "content_type",
                                "metadata_model"
                            ]
                        }
                    },
                    {
                        "name": "return_type",
                        "in": "query",
                        "description": "The amount of information to be passed back in the response</br></br>The following return types are supported:<ul><li><b>count</b> - only the number of assets matching the query will be returned. Parameters other than the search criteria will be ignored</li><li><b>ids</b> - asset ids returned</li><li><b>objects</b> - asset objects returned</li><li><b>all</b> - both ids and objects returned</li></br>",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all",
                                "count",
                                "ids",
                                "objects"
                            ]
                        }
                    },
                    {
                        "name": "return_search_object",
                        "in": "query",
                        "description": "If true the SDK search object generated for this search is returned in the SearchResultRepresentation",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "context_notes",
                        "in": "query",
                        "description": "Optional notes on the context in which this search is being performed. This parameter has no impact on the search execution and is not persisted when searches are saved, but if the <b>return_search_object</b> parameter is set to true will be passed back with the search result.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Facet Configuration not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "search"
                ],
                "summary": "Perform a text based Search",
                "description": "Generate a search result from the text search engine.<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "runTextSearchAsPost",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "keyword_query": {
                                        "type": "string",
                                        "description": "The keyword search query"
                                    },
                                    "keyword_scope_id": {
                                        "type": "string",
                                        "description": "The keyword scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                                        "default": "3",
                                        "enum": [
                                            "1",
                                            "2",
                                            "3"
                                        ]
                                    },
                                    "search_condition_list": {
                                        "$ref": "#/components/schemas/SearchConditionListParam"
                                    },
                                    "search_config_id": {
                                        "type": "string",
                                        "description": "Search Configuration Id. This parameter cannot be used if either the <b>fixed_condition_list</b> or <b>candidate_field_list</b> parameters have been specified."
                                    },
                                    "fixed_condition_list": {
                                        "$ref": "#/components/schemas/SearchConditionListParam"
                                    },
                                    "candidate_field_list": {
                                        "$ref": "#/components/schemas/CandidateFieldListParam"
                                    },
                                    "keyword_search_allowed": {
                                        "type": "string",
                                        "description": "Sets whether the UI should allow keyword search conditions to be added to this search. This parameter will be ignored if a <b>search_config_id</b> parameter has been specified. To execute a search based on a Search Configuration, specifying the <b>search_config_id</b> parameter is recommended. This parameter can be used if a saved search based on a Search Configuration has been retrieved, and you wish to modify and re-execute the search and retain the Keyword Search Allowed property inherited from the Search Configuration.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "default_operator": {
                                        "type": "string",
                                        "description": "The default operator<br>If not specified then set using the Tresource [SEARCH\\SERVER] DEFAULT_OPERATOR entry",
                                        "enum": [
                                            "or",
                                            "and"
                                        ]
                                    },
                                    "facet_config_id": {
                                        "type": "string",
                                        "description": "Facet Configuration Id"
                                    },
                                    "generate_facets": {
                                        "type": "string",
                                        "description": "Generated facets for this search",
                                        "default": "true",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "keyword_filter": {
                                        "type": "array",
                                        "description": "A keyword query that can be used to filter search results",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "keyword_filter_scope_id": {
                                        "type": "string",
                                        "description": "The keyword filter scope id<ul><li>1 - Metadata</li><li>2 - File Content</li><li>3 - Metadata and Content</li></ul>",
                                        "default": "3",
                                        "enum": [
                                            "1",
                                            "2",
                                            "3"
                                        ]
                                    },
                                    "facet_restriction_list": {
                                        "$ref": "#/components/schemas/FacetRestrictionParam"
                                    },
                                    "collection_filter": {
                                        "type": "string",
                                        "description": "Allows you to filter your search result to include only assets that are part of one of the specified list of collections. Specify a comma separated list of the ids of the collections to be used to filter results."
                                    },
                                    "color_filter": {
                                        "type": "string",
                                        "description": "Allows you to filter your search result to include only assets whose score for the specified color exceeds the configured threshold. Specify the id of the color to be used to filter results."
                                    },
                                    "folder_filter": {
                                        "type": "string",
                                        "description": "Allows you to filter your search result to include only descendants of the specified folder. Specify the id of the folder to be used to filter results. The <b>folder_filter_type</b> parameter can be used to modify the behavior of the folder filter."
                                    },
                                    "folder_filter_type": {
                                        "type": "string",
                                        "description": "Modifies the behavior of the <b>folder_filter</b> parameter. If set to <b>all</b> all descendants of the specified folder are included in the filtered result. If set to <b>direct</b> only the immediate children of the specified folder are included in the filtered result. This parameter is ignored if the <b>folder_filter</b> parameter is not set.",
                                        "default": "all",
                                        "enum": [
                                            "all",
                                            "direct"
                                        ]
                                    },
                                    "sort": {
                                        "type": "string",
                                        "description": "Comma separated list of sort fields. Field ids can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending)."
                                    },
                                    "search_plugin_id": {
                                        "type": "string",
                                        "description": "The search plugin id",
                                        "default": "ARTESIA.PLUGIN.SEARCH.SOLR.V1"
                                    },
                                    "generate_type_counts": {
                                        "type": "string",
                                        "description": "Generate type counts for this search",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "apply_search_filters": {
                                        "type": "string",
                                        "description": "Apply search filter user preferences for this search",
                                        "default": "true",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "multilingual_language_code": {
                                        "type": "string",
                                        "description": "If searching multilingual fields, allows you to specify the code of the language varient to search against"
                                    },
                                    "load_type": {
                                        "type": "string",
                                        "description": "Data load type",
                                        "default": "system",
                                        "enum": [
                                            "full",
                                            "system",
                                            "metadata",
                                            "inherited_metadata",
                                            "custom"
                                        ]
                                    },
                                    "metadata_to_return": {
                                        "type": "string",
                                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>"
                                    },
                                    "preference_id": {
                                        "type": "string",
                                        "description": "Preference Id"
                                    },
                                    "filter_fields_by_model": {
                                        "type": "string",
                                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                                        "default": "true",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "load_multilingual_values": {
                                        "type": "string",
                                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "data_load_request": {
                                        "$ref": "#/components/schemas/DataLoadRequestParam"
                                    },
                                    "after": {
                                        "type": "string",
                                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection"
                                    },
                                    "before": {
                                        "type": "string",
                                        "description": "Retrieve collection starting at the position before the specified value and going backwards"
                                    },
                                    "limit": {
                                        "type": "string",
                                        "description": "Maximum number of items to retrieve."
                                    },
                                    "level_of_detail": {
                                        "type": "string",
                                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                                        "default": "full",
                                        "enum": [
                                            "slim",
                                            "full"
                                        ]
                                    },
                                    "group_by": {
                                        "type": "string",
                                        "description": "Attribute to group and count the assets in a asset collection",
                                        "enum": [
                                            "content_type",
                                            "metadata_model"
                                        ]
                                    },
                                    "return_type": {
                                        "type": "string",
                                        "description": "The amount of information to be passed back in the response</br></br>The following return types are supported:<ul><li><b>count</b> - only the number of assets matching the query will be returned. Parameters other than the search criteria will be ignored</li><li><b>ids</b> - asset ids returned</li><li><b>objects</b> - asset objects returned</li><li><b>all</b> - both ids and objects returned</li></br>",
                                        "default": "all",
                                        "enum": [
                                            "all",
                                            "count",
                                            "ids",
                                            "objects"
                                        ]
                                    },
                                    "return_search_object": {
                                        "type": "string",
                                        "description": "If true the SDK search object generated for this search is returned in the SearchResultRepresentation",
                                        "default": "false",
                                        "enum": [
                                            "true",
                                            "false"
                                        ]
                                    },
                                    "context_notes": {
                                        "type": "string",
                                        "description": "Optional notes on the context in which this search is being performed. This parameter has no impact on the search execution and is not persisted when searches are saved, but if the <b>return_search_object</b> parameter is set to true will be passed back with the search result."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Facet Configuration not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/search/text/suggestions": {
            "get": {
                "tags": [
                    "search"
                ],
                "summary": "Retrieve search suggestions",
                "description": "Retrieve search suggestions for the specified input string.",
                "operationId": "retrieveSearchSuggestions",
                "parameters": [
                    {
                        "name": "input",
                        "in": "query",
                        "description": "The input suggestions are being requested for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search_plugin_id",
                        "in": "query",
                        "description": "The search plugin id",
                        "schema": {
                            "type": "string",
                            "default": "ARTESIA.PLUGIN.SEARCH.SOLR.V1"
                        }
                    },
                    {
                        "name": "max_suggestions",
                        "in": "query",
                        "description": "Maximum number of search suggestions to retrieve. If not specified the value defined in the DEFAULT_MAX_SUGGESTIONS setting will be used.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "index_id",
                        "in": "query",
                        "description": "Id of the index suggestions will be generated from. If not specified the value defined in the DEFAULT_SUGGESTION_INDEX_ID setting will be used.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchSuggestionResultRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/searchconfigurations": {
            "get": {
                "tags": [
                    "searchconfigurations"
                ],
                "summary": "Retrieve all Search Configurations",
                "description": "Retrieve all Search Configurations. Search Configurations are used to implement Advanced Search. Either the full Search Configuration representation can be retrieved, or just a partial representation. A partial representation does not include the search criteria, and is intended for use in generating a list of available Search Configurations.",
                "operationId": "getSearchConfigurations",
                "parameters": [
                    {
                        "name": "retrieval_type",
                        "in": "query",
                        "description": "The retrieval type",
                        "schema": {
                            "type": "string",
                            "default": "partial",
                            "enum": [
                                "full",
                                "partial"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchConfigurationCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/searchconfigurations/{id}": {
            "get": {
                "tags": [
                    "searchconfigurations"
                ],
                "summary": "Retrieve a Search Configuration",
                "description": "Retrieve a Search Configuration by search configuration id. Search Configurations are used to implement Advanced Search.",
                "operationId": "getSearchConfiguration",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Search Configuration Id.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchConfigurationRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Search Configuration not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/searchoperators": {
            "get": {
                "tags": [
                    "searchoperators"
                ],
                "summary": "Retrieve all Search Operators",
                "description": "Retrieve all Search Operators. Search Operators are used when creating fielded search conditions. Not all Search Operators are supported for text based searches. The subset of operators valid for text based searches can be retrieved by using the <b>search_type</b> parameter.",
                "operationId": "getSearchOperators",
                "parameters": [
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "The search type",
                        "schema": {
                            "type": "string",
                            "default": "database",
                            "enum": [
                                "database",
                                "text"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchOperatorCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/searchscopes": {
            "get": {
                "tags": [
                    "searchscopes"
                ],
                "summary": "Retrieve all Search Scopes",
                "description": "Retrieve all Search Scopes. Search Scopes are used when performing keyword searches to specify what data will be searched.",
                "operationId": "getSearchScopes",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchScopeCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/securitypolicies": {
            "get": {
                "tags": [
                    "securitypolicies"
                ],
                "summary": "Retrieve all Security Policies",
                "description": "Retrieve all Security Policies. Optionally only Security Policies which the user has edit permission for may be retrieved.",
                "operationId": "getSecurityPolicies",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityPoliciesCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/securitypolicies/{id}": {
            "get": {
                "tags": [
                    "securitypolicies"
                ],
                "summary": "Retrieve a Security Policy",
                "description": "Retrieve a Security Policy by security policy id.",
                "operationId": "getSecurityPolicy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Security Policy Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityPolicyRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Security Policy not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/securitypolicies/{id}/permissions": {
            "get": {
                "tags": [
                    "securitypolicies"
                ],
                "summary": "Retrieve Security Policy permissions for all User Groups or retrieves only Security Policies with permissions assigned.",
                "description": "Retrieve Security Policy permissions for all User Groups or retrieves only Security Policies with permissions assigned atleast at one level in the hierrachy. Permissions will be retrieved in a tree representation based on the User Group hierarchy.",
                "operationId": "getSecurityPolicyPermissionsTree",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Security Policy Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_security_policies_by_permissions_assigned",
                        "in": "query",
                        "description": "Optional flag that indicates whether all the security policies to be retrieved or only the security policies with permissions assigned atleast at one level in the hierrachy to be retrieved. Set to true if only security policies with permissions assigned to be retrieved and false in case if all the security policies to be retrieved. Default value is false.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityPolicyPermissionsTreeRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/sessions": {
            "get": {
                "tags": [
                    "sessions"
                ],
                "summary": "Retrieve the Session",
                "description": "Retrieve the current security Session.",
                "operationId": "getSession",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "403": {
                        "description": "Access forbidden to the resource if user account is disabled or account is locked or password is expired or user has to change password."
                    },
                    "404": {
                        "description": "The security session is invalid"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "sessions"
                ],
                "summary": "Create a Session",
                "description": "Create a security Session in OTMM. It returns a valid SecuritySession object if the provided credentials are valid. This is equivalent to login to OTMM",
                "operationId": "createSession",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "password",
                                    "username"
                                ],
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "UserName/UserId"
                                    },
                                    "password": {
                                        "$ref": "#/components/schemas/PasswordParameter"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "sessions"
                ],
                "summary": "Delete the Session",
                "description": "Delete the current security Session. This is equivalent to logout from OTMM",
                "operationId": "deleteSession",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/sessions/oauth2/token": {
            "post": {
                "tags": [
                    "sessions"
                ],
                "summary": "Create/Refresh an access token",
                "description": "Create/Refresh an access token. You need to register an OAuth client in OTDS and obtain the client Id and secret key.For more info on how to create OAuth client,refer to the OTDS documentation.Intended for server-to-server authentication.This is equivalent to login from OTMM",
                "operationId": "generateOAuthToken",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "client_id",
                                    "client_secret",
                                    "grant_type"
                                ],
                                "type": "object",
                                "properties": {
                                    "grant_type": {
                                        "type": "string",
                                        "description": "Grant Type.Allowed values are client_credentials,password,refresh_token",
                                        "enum": [
                                            "client_credentials",
                                            "password",
                                            "refresh_token"
                                        ]
                                    },
                                    "client_id": {
                                        "type": "string",
                                        "description": "Client Id"
                                    },
                                    "client_secret": {
                                        "type": "string",
                                        "description": "Client Secret"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "Username. Applicable only if grant_type=password"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "Password Applicable only if grant_type=password"
                                    },
                                    "refresh_token": {
                                        "type": "string",
                                        "description": "Refresh Token. Applicable only if grant_type=refresh_token"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthTokenRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/sessions/otdssessions": {
            "post": {
                "tags": [
                    "sessions"
                ],
                "summary": "Request otds ticket for given resource",
                "description": "Request otds ticket for given resource id. It returns a new otds ticket for corresponding resource id",
                "operationId": "getTicketForOtdsResource",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "target_resource"
                                ],
                                "type": "object",
                                "properties": {
                                    "target_resource": {
                                        "type": "string",
                                        "description": "Target Resource"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OtdsSessionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/systemannouncements/me": {
            "get": {
                "tags": [
                    "systemannouncements"
                ],
                "summary": "Retrieve all system announcements",
                "description": "Retrieve list of system announcements",
                "operationId": "getAnnouncements",
                "parameters": [
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Generates new Announcments count from last login",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "LAST_LOGIN"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnnouncementCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "User not found with the specified name"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/systemdetails": {
            "get": {
                "tags": [
                    "systemdetails"
                ],
                "summary": "Retrieve the system details",
                "description": "Retrieve the system details",
                "operationId": "retreiveSystemDetails",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemDetailsRepresentation"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/systemdetails/helpURL": {
            "get": {
                "tags": [
                    "systemdetails"
                ],
                "summary": "Retrieve hosted help information.",
                "description": "Retrieve hosted help information. The retrieved url is used to view the application specific hosted help information.",
                "operationId": "getHostedHelp",
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "The unique help id assigned to an application. For instance OTMM is assigned 'medmgtmod-h-ucw'",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "topic",
                        "in": "query",
                        "description": "The topic/context to be displayed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of OT Help Content. Default value is 'ofh1'.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ofh1",
                                "mhp"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HostedHelpRepresentation"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/systemsettings": {
            "get": {
                "tags": [
                    "systemsettings"
                ],
                "summary": "Retrieve all System Settings",
                "description": "Retrieve all System Settings",
                "operationId": "getSystemSettings",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemSettingsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/systemsettings/supporteddateranges": {
            "get": {
                "tags": [
                    "systemsettings"
                ],
                "summary": "Retrieve all Supported Dynamic Date Ranges for retrieving data.",
                "description": "Retrieve all Supported Dynamic Date Ranges. The values retrieved are used for filtering content returned by server based on date ranges",
                "operationId": "getSupportedDateRanges",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/systemsettings/supportedduedateranges": {
            "get": {
                "tags": [
                    "systemsettings"
                ],
                "summary": "Retrieve all Supported Dynamic Due Date Ranges for retrieving data.",
                "description": "Retrieve all Supported Dynamic Due Date Ranges. The values retrieved are used for filtering content returned by server based on date ranges",
                "operationId": "getSupportedDueDateRanges",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/systemsettings/supportedlocales": {
            "get": {
                "tags": [
                    "systemsettings"
                ],
                "summary": "Retrieve all Supported Locales",
                "description": "Retrieve all Supported Locales. The values retrieved are derived from the SUPPORTED_LOCALES setting.",
                "operationId": "getSupportedLocales",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupportedLocaleCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "System Setting not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/systemsettings/supportedpriorities": {
            "get": {
                "tags": [
                    "systemsettings"
                ],
                "summary": "Retrieve all Supported priorities for retrieving data.",
                "description": "Retrieve all Supported Priorities. The values retrieved are used for filtering content returned by server based on priorities. Priorities are typically defined on user actions.",
                "operationId": "getSupportedPriorities",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/systemsettings/{id}": {
            "get": {
                "tags": [
                    "systemsettings"
                ],
                "summary": "Retrieve a System Setting",
                "description": "Retrieve a System Setting matching the given id.",
                "operationId": "getSystemSetting",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the system setting. Formed by combination of component, key and name delimited by \"^^\"",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemSettingRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "System Setting not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/tasks": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Get Tasks information for current user",
                "description": "Get Tasks information for current user with filters.",
                "operationId": "getTasks",
                "parameters": [
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.If limit is set to zero then only collection summary is returned assuming that the request is made only to retrieve the counts.If limit is not passed, the default limit will be picked from the 'INBOX_RECORD_COUNT' setting.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter retrieved Jobs based on the job's status. Parameter can be set to a comma separated list of status.",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all",
                                "inprogress",
                                "completed"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma separated list of sort options. Sort options can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending). Sorting on tasks is supported for the fields name, current_step_name, job_name, priority, due_date, end_date, start_date, status.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "job_name",
                        "in": "query",
                        "description": "Filter to retrieve Jobs based on the job's type. Parameter can be set to a comma separated list of job types.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_task_data",
                        "in": "query",
                        "description": "Flag to load job data",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_asset_details",
                        "in": "query",
                        "description": "Flag to load asset ids and asset count are part of tak. If set to true, will load asset details.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "asset_ids_limit",
                        "in": "query",
                        "description": "Maximum number of asset ids to retrieve. This parameter is honored only when load_asset_details is set to true. If limit is not passed, the default limit will be picked from the 'ASSET_IDS_TO_LOAD_INTO_TASK' setting. ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Date Range for retrieveing tasks by creation date. Dates ranges are calculate w.r.t server time.",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "TODAY",
                                "PAST_DAY",
                                "PAST_WEEK",
                                "PAST_MONTH",
                                "PAST_YEAR"
                            ]
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Date Range for retrieving tasks by completion date. Dates ranges are calculate w.r.t server time.",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "TODAY",
                                "PAST_DAY",
                                "PAST_WEEK",
                                "PAST_MONTH",
                                "PAST_YEAR"
                            ]
                        }
                    },
                    {
                        "name": "due_date",
                        "in": "query",
                        "description": "Date Ranges for retrieving tasks by due dates. Dates ranges are calculate w.r.t server time.Parameter can be set to a comma separated list of due dates.",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "TODAY",
                                "PAST_DAY",
                                "PAST_WEEK",
                                "PAST_MONTH",
                                "PAST_YEAR"
                            ]
                        }
                    },
                    {
                        "name": "task_end_date_start",
                        "in": "query",
                        "description": "Retrieving tasks by end date range, starting limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "task_end_date_end",
                        "in": "query",
                        "description": "Retrieving tasks by end date range, ending limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "task_start_date_start",
                        "in": "query",
                        "description": "Retrieving tasks by start date range, starting limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "task_start_date_end",
                        "in": "query",
                        "description": "Retrieving tasks by start date range, ending limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "task_due_date_start",
                        "in": "query",
                        "description": "Retrieving tasks by due date range, starting limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "task_due_date_end",
                        "in": "query",
                        "description": "Retrieving tasks by due date range, ending limit. Date format: 'yyyy-MM-dd'T'HH:mm:ss'. By default dates are calculated w.r.t server time. Server considers Dynamic date only if static date ranges are not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "priority",
                        "in": "query",
                        "description": "Filter retrieved Jobs based on the job's priority. Parameter can be set to a comma separated list of priority ids. Use the 'systemsettings/supportedpriorities' resource to get the list of priorities",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "HIGH",
                                "MEDIUM",
                                "LOW"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TasksCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/tasks/sortoptions": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Retrieve all Sort Options for Tasks",
                "description": "Retrieves the sort options available to sort all the tasks",
                "operationId": "getSortOptions_6",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/tasks/statusoptions": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Retrieve all Status Options for Tasks",
                "description": "Retrieves all supported Status Options available for retrieving Tasks.",
                "operationId": "getStatusOptions_1",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationOptionsCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/tasks/{id}": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Retrieve a specific user task",
                "description": "Retrieve user task by id",
                "operationId": "getTaskById_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the task to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_asset_details",
                        "in": "query",
                        "description": "Flag to load asset ids and asset count are part of tak. If set to true, will load asset details.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "asset_ids_limit",
                        "in": "query",
                        "description": "Maximum number of asset ids to retrieve. This parameter is honored only when load_asset_details is set to true. If limit is not passed, the default limit will be picked from the 'ASSET_IDS_TO_LOAD_INTO_TASK' setting. ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_job_steps",
                        "in": "query",
                        "description": "Flag to load the steps in the job where task is triggered from the job. If set to true, will load step.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "tasks"
                ],
                "summary": "Update a Task",
                "description": "Update task data for the specified Task.<br/>",
                "operationId": "updateTaskData",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the task to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representation of the TaskData object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskDataRepresentation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/tasks/{id}/assets": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Retrieve assets for task",
                "description": "Retrieve assets associated with a task by task id<p>The fields populated in the returned object is based on the <b>load_type</b> parameter value. The allowable load_type values are (full,system,metadata,inherited_metadata,custom). If the <b>load_type</b> parameter is set to <b>custom</b> then you must also provide a <b>data_load_request</b> parameter containing the JSON representation of a DataLoadRequest object. If the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b> then you may optionally set the <b>metadata_to_return</b> and/or <b>preference_id</b> parameters to restrict what metadata fields are retrieved. The <b>preference_id</b> parameter is also honored when <b>load_type</b> is <b>custom</b> </p><p>For <b>load_type</b> options that return metadata fields it is possible to suppress field definitions and retrieve just the values for metadata fields by specifying the request parameter <b>level_of_detail</b>. The allowed values are <b>slim</b>, or <b>full</b>(default)</p>",
                "operationId": "getAssetsForTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the task to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_task_asset_summary",
                        "in": "query",
                        "description": "Flag to load task asset summary like approval state and comment count. This flag is applicable only for review type tasks.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskAssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "tasks"
                ],
                "summary": "Add assets to task",
                "description": "Add all the given new assets to the task.",
                "operationId": "addNewTaskAssets",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the task to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "asset_ids"
                                ],
                                "type": "object",
                                "properties": {
                                    "asset_ids": {
                                        "type": "string",
                                        "description": "Comma separated list of asset id's"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskAssetCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/tasks/{id}/assets/{asset_id}/comments": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Retrieve task asset review comments.",
                "description": "Retrieve task asset review comments for given task id and asset id.",
                "operationId": "getTaskById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the task to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asset_id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskAssetReviewCommentsRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "put": {
                "tags": [
                    "tasks"
                ],
                "summary": "Add a comment for an Asset in a Task.",
                "description": "Add a comment for the specified Asset in the Task. Only the participants of the task can perform this action.",
                "operationId": "addAssetReviewTaskComment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the task to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asset_id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "comment",
                                    "job_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "job_id": {
                                        "type": "string",
                                        "description": "The job id"
                                    },
                                    "comment": {
                                        "type": "string",
                                        "description": "Asset comment."
                                    },
                                    "annotation_data": {
                                        "type": "string",
                                        "description": "Annotation data associated with the comment"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskOperationResultRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a comment on an Asset in a Task.",
                "description": "Delete a comment on the specified Asset in the Task. Only the comment creator can perform this action. Comments with an associated approval status cannot be deleted.",
                "operationId": "deleteAssetReviewTaskComment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the task to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asset_id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "comment_id",
                                    "job_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "job_id": {
                                        "type": "string",
                                        "description": "The job id"
                                    },
                                    "comment_id": {
                                        "type": "string",
                                        "description": "The comment id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The request has been completed successfully"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "403": {
                        "description": "Access forbidden to the resource "
                    },
                    "404": {
                        "description": "Comment not found with the specified id in the specified context"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/tasks/{id}/assets/{asset_id}/state": {
            "put": {
                "tags": [
                    "tasks"
                ],
                "summary": "Set the asset approval state for an asset in a task.",
                "description": "Set the asset approval state for an asset in a task.",
                "operationId": "addAssetReviewApproval",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the task to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asset_id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "approval_state",
                                    "job_id"
                                ],
                                "type": "object",
                                "properties": {
                                    "job_id": {
                                        "type": "string",
                                        "description": "The job id"
                                    },
                                    "approval_state": {
                                        "type": "string",
                                        "description": "Set asset approval state. The allowed values are 'APPROVED', 'REJECTED' and 'NONE'."
                                    },
                                    "comment": {
                                        "type": "string",
                                        "description": "Asset approval comment."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskOperationResultRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/tasks/{id}/assignees": {
            "patch": {
                "tags": [
                    "tasks"
                ],
                "summary": "Update Task Assignees",
                "description": "API to change the assignees of the task to other users or user group. This operation is allowed only for user who created the task.",
                "operationId": "assignTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the task to be assigned",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representation of the TaskAssignees object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskAssigneesParam"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/transferschemes": {
            "get": {
                "tags": [
                    "transferschemes"
                ],
                "summary": "Get Transfer Schemes",
                "description": "Get Transfer Schemes configured in the system",
                "operationId": "getTransferSchemes",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransferSchemesCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/transferschemes/{transfer_scheme}/sessions": {
            "post": {
                "tags": [
                    "transferschemes"
                ],
                "summary": "Get Transfer Scheme session",
                "description": "Get Transfer session for a transfer scheme",
                "operationId": "getTransferCredentialsByScheme",
                "parameters": [
                    {
                        "name": "transfer_scheme",
                        "in": "path",
                        "description": "Name of the transfer scheme",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransferSchemeSessionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/transformers": {
            "get": {
                "tags": [
                    "transformers"
                ],
                "summary": "Retrieve transformers list",
                "description": "Retrieve transformers list based on the given query paramaters",
                "operationId": "getTransformers",
                "parameters": [
                    {
                        "name": "where_export_transformer",
                        "in": "query",
                        "description": "Flag to retrieve only export transformer",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "where_import_transformer",
                        "in": "query",
                        "description": "Flag to retrieve only import transformer",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "where_delivery_transformer",
                        "in": "query",
                        "description": "Flag to retrieve only export delivery transformer",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "where_job_transformer",
                        "in": "query",
                        "description": "Flag to retrieve only export job transformer",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "where_scheduler_transformer",
                        "in": "query",
                        "description": "Flag to retrieve export job transformer which can be schedule",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "where_transformer_services_category",
                        "in": "query",
                        "description": "Filter by transformer services category. Allowed values are 'internal' and 'external'. When this property value is set to 'external' all other falgs and properties will be ignored.",
                        "schema": {
                            "type": "string",
                            "default": "internal",
                            "enum": [
                                "INTERNAL",
                                "EXTERNAL"
                            ]
                        }
                    },
                    {
                        "name": "where_resolve_template_values",
                        "in": "query",
                        "description": "Flag to replace transformer template values with actual values",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "content_types",
                        "in": "query",
                        "description": "Retrieve export transformer associated with the content types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransformersCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/usageapplications": {
            "get": {
                "tags": [
                    "usageapplications"
                ],
                "summary": "Retrieve usage applications",
                "description": "Retrieve all the usage applications registered in the system.",
                "operationId": "getUsageApplications",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsageApplicationCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "usageapplications"
                ],
                "summary": "Register a new usage application",
                "description": "The API to register a new usage application into the system. The name of the application must be unique and it returns the numeric id of the registered application.",
                "operationId": "registerUsageApplication",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the usage application and it must be unique"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Description of the usage application"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsageApplicationRepresentation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/usagecategories": {
            "get": {
                "tags": [
                    "usagecategories"
                ],
                "summary": "Retrieve usage categories",
                "description": "Retrieve all the usage categories registered in the system.",
                "operationId": "getUsageCategories",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsageCategoryCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "usagecategories"
                ],
                "summary": "Register a new usage category",
                "description": "The API to register a new usage category into the system. The name of the category must be unique and it will return the numeric id of the registered category.",
                "operationId": "registerUsageCategory",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the usage category and it must be unique"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Description of the usage category"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsageCategoryRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/usergroups/me": {
            "get": {
                "tags": [
                    "usergroups"
                ],
                "summary": "Retrieve User Group(s) for the currently logged in user",
                "description": "Retrieve User Group(s) for the currently logged in user. Optionally comma separated list of user group ids associated with a user can be passed.",
                "operationId": "getUserGroupDetailsForUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "User Group Id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroupCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/usergroups/{id}/children": {
            "get": {
                "tags": [
                    "usergroups"
                ],
                "summary": "Retrieve User Group(s) for a given parent group",
                "description": "Retrieve a User Group's child group(s). This will return only user groups which are immediate children of the given parent user group.",
                "operationId": "getUserGroupChildren",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User Group Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroupCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Retrieve Users",
                "description": "Retrieve all Users with filters.<p>Filters are case-insensitive. For those filter parameters documented as supporting wildcards below, a '*' in the parameter value will match 0 or more characters and a '?' will match exactly 1 character. If multiple filters are specified, all filters must be matched.",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "name": "where_first_name",
                        "in": "query",
                        "description": "Filter by user's first name. This parameter supports wildcards.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "where_last_name",
                        "in": "query",
                        "description": "Filter by user's last name. This parameter supports wildcards.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "where_first_and_last_name",
                        "in": "query",
                        "description": "Filter by user's first and last name. This parameter supports wildcards.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "where_login_name",
                        "in": "query",
                        "description": "Filter by user's login name. This parameter supports wildcards.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "where_user_id",
                        "in": "query",
                        "description": "Filter by user's login id. This parameter supports wildcards.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "where_department",
                        "in": "query",
                        "description": "Filter by user's department.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "where_role_id",
                        "in": "query",
                        "description": "Filter by numeric representation of user's role id.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "where_fet_id",
                        "in": "query",
                        "description": "Filter by FET id. Only users who have been granted the specified FET will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "where_user_status",
                        "in": "query",
                        "description": "First by user's status (active, inactive).",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active_only",
                                "inactive_only"
                            ]
                        }
                    },
                    {
                        "name": "where_email_status",
                        "in": "query",
                        "description": "First by user's email status (active, inactive). To be considered active both the email_enabled property must be set to true, and the email_address property must have a value populated.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active_only",
                                "inactive_only"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Property to sort the users returned by. Sort option can optionally be prepended with 'asc_' or 'desc_' to specify ascending or descending sort (default is ascending).",
                        "schema": {
                            "type": "string",
                            "default": "login_name",
                            "enum": [
                                "first_name",
                                "first_and_last_name",
                                "last_name",
                                "login_name",
                                "preference",
                                "role",
                                "user_id",
                                "user_name"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Security Policy not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/users/me": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Retrieve the current User",
                "description": "Retrieve the currently logged on User.",
                "operationId": "getUserDetails",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/users/me/sessions": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Retrieve all active session info for currently logged on User",
                "description": "Retrieve all active session info for currently logged on User.<p> The response of the operation does not include the internal sessions created by Media Management and the current logged in session</p>",
                "operationId": "getAllActiveSessions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionInfoCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete all the active sessions for currently logged on User",
                "description": "Delete all the active sessions for currently logged on User.<p> This operation will not delete the internal sessions associated with the user.",
                "operationId": "deleeAllActiveSessions",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/users/{userIdentifier}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a User",
                "description": "Retrieve a User by username or userId.<br>For example if a user <b>ABC</b> is having username as <b>abc</b> and userId as <b>1234</b>, then you can either pass <b>abc</b> or <b>1234</b> in place of userIdentifier to get the details of that particular user.",
                "operationId": "getUserByLoginName",
                "parameters": [
                    {
                        "name": "userIdentifier",
                        "in": "path",
                        "description": "UserName/UserId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Security Policy not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/users/{userid}/updaterole": {
            "patch": {
                "tags": [
                    "users"
                ],
                "operationId": "updateRole",
                "parameters": [
                    {
                        "name": "userid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "role_name": {
                                        "type": "string"
                                    },
                                    "user_type": {
                                        "type": "string"
                                    },
                                    "is_group_administrator": {
                                        "type": "string"
                                    },
                                    "is_security_administrator": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Security Policy not found with the specified id"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/usertypes": {
            "get": {
                "tags": [
                    "usertypes"
                ],
                "summary": "Retrieve all User Type",
                "description": "Retrieve all User Type",
                "operationId": "getAllUserType",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTypeCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "User not found with the specified name"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/usertypes/{userTypeId}": {
            "get": {
                "tags": [
                    "usertypes"
                ],
                "summary": "Retrieve all User Type",
                "description": "Retrieve all User Type",
                "operationId": "getUserTypeById",
                "parameters": [
                    {
                        "name": "userTypeId",
                        "in": "path",
                        "description": "User Type Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTypeRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "User not found with the specified name"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/videos/proxies": {
            "patch": {
                "tags": [
                    "videos"
                ],
                "summary": "Create a Proxies",
                "description": "Create a Proxies for the given video asset.<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "createProxies",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/videos/subclips/state": {
            "put": {
                "tags": [
                    "videos"
                ],
                "summary": "delete or un-delete of an video sub clip",
                "description": "delete or un-delete of an video sub clip<p>While using selection context to filter the assets based on permissions, pass permissions_filter paramater in selection context. The valid permission filters are {ASSETVIEW_PERM, SUMMARYVIEW_PERM, PREVIEWVIEW_PERM, EXPORT_PERM, SUBSCRIBE_PERM,METAEDIT_PERM, CONTENTEDIT_PERM, MEMBERSHIPEDIT_PERM, DELETEASSET_PERM, EDITPARENTS_PERM, CUSTOM01_PERM, CUSTOM02_PERM, CUSTOM03_PERM, CUSTOM04_PERM}",
                "operationId": "deleteClips",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "action",
                                    "selection_context"
                                ],
                                "type": "object",
                                "properties": {
                                    "selection_context": {
                                        "$ref": "#/components/schemas/SelectionContextParam"
                                    },
                                    "action": {
                                        "type": "string",
                                        "description": "Video sub clip 'state change' action; allowed values are delete, un_delete",
                                        "enum": [
                                            "delete",
                                            "un_delete"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAssetResultRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/videos/{id}/insight/persondetails": {
            "patch": {
                "tags": [
                    "videos"
                ],
                "summary": "Update a person's exisitng name in a video along with those who are not recognized or marked as unknown.",
                "description": "Update a person's exisitng name in a video along with those who are not recognized or marked as unknown.",
                "operationId": "updateVideoFaceDetails",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "assetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "video_person_edit",
                        "in": "query",
                        "description": "JSON object for VideoInsightPersonParam",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/VideoInsightPersonParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/videos/{id}/insights": {
            "get": {
                "tags": [
                    "videos"
                ],
                "summary": "Retrieve insights of video asset.",
                "description": "Retrieve insights of video asset. The request needs the pagination parameters to be passed.",
                "operationId": "getVideoInsights",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "assetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "video_insight_request",
                        "in": "query",
                        "description": "insightsRequestParam",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/VideoInsightRequestParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoInsightsRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/videos/{id}/keyframes": {
            "get": {
                "tags": [
                    "videos"
                ],
                "summary": "Retrieve keyframes of video asset.",
                "description": "Retrieve keyframes of video asset. The request needs the pagination parameters to be passed.",
                "operationId": "getkeyFrames",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoKeyframesCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/videos/{id}/speech": {
            "delete": {
                "tags": [
                    "videos"
                ],
                "summary": "Delete video speech data for Asset Id.",
                "description": "Delete video speech data for Asset Id.",
                "operationId": "deleteVideoSpeechText",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "assetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "video_speech_text_param",
                        "in": "query",
                        "description": "video speech text param",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/VideoSpeechTextParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "patch": {
                "tags": [
                    "videos"
                ],
                "summary": "Update video speech data for Asset Id.",
                "description": "Update video speech data for Asset Id.",
                "operationId": "updateVideoSpeechText",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "assetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "video_speech_text_param",
                        "in": "query",
                        "description": "videoSpeechTextParam",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/VideoSpeechTextParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/videos/{id}/speech/search": {
            "get": {
                "tags": [
                    "videos"
                ],
                "summary": "Retrieve specific speech text.",
                "description": "Retrieve specific speech text by passing a specific string and returns speech text which contains the requested string",
                "operationId": "getTranscriptSearch",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "assetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "searchable string",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoSpeachTextCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/videos/{id}/speech/srtfile": {
            "get": {
                "tags": [
                    "videos"
                ],
                "summary": "Get downloadable srt file.",
                "description": "Get downloadable srt file from an video by passing the video assetId.",
                "operationId": "getVideoSpeechDownloadableSrtFile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "assetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user-agent",
                        "in": "header",
                        "description": "User-Agent HTTP header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enable_caching",
                        "in": "query",
                        "description": "Is caching enabled for this request",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "format": "java.io.Inputstream"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "204": {
                        "description": "No content was found"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        },
        "/v6/videos/{id}/subclips": {
            "get": {
                "tags": [
                    "videos"
                ],
                "summary": "Retrieve sub clips of video asset.",
                "description": "Retrieve sub clips of video asset. The request needs the pagination parameters to be passed.",
                "operationId": "getClips",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "load_type",
                        "in": "query",
                        "description": "Data load type",
                        "schema": {
                            "type": "string",
                            "default": "system",
                            "enum": [
                                "full",
                                "system",
                                "metadata",
                                "inherited_metadata",
                                "custom"
                            ]
                        }
                    },
                    {
                        "name": "metadata_to_return",
                        "in": "query",
                        "description": "Comma separated list of metadata field ids. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>metadata</b> or <b>inherited_metadata</b>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preference_id",
                        "in": "query",
                        "description": "Preference Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter_fields_by_model",
                        "in": "query",
                        "description": "Filter metadata fields relevant to asset model. This parameter is honored only when <b>metadata_to_return</b> and/or  <b>preference_id</b> are set in the request.",
                        "schema": {
                            "type": "string",
                            "default": "true",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "load_multilingual_values",
                        "in": "query",
                        "description": "Load multilingual values. This parameter is honored only when the <b>load_type</b> parameter is set to <b>metadata</b> or <b>full</b>. For the <b>custom</b> load type multilingual values can be requested using the <b>load_multilingual_field_values</b> property of the <b>data_load_request</b> parameter.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    },
                    {
                        "name": "data_load_request",
                        "in": "query",
                        "description": "JSON representation of DataLoadRequest object. This parameter is ignored unless the <b>load_type</b> parameter is set to <b>custom</b>",
                        "schema": {
                            "$ref": "#/components/schemas/DataLoadRequestParam"
                        }
                    },
                    {
                        "name": "level_of_detail",
                        "in": "query",
                        "description": "Controls whether field definitions are suppressed in the metadata fields returned.",
                        "schema": {
                            "type": "string",
                            "default": "full",
                            "enum": [
                                "slim",
                                "full"
                            ]
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Retrieve collection starting at the position after the specified value. If neither the <b>after</b> or <b>before</b> parameters are specified this is equivalent to <b>after=0</b> and will retrieve items starting at the beginning of the collection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Retrieve collection starting at the position before the specified value and going backwards",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of items to retrieve.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoClipCollectionRepresentation"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            },
            "post": {
                "tags": [
                    "videos"
                ],
                "summary": "Create a Sub Clip",
                "description": "Creates a new clip for the given video asset. The ranging of the clip within and including the specified time codes for a given asset.",
                "operationId": "createClip",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Asset Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The video clip representation. Parameters include all sub clip information",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VideoClipRepresentation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The request has been completed successfully"
                    },
                    "401": {
                        "description": "Unauthorized access to the resource"
                    },
                    "404": {
                        "description": "Asset not found with the specified id"
                    },
                    "400": {
                        "description": "A required parameter is not specified or has null or invalid value"
                    },
                    "503": {
                        "description": "Service is unavailable, refer to the response for more information"
                    },
                    "500": {
                        "description": "An internal server error occurred, refer to the response for more information"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Announcement": {
                "type": "object",
                "properties": {
                    "background_colour": {
                        "type": "string"
                    },
                    "expiry_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "message": {
                        "type": "string"
                    },
                    "release_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "text_colour": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Announcement"
                }
            },
            "AnnouncementCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "system_announcements": {
                        "type": "object",
                        "properties": {
                            "announcement_list": {
                                "type": "array",
                                "xml": {
                                    "name": "announcement_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/Announcement"
                                }
                            }
                        },
                        "format": "AnnouncementCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "system_announcements"
                }
            },
            "BodyPart": {
                "type": "object",
                "properties": {
                    "contentDisposition": {
                        "$ref": "#/components/schemas/ContentDisposition"
                    },
                    "entity": {
                        "type": "object"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "mediaType": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "subtype": {
                                "type": "string"
                            },
                            "parameters": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "wildcardType": {
                                "type": "boolean"
                            },
                            "wildcardSubtype": {
                                "type": "boolean"
                            }
                        }
                    },
                    "messageBodyWorkers": {
                        "$ref": "#/components/schemas/MessageBodyWorkers"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/MultiPart"
                    },
                    "providers": {
                        "type": "object"
                    },
                    "parameterizedHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ParameterizedHeader"
                            }
                        }
                    }
                }
            },
            "ContentDisposition": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modificationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "readDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "FormDataBodyPart": {
                "type": "object",
                "properties": {
                    "contentDisposition": {
                        "$ref": "#/components/schemas/ContentDisposition"
                    },
                    "entity": {
                        "type": "object"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "mediaType": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "subtype": {
                                "type": "string"
                            },
                            "parameters": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "wildcardType": {
                                "type": "boolean"
                            },
                            "wildcardSubtype": {
                                "type": "boolean"
                            }
                        }
                    },
                    "messageBodyWorkers": {
                        "$ref": "#/components/schemas/MessageBodyWorkers"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/MultiPart"
                    },
                    "providers": {
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "formDataContentDisposition": {
                        "$ref": "#/components/schemas/FormDataContentDisposition"
                    },
                    "simple": {
                        "type": "boolean"
                    },
                    "parameterizedHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ParameterizedHeader"
                            }
                        }
                    }
                }
            },
            "FormDataContentDisposition": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modificationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "readDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "MessageBodyWorkers": {
                "type": "object"
            },
            "MultiPart": {
                "type": "object",
                "properties": {
                    "contentDisposition": {
                        "$ref": "#/components/schemas/ContentDisposition"
                    },
                    "entity": {
                        "type": "object"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "mediaType": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "subtype": {
                                "type": "string"
                            },
                            "parameters": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "wildcardType": {
                                "type": "boolean"
                            },
                            "wildcardSubtype": {
                                "type": "boolean"
                            }
                        }
                    },
                    "messageBodyWorkers": {
                        "$ref": "#/components/schemas/MessageBodyWorkers"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/MultiPart"
                    },
                    "providers": {
                        "type": "object"
                    },
                    "bodyParts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BodyPart"
                        }
                    },
                    "parameterizedHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ParameterizedHeader"
                            }
                        }
                    }
                }
            },
            "ParameterizedHeader": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "JobHandle": {
                "type": "object",
                "properties": {
                    "job_id": {
                        "type": "string",
                        "xml": {
                            "name": "job_id"
                        }
                    }
                },
                "xml": {
                    "name": "job_handle"
                }
            },
            "Asset": {
                "type": "object",
                "properties": {
                    "access_control_descriptor": {
                        "$ref": "#/components/schemas/XmlAccessControlDescriptor"
                    },
                    "asset_color_infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AssetColorInfo"
                        }
                    },
                    "asset_content_info": {
                        "$ref": "#/components/schemas/AssetContentInfo"
                    },
                    "asset_id": {
                        "type": "string"
                    },
                    "asset_lock_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "asset_lock_state_user_id": {
                        "type": "string"
                    },
                    "asset_state": {
                        "type": "string"
                    },
                    "asset_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "asset_state_user_id": {
                        "type": "string"
                    },
                    "business_unit_id": {
                        "type": "string"
                    },
                    "checked_out": {
                        "type": "boolean"
                    },
                    "collection_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "content_editable": {
                        "type": "boolean"
                    },
                    "content_lock_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "content_lock_state_user_id": {
                        "type": "string"
                    },
                    "content_lock_state_user_name": {
                        "type": "string"
                    },
                    "content_size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "content_state": {
                        "type": "string"
                    },
                    "content_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "content_state_user_id": {
                        "type": "string"
                    },
                    "content_state_user_name": {
                        "type": "string"
                    },
                    "content_sub_type": {
                        "type": "string"
                    },
                    "content_type": {
                        "type": "string"
                    },
                    "creator_id": {
                        "type": "string"
                    },
                    "data_type": {
                        "type": "string"
                    },
                    "date_imported": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "date_last_updated": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "deep_zoom_info": {
                        "$ref": "#/components/schemas/DeepZoomInfo"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "deletion_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "deletion_state_user_id": {
                        "type": "string"
                    },
                    "deletion_state_user_name": {
                        "type": "string"
                    },
                    "delivery_service_url": {
                        "type": "string"
                    },
                    "expired": {
                        "type": "boolean"
                    },
                    "import_job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "import_user_name": {
                        "type": "string"
                    },
                    "inherited_metadata_collections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InheritedMetadataCollection"
                        }
                    },
                    "latest_version": {
                        "type": "boolean"
                    },
                    "legacy_model_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "links": {
                        "$ref": "#/components/schemas/LinkCollection"
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "master_content_info": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetadataCollection"
                    },
                    "metadata_lock_state_user_name": {
                        "type": "string"
                    },
                    "metadata_model_id": {
                        "type": "string"
                    },
                    "metadata_state_user_name": {
                        "type": "string"
                    },
                    "mime_type": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "original_asset_id": {
                        "type": "string"
                    },
                    "path_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContainerPath"
                        }
                    },
                    "progressive_download_url": {
                        "type": "string"
                    },
                    "rendition_content": {
                        "$ref": "#/components/schemas/RenditionContentInfo"
                    },
                    "review_asset_approval_summary_collection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReviewJobAssetApprovalSummary"
                        }
                    },
                    "review_info_collection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreativeReviewInfo"
                        }
                    },
                    "security_policy_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SecurityPolicy"
                        }
                    },
                    "streaming_url": {
                        "type": "string"
                    },
                    "subscribed_to": {
                        "type": "boolean"
                    },
                    "thumbnail_content_id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type when not base Asset object."
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "watermark_template_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "xml": {
                    "name": "Asset"
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "ᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠ": "#/components/schemas/Asset",
                        "com.artesia.container.Container": "#/components/schemas/SwaggerContainer"
                    }
                }
            },
            "AssetColorInfo": {
                "type": "object",
                "properties": {
                    "color_id": {
                        "type": "string"
                    },
                    "score": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "AssetContentInfo": {
                "type": "object",
                "properties": {
                    "master_content": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "supporting_content": {
                        "type": "array",
                        "properties": {},
                        "items": {
                            "$ref": "#/components/schemas/ContentInfo"
                        }
                    }
                },
                "xml": {
                    "name": "AssetContentInfo"
                }
            },
            "AssetRepresentation": {
                "type": "object",
                "properties": {
                    "asset_resource": {
                        "type": "object",
                        "properties": {
                            "asset": {
                                "$ref": "#/components/schemas/Asset"
                            }
                        },
                        "format": "AssetRepresentation"
                    }
                },
                "xml": {
                    "name": "asset_resource"
                }
            },
            "ContainerChildCounts": {
                "type": "object",
                "properties": {
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "container_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "total_child_count": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ContainerPath": {
                "type": "object",
                "properties": {
                    "complete": {
                        "type": "boolean"
                    },
                    "parents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LightContainer"
                        }
                    },
                    "sequence_number": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tree_descriptor": {
                        "$ref": "#/components/schemas/TreeDescriptor"
                    }
                }
            },
            "ContentData": {
                "required": [
                    "dataSource"
                ],
                "type": "object",
                "properties": {
                    "content_bytes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "data_source": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NO_CONTENT",
                            "BYTE_ARRAY",
                            "FILE",
                            "URL",
                            "INPUTSTREAM"
                        ]
                    },
                    "file": {
                        "type": "string",
                        "format": "file"
                    },
                    "relative_url": {
                        "type": "string"
                    },
                    "temp_file": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string",
                        "format": "url"
                    }
                }
            },
            "ContentInfo": {
                "type": "object",
                "properties": {
                    "content_checksum": {
                        "type": "string"
                    },
                    "content_data": {
                        "$ref": "#/components/schemas/ContentData"
                    },
                    "content_file_name": {
                        "type": "string"
                    },
                    "content_kind": {
                        "type": "string"
                    },
                    "content_manager_id": {
                        "type": "string"
                    },
                    "content_path": {
                        "type": "string"
                    },
                    "content_signed_url": {
                        "type": "string"
                    },
                    "content_size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "encoding": {
                        "type": "string"
                    },
                    "export_location": {
                        "type": "string"
                    },
                    "height": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "string"
                    },
                    "mime_type": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "storage_attributes_map": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,String>"
                    },
                    "text_content": {
                        "type": "string"
                    },
                    "unit_of_size": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "width": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "xml": {
                    "name": "ContentInfo"
                }
            },
            "CreativeReviewInfo": {
                "type": "object",
                "properties": {
                    "review_id": {
                        "type": "string"
                    },
                    "user_review_status": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "value": {
                                            "$ref": "#/components/schemas/ReviewAssetApprovalInfo"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<Integer,ReviewAssetApprovalInfo>"
                    }
                }
            },
            "DeepZoomInfo": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "type": "string"
                    },
                    "created_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "file_path": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "original_file": {
                        "type": "boolean"
                    }
                }
            },
            "InheritedMetadataCollection": {
                "type": "object",
                "properties": {
                    "container_id": {
                        "type": "string"
                    },
                    "container_name": {
                        "type": "string"
                    },
                    "container_type_id": {
                        "type": "string"
                    },
                    "container_type_name": {
                        "type": "string"
                    },
                    "inherited_metadata_values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InheritedMetadataFieldValue"
                        }
                    }
                }
            },
            "InheritedMetadataFieldValue": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "metadata_element": {
                        "$ref": "#/components/schemas/MetadataElement"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value_id": {
                        "$ref": "#/components/schemas/InheritedMetadataFieldValueID"
                    }
                }
            },
            "InheritedMetadataFieldValueID": {
                "required": [
                    "teamsId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "inherited_field_id": {
                        "type": "string"
                    },
                    "originator_id": {
                        "type": "string"
                    },
                    "teams_id": {
                        "type": "string"
                    },
                    "uoi_id": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "TeamsIdentifier"
                }
            },
            "LightContainer": {
                "type": "object",
                "properties": {
                    "container_state": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "original_uoi_id": {
                        "type": "string"
                    },
                    "sequence_number": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Link": {
                "required": [
                    "linkId"
                ],
                "type": "object",
                "properties": {
                    "containment_link_type_id_string": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "follow_latest_version_of_destination": {
                        "type": "boolean"
                    },
                    "link_id": {
                        "$ref": "#/components/schemas/LinkIdentifier"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "xml": {
                    "name": "Link"
                }
            },
            "LinkCollection": {
                "required": [
                    "sourceId"
                ],
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "properties": {},
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "source_id": {
                        "type": "string"
                    }
                }
            },
            "LinkIdentifier": {
                "type": "object",
                "properties": {
                    "destination_id": {
                        "type": "string"
                    },
                    "link_type_id": {
                        "type": "string"
                    },
                    "source_id": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "TeamsIdentifier"
                }
            },
            "MetadataCollection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "metadata_element_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MetadataElement"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type when not base MetadataCollection object."
                    }
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "ᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠ": "#/components/schemas/MetadataCollection",
                        "com.artesia.metadata.MetadataModel": "#/components/schemas/SwaggerMetadataModelCollection",
                        "com.artesia.metadata.MetadataCategory": "#/components/schemas/SwaggerMetadataCategoryCollection",
                        "com.artesia.metadata.MetadataTable": "#/components/schemas/SwaggerMetadataTableCollection"
                    }
                }
            },
            "MetadataElement": {
                "required": [
                    "id",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "description": "limited to MetadataField and MetadataTable subtypes",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.metadata.MetadataModel": "#/components/schemas/SwaggerMetadataModel",
                        "com.artesia.metadata.MetadataCategory": "#/components/schemas/SwaggerMetadataCategory",
                        "com.artesia.metadata.MetadataTable": "#/components/schemas/SwaggerMetadataTable",
                        "com.artesia.metadata.MetadataField": "#/components/schemas/SwaggerMetadataField",
                        "com.artesia.metadata.MetadataTableField": "#/components/schemas/SwaggerMetadataTableField"
                    }
                }
            },
            "MetadataValue": {
                "type": "object",
                "properties": {
                    "cascading_domain_value": {
                        "type": "boolean"
                    },
                    "domain_value": {
                        "type": "boolean"
                    },
                    "is_locked": {
                        "type": "boolean"
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "multilingual_values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MultilingualMetadataValue"
                        }
                    },
                    "value": {
                        "type": "object",
                        "description": "The metadata value object should contain the type of object it is holding in its value field.</br> Below examples show JSON representation of the value field for various data types</br>\"value\": {<b>\"type\": \"dateTime\"</b>,\"value\": \"2015-10-13T11:25:40.215+05:30\"}</br>\"value\": {<b>\"type\": \"string\"</b>,\"value\": \"Media Management\"}</br>\"value\": {<b>\"type\": \"int\"</b>,\"value\": \"2014\"}</br>\"value\": {<b>\"type\": \"decimal\"</b>,\"value\": \"7.3\"}</br>"
                    }
                },
                "xml": {
                    "name": "MetadataValue"
                }
            },
            "MultilingualMetadataValue": {
                "type": "object",
                "properties": {
                    "locale_id": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "MultilingualMetadataValue"
                }
            },
            "ParticipantData": {
                "type": "object",
                "properties": {
                    "business_unit_id": {
                        "type": "string"
                    },
                    "cost_center": {
                        "type": "string"
                    },
                    "country_code": {
                        "type": "string"
                    },
                    "department": {
                        "type": "string"
                    },
                    "email_address": {
                        "type": "string"
                    },
                    "email_enabled": {
                        "type": "boolean"
                    },
                    "first_and_last_name": {
                        "type": "string"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "state_province": {
                        "type": "string"
                    },
                    "teams_user_id": {
                        "type": "string"
                    },
                    "uoi_id": {
                        "type": "string"
                    },
                    "work_phone": {
                        "type": "string"
                    }
                }
            },
            "RenditionContentInfo": {
                "type": "object",
                "properties": {
                    "mac_resource_content": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "pdf_preview_content": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "preview_3d_content": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "preview_content": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "thumbnail_content": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "video_rollover_content": {
                        "$ref": "#/components/schemas/ContentInfo"
                    }
                }
            },
            "ReviewAssetApprovalInfo": {
                "type": "object",
                "properties": {
                    "approval_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "approval_user": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "ReviewJobAssetApprovalInfo": {
                "type": "object",
                "properties": {
                    "approval_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "approval_state": {
                        "$ref": "#/components/schemas/ReviewJobAssetApprovalState"
                    },
                    "approval_user": {
                        "type": "string"
                    },
                    "asset_id": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "final_approval": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string"
                    },
                    "review_job_id": {
                        "type": "string"
                    },
                    "task_id": {
                        "type": "string"
                    }
                }
            },
            "ReviewJobAssetApprovalState": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lifecycle_approved": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "ReviewJobAssetApprovalSummary": {
                "type": "object",
                "properties": {
                    "comment_count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "review_approval_version_map": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "value": {
                                            "$ref": "#/components/schemas/ReviewJobAssetApprovalInfo"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<Integer,ReviewJobAssetApprovalInfo>"
                    },
                    "review_job_id": {
                        "type": "string"
                    }
                }
            },
            "SecurityPolicy": {
                "type": "object",
                "properties": {
                    "administrators": {
                        "type": "array",
                        "properties": {},
                        "items": {
                            "$ref": "#/components/schemas/TeamsUser"
                        }
                    },
                    "create_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "created_by": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "last_updated_by": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownership_type": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "SecurityPolicy"
                }
            },
            "SwaggerContainer": {
                "type": "object",
                "xml": {
                    "name": "Container"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Asset"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "access_control_descriptor": {
                                "$ref": "#/components/schemas/XmlAccessControlDescriptor"
                            },
                            "asset_color_infos": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AssetColorInfo"
                                }
                            },
                            "asset_content_info": {
                                "$ref": "#/components/schemas/AssetContentInfo"
                            },
                            "asset_id": {
                                "type": "string"
                            },
                            "asset_lock_state_last_update_date": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            },
                            "asset_lock_state_user_id": {
                                "type": "string"
                            },
                            "asset_state": {
                                "type": "string"
                            },
                            "asset_state_last_update_date": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            },
                            "asset_state_user_id": {
                                "type": "string"
                            },
                            "business_unit_id": {
                                "type": "string"
                            },
                            "checked_out": {
                                "type": "boolean"
                            },
                            "collection_ids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "container_child_counts": {
                                "$ref": "#/components/schemas/ContainerChildCounts"
                            },
                            "container_id": {
                                "type": "string"
                            },
                            "container_type_id": {
                                "type": "string"
                            },
                            "container_type_name": {
                                "type": "string"
                            },
                            "content_editable": {
                                "type": "boolean"
                            },
                            "content_lock_state_last_update_date": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            },
                            "content_lock_state_user_id": {
                                "type": "string"
                            },
                            "content_lock_state_user_name": {
                                "type": "string"
                            },
                            "content_size": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "content_state": {
                                "type": "string"
                            },
                            "content_state_last_update_date": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            },
                            "content_state_user_id": {
                                "type": "string"
                            },
                            "content_state_user_name": {
                                "type": "string"
                            },
                            "content_sub_type": {
                                "type": "string"
                            },
                            "content_type": {
                                "type": "string"
                            },
                            "creator_id": {
                                "type": "string"
                            },
                            "data_type": {
                                "type": "string"
                            },
                            "date_imported": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            },
                            "date_last_updated": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            },
                            "deep_zoom_info": {
                                "$ref": "#/components/schemas/DeepZoomInfo"
                            },
                            "default_property_template_id": {
                                "type": "string"
                            },
                            "deletion_state_last_update_date": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            },
                            "deletion_state_user_id": {
                                "type": "string"
                            },
                            "deletion_state_user_name": {
                                "type": "string"
                            },
                            "delivery_service_url": {
                                "type": "string"
                            },
                            "import_job_id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "import_user_name": {
                                "type": "string"
                            },
                            "in_review": {
                                "type": "boolean"
                            },
                            "inherited_metadata_collections": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InheritedMetadataCollection"
                                }
                            },
                            "latest_version": {
                                "type": "boolean"
                            },
                            "legacy_model_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "master_content_info": {
                                "$ref": "#/components/schemas/ContentInfo"
                            },
                            "metadata_lock_state_user_name": {
                                "type": "string"
                            },
                            "metadata_model_id": {
                                "type": "string"
                            },
                            "metadata_state_user_name": {
                                "type": "string"
                            },
                            "mime_type": {
                                "type": "string"
                            },
                            "original_asset_id": {
                                "type": "string"
                            },
                            "originating_preview_url": {
                                "type": "string"
                            },
                            "originating_thumbnail_url": {
                                "type": "string"
                            },
                            "path_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ContainerPath"
                                }
                            },
                            "progressive_download_url": {
                                "type": "string"
                            },
                            "rendition_content": {
                                "$ref": "#/components/schemas/RenditionContentInfo"
                            },
                            "review_asset_approval_summary_collection": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ReviewJobAssetApprovalSummary"
                                }
                            },
                            "review_info_collection": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CreativeReviewInfo"
                                }
                            },
                            "security_policy_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SecurityPolicy"
                                }
                            },
                            "streaming_url": {
                                "type": "string"
                            },
                            "subscribed_to": {
                                "type": "boolean"
                            },
                            "thumbnail_content_id": {
                                "type": "string"
                            },
                            "version_count": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "watermark_template_id": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                ]
            },
            "SwaggerMetadataCategory": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MetadataElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "legacy_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadata_element_list": {
                                "type": "array",
                                "format": "MetadataElement",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataElement"
                                }
                            }
                        }
                    }
                ]
            },
            "SwaggerMetadataCategoryCollection": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MetadataCollection"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "legacy_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadata_element_list": {
                                "type": "array",
                                "format": "MetadataElement",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataElement"
                                }
                            }
                        }
                    }
                ]
            },
            "SwaggerMetadataField": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "xml": {
                    "name": "MetadataField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MetadataElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "cascading_group_id": {
                                "type": "string"
                            },
                            "column_name": {
                                "type": "string"
                            },
                            "data_length": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "data_type": {
                                "type": "string"
                            },
                            "default_value": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "displayable": {
                                "type": "boolean"
                            },
                            "domain_id": {
                                "type": "string"
                            },
                            "domained": {
                                "type": "boolean"
                            },
                            "edit_type": {
                                "type": "string"
                            },
                            "editable": {
                                "type": "boolean"
                            },
                            "enabled": {
                                "type": "boolean"
                            },
                            "external_datasource_id": {
                                "type": "string"
                            },
                            "facetable": {
                                "type": "boolean"
                            },
                            "instructions": {
                                "type": "string"
                            },
                            "multilingual": {
                                "type": "boolean"
                            },
                            "multilingual_table_name": {
                                "type": "string"
                            },
                            "options": {
                                "type": "string"
                            },
                            "prompt": {
                                "type": "string"
                            },
                            "required": {
                                "type": "boolean"
                            },
                            "restriction_id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "scale": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "searchable": {
                                "type": "boolean"
                            },
                            "searchable_scope_id": {
                                "type": "string"
                            },
                            "searchable_scope_num_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "sortable": {
                                "type": "boolean"
                            },
                            "system_field": {
                                "type": "boolean"
                            },
                            "table_name": {
                                "type": "string"
                            },
                            "trigger_field": {
                                "type": "boolean"
                            },
                            "validation_rule": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/components/schemas/MetadataValue"
                            }
                        }
                    }
                ]
            },
            "SwaggerMetadataModel": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "xml": {
                    "name": "MetadataModel"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MetadataElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "has_multilingual_fields": {
                                "type": "boolean"
                            },
                            "legacy_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadata_element_list": {
                                "type": "array",
                                "format": "MetadataElement",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataElement"
                                }
                            },
                            "object_type": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "SwaggerMetadataModelCollection": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "xml": {
                    "name": "MetadataModel"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MetadataCollection"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "has_multilingual_fields": {
                                "type": "boolean"
                            },
                            "legacy_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadata_element_list": {
                                "type": "array",
                                "format": "MetadataElement",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataElement"
                                }
                            },
                            "object_type": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "SwaggerMetadataTable": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MetadataElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "legacy_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadata_element_list": {
                                "type": "array",
                                "format": "MetadataElement",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataElement"
                                }
                            }
                        }
                    }
                ]
            },
            "SwaggerMetadataTableCollection": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MetadataCollection"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "legacy_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadata_element_list": {
                                "type": "array",
                                "format": "MetadataElement",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataElement"
                                }
                            }
                        }
                    }
                ]
            },
            "SwaggerMetadataTableField": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "xml": {
                    "name": "MetadataField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MetadataElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "cascading_group_id": {
                                "type": "string"
                            },
                            "column_name": {
                                "type": "string"
                            },
                            "data_length": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "data_type": {
                                "type": "string"
                            },
                            "default_value": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "displayable": {
                                "type": "boolean"
                            },
                            "domain_id": {
                                "type": "string"
                            },
                            "domained": {
                                "type": "boolean"
                            },
                            "edit_type": {
                                "type": "string"
                            },
                            "editable": {
                                "type": "boolean"
                            },
                            "enabled": {
                                "type": "boolean"
                            },
                            "external_datasource_id": {
                                "type": "string"
                            },
                            "facetable": {
                                "type": "boolean"
                            },
                            "instructions": {
                                "type": "string"
                            },
                            "meta_table_seq": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "metadata_element_list": {
                                "type": "array",
                                "format": "MetadataElement",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataElement"
                                }
                            },
                            "multilingual": {
                                "type": "boolean"
                            },
                            "multilingual_table_name": {
                                "type": "string"
                            },
                            "options": {
                                "type": "string"
                            },
                            "parent_table_id": {
                                "type": "string"
                            },
                            "parent_table_name": {
                                "type": "string"
                            },
                            "prompt": {
                                "type": "string"
                            },
                            "required": {
                                "type": "boolean"
                            },
                            "restriction_id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "saved_values_behavior_mode": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "scale": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "searchable": {
                                "type": "boolean"
                            },
                            "searchable_scope_id": {
                                "type": "string"
                            },
                            "searchable_scope_num_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "sortable": {
                                "type": "boolean"
                            },
                            "system_field": {
                                "type": "boolean"
                            },
                            "table_name": {
                                "type": "string"
                            },
                            "trigger_field": {
                                "type": "boolean"
                            },
                            "validation_rule": {
                                "type": "string"
                            },
                            "value": {
                                "$ref": "#/components/schemas/MetadataValue"
                            },
                            "values": {
                                "type": "array",
                                "properties": {},
                                "items": {
                                    "$ref": "#/components/schemas/MetadataValue"
                                }
                            }
                        }
                    }
                ]
            },
            "TeamsUser": {
                "type": "object",
                "properties": {
                    "business_unit_id": {
                        "type": "string"
                    },
                    "cost_center": {
                        "type": "string"
                    },
                    "country_code": {
                        "type": "string"
                    },
                    "create_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "department": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "domain_name": {
                        "type": "string"
                    },
                    "email_address": {
                        "type": "string"
                    },
                    "email_enabled": {
                        "type": "boolean"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "group_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "login_name": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "otds_user_id": {
                        "type": "string"
                    },
                    "participant": {
                        "$ref": "#/components/schemas/ParticipantData"
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "role_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "state_province": {
                        "type": "string"
                    },
                    "user_pref_template_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_type_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "work_phone": {
                        "type": "string"
                    }
                }
            },
            "TreeDescriptor": {
                "type": "object",
                "properties": {
                    "detached": {
                        "type": "boolean"
                    },
                    "tree_id": {
                        "type": "string"
                    }
                }
            },
            "XmlAccessControlDescriptor": {
                "type": "object",
                "properties": {
                    "permissions_map": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "object",
                                            "format": "Boolean"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,Boolean>"
                    }
                },
                "xml": {
                    "name": "access_control_descriptor"
                }
            },
            "FileData": {
                "type": "object",
                "properties": {
                    "attribute": {
                        "type": "string"
                    },
                    "file_name": {
                        "type": "string",
                        "xml": {
                            "name": "file_name"
                        }
                    },
                    "file_path": {
                        "type": "string",
                        "xml": {
                            "name": "file_path"
                        }
                    },
                    "mime_type": {
                        "type": "string",
                        "xml": {
                            "name": "mime_type"
                        }
                    }
                }
            },
            "MasterFile": {
                "type": "object",
                "properties": {
                    "apple_double": {
                        "$ref": "#/components/schemas/FileData"
                    },
                    "file": {
                        "$ref": "#/components/schemas/FileData"
                    },
                    "folder_path": {
                        "type": "string",
                        "xml": {
                            "name": "folder_path"
                        }
                    },
                    "preview": {
                        "$ref": "#/components/schemas/FileData"
                    },
                    "property_template_id": {
                        "type": "string",
                        "xml": {
                            "name": "property_template_id"
                        }
                    },
                    "rendition_files": {
                        "type": "array",
                        "properties": {},
                        "xml": {
                            "name": "rendition_files"
                        },
                        "items": {
                            "$ref": "#/components/schemas/RenditionFileData"
                        }
                    },
                    "sub_files": {
                        "type": "array",
                        "properties": {},
                        "xml": {
                            "name": "sub_files"
                        },
                        "items": {
                            "$ref": "#/components/schemas/FileData"
                        }
                    },
                    "uoi_id": {
                        "type": "string",
                        "xml": {
                            "name": "uoi_id"
                        }
                    }
                }
            },
            "RenditionFileData": {
                "type": "object",
                "properties": {
                    "attribute": {
                        "type": "string"
                    },
                    "file_name": {
                        "type": "string",
                        "xml": {
                            "name": "file_name"
                        }
                    },
                    "file_path": {
                        "type": "string",
                        "xml": {
                            "name": "file_path"
                        }
                    },
                    "mime_type": {
                        "type": "string",
                        "xml": {
                            "name": "mime_type"
                        }
                    },
                    "rendition_type": {
                        "type": "string",
                        "properties": {},
                        "xml": {
                            "name": "rendition_type"
                        },
                        "enum": [
                            "ARTESIA_RENDITION_SCREENRES_PDF",
                            "ARTESIA_RENDITION_SCREENRES",
                            "ARTESIA_RENDITION_THUMB",
                            "ARTESIA_RENDITION_TEXT",
                            "ARTESIA_RENDITION_VIDEO_ROLLOVER",
                            "ARTESIA_RENDITION_SCREENRES_3D"
                        ]
                    }
                }
            },
            "UploadManifestParam": {
                "type": "object",
                "properties": {
                    "upload_manifest": {
                        "type": "object",
                        "properties": {
                            "master_files": {
                                "type": "array",
                                "properties": {},
                                "xml": {
                                    "name": "master_files"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/MasterFile"
                                }
                            }
                        },
                        "format": "UploadManifestParam"
                    }
                },
                "xml": {
                    "name": "upload_manifest"
                }
            },
            "LinkListParam": {
                "type": "object",
                "properties": {
                    "link_list_param": {
                        "type": "object",
                        "properties": {
                            "links_list": {
                                "type": "array",
                                "xml": {
                                    "name": "links_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/Link"
                                }
                            }
                        },
                        "format": "LinkListParam"
                    }
                },
                "xml": {
                    "name": "link_list_param"
                }
            },
            "DeleteByLinkIds": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DeleteLinksMode"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "link_ids": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LinkIdentifier"
                                }
                            }
                        }
                    }
                ]
            },
            "DeleteByLinkTypes": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DeleteLinksMode"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "link_type_ids_list": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ]
            },
            "DeleteLinks": {
                "type": "object",
                "properties": {
                    "asset_id_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "delete_links_mode": {
                        "$ref": "#/components/schemas/DeleteLinksMode"
                    }
                }
            },
            "DeleteLinksMode": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.asset.links.DeleteByLinkIds": "#/components/schemas/DeleteByLinkIds",
                        "com.artesia.asset.links.DeleteByLinkTypes": "#/components/schemas/DeleteByLinkTypes"
                    }
                }
            },
            "DeleteLinksParam": {
                "type": "object",
                "properties": {
                    "delete_links_param": {
                        "type": "object",
                        "properties": {
                            "delete_links": {
                                "$ref": "#/components/schemas/DeleteLinks"
                            }
                        },
                        "format": "DeleteLinksParam"
                    }
                },
                "xml": {
                    "name": "delete_links_param"
                }
            },
            "AssetCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "assets_resource": {
                        "type": "object",
                        "properties": {
                            "asset_list": {
                                "type": "array",
                                "xml": {
                                    "name": "asset_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/Asset"
                                }
                            },
                            "collection_summary": {
                                "$ref": "#/components/schemas/RestApiCollectionSummary"
                            }
                        },
                        "format": "AssetCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "assets_resource"
                }
            },
            "RestApiCollectionSummary": {
                "type": "object",
                "properties": {
                    "actual_count_of_items": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "actual_count_of_items"
                        }
                    },
                    "after_index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "after_index"
                        }
                    },
                    "before_index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "before_index"
                        }
                    },
                    "group_to_count_map": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "integer",
                                            "format": "int64"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,Long>"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total_number_of_items": {
                        "type": "integer",
                        "format": "int64",
                        "xml": {
                            "name": "total_number_of_items"
                        }
                    }
                },
                "xml": {
                    "name": "collection_summary"
                }
            },
            "AssetCopyRequestParam": {
                "type": "object",
                "properties": {
                    "asset_copy_request_param": {
                        "type": "object",
                        "properties": {
                            "asset_copy_request": {
                                "$ref": "#/components/schemas/SubtreeCopyRequest"
                            }
                        },
                        "format": "AssetCopyRequestParam"
                    }
                },
                "xml": {
                    "name": "asset_copy_request_param"
                }
            },
            "SubtreeCopyRequest": {
                "type": "object",
                "properties": {
                    "copy_assets": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "DONT_COPY",
                            "LINK_EXISTING",
                            "COPY"
                        ]
                    },
                    "copy_content": {
                        "type": "boolean"
                    },
                    "copy_deleted": {
                        "type": "boolean"
                    },
                    "copy_intra_links": {
                        "type": "boolean"
                    },
                    "copy_security_policies": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "OVERRIDE",
                            "EXISTING_OR_DEFAULT",
                            "EXISTING_PLUS_DEFAULT"
                        ]
                    },
                    "copy_watermark": {
                        "type": "boolean"
                    },
                    "create_derived_link": {
                        "type": "boolean"
                    },
                    "default_policies": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "error_handling_actions": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "DEFAULT_HANDLING",
                            "ALL_OR_NOTHING",
                            "STOP_AND_KEEP_ALREADY_PROCESSED",
                            "CONTINUE_AND_PROCESS_REMAINING"
                        ]
                    },
                    "link_option": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "DONT_COPY",
                            "COPY_SRC_LINK",
                            "COPY_DEST_LINK",
                            "COPY_ALL"
                        ]
                    },
                    "trim_option": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NONE",
                            "EMPTY_CONTAINERS",
                            "LAST_LEVEL_CONTAINERS"
                        ]
                    }
                }
            },
            "DataLoadRequestParam": {
                "type": "object",
                "properties": {
                    "data_load_request": {
                        "type": "object",
                        "properties": {
                            "child_count_load_type": {
                                "type": "string",
                                "description": "Folder child count load type",
                                "xml": {
                                    "name": "child_count_load_type"
                                },
                                "enum": [
                                    "assets",
                                    "folders",
                                    "both",
                                    "none"
                                ]
                            },
                            "link_type_ids": {
                                "type": "array",
                                "xml": {
                                    "name": "link_type_ids"
                                },
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "link_type_ids"
                                    }
                                }
                            },
                            "load_3d_preview_info": {
                                "type": "boolean",
                                "writeOnly": true,
                                "xml": {
                                    "name": "load_3d_preview_info"
                                }
                            },
                            "load_asset_content_info": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_asset_content_info"
                                }
                            },
                            "load_asset_content_with_text": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_asset_content_with_text"
                                }
                            },
                            "load_collections": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_collections"
                                }
                            },
                            "load_container_originating_urls": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_container_originating_urls"
                                }
                            },
                            "load_deep_zoom_image_info": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_deep_zoom_image_info"
                                }
                            },
                            "load_destination_links": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_destination_links"
                                }
                            },
                            "load_inherited_metadata": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_inherited_metadata"
                                }
                            },
                            "load_metadata": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_metadata"
                                }
                            },
                            "load_multilingual_field_values": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_multilingual_field_values"
                                }
                            },
                            "load_path": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_path"
                                }
                            },
                            "load_path_with_children": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_path_with_children"
                                }
                            },
                            "load_pdf_preview_info": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_pdf_preview_info"
                                }
                            },
                            "load_preview_info": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_preview_info"
                                }
                            },
                            "load_review_info": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_review_info"
                                }
                            },
                            "load_security_policies": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_security_policies"
                                }
                            },
                            "load_subscribed_to": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_subscribed_to"
                                }
                            },
                            "load_thumbnail_info": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_thumbnail_info"
                                }
                            },
                            "load_video_rollover_info": {
                                "type": "boolean",
                                "xml": {
                                    "name": "load_video_rollover_info"
                                }
                            },
                            "metadata_fields_to_return": {
                                "type": "array",
                                "xml": {
                                    "name": "metadata_fields_to_return"
                                },
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "metadata_fields_to_return"
                                    }
                                }
                            }
                        },
                        "format": "DataLoadRequestParam"
                    }
                },
                "xml": {
                    "name": "data_load_request"
                }
            },
            "BulkAssetResult": {
                "type": "object",
                "properties": {
                    "failed_object": {
                        "type": "object",
                        "writeOnly": true
                    },
                    "failed_object_list": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "ignored_object": {
                        "type": "object",
                        "writeOnly": true
                    },
                    "ignored_object_list": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "result_code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "successful_object_list": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                },
                "xml": {
                    "name": "BulkAssetResult"
                }
            },
            "BulkAssetResultRepresentation": {
                "type": "object",
                "properties": {
                    "bulk_asset_result_representation": {
                        "type": "object",
                        "properties": {
                            "bulk_asset_result": {
                                "$ref": "#/components/schemas/BulkAssetResult"
                            }
                        },
                        "format": "BulkAssetResultRepresentation"
                    }
                },
                "xml": {
                    "name": "bulk_asset_result_representation"
                }
            },
            "ActivitySelectionContext": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "activity_id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "attested_context": {
                                "$ref": "#/components/schemas/AttestedContext"
                            },
                            "attested_context_list": {
                                "$ref": "#/components/schemas/AttestedContextList"
                            },
                            "child_type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSETS",
                                    "CONTAINERS",
                                    "ASSETS_AND_CONTAINERS"
                                ]
                            },
                            "exclusion_asset_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "asset_ids"
                                    }
                                }
                            },
                            "include_deleted_assets": {
                                "type": "boolean"
                            },
                            "include_descendants": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ALL",
                                    "IMMEDIATE",
                                    "NONE"
                                ]
                            },
                            "page_index": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "page_size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "permissions_filter": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "properties": {},
                                    "enum": [
                                        "ASSETVIEW_PERM",
                                        "SUMMARYVIEW_PERM",
                                        "PREVIEWVIEW_PERM",
                                        "EXPORT_PERM",
                                        "SUBSCRIBE_PERM",
                                        "METAEDIT_PERM",
                                        "CONTENTEDIT_PERM",
                                        "MEMBERSHIPEDIT_PERM",
                                        "DELETEASSET_PERM",
                                        "EDITPARENTS_PERM",
                                        "CUSTOM01_PERM",
                                        "CUSTOM02_PERM",
                                        "CUSTOM03_PERM",
                                        "CUSTOM04_PERM"
                                    ]
                                }
                            },
                            "property_filters": {
                                "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                            }
                        }
                    }
                ]
            },
            "AssetCollectionSelectionContext": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "attested_context": {
                                "$ref": "#/components/schemas/AttestedContext"
                            },
                            "attested_context_list": {
                                "$ref": "#/components/schemas/AttestedContextList"
                            },
                            "child_type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSETS",
                                    "CONTAINERS",
                                    "ASSETS_AND_CONTAINERS"
                                ]
                            },
                            "collection_id": {
                                "type": "string"
                            },
                            "exclusion_asset_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "asset_ids"
                                    }
                                }
                            },
                            "include_deleted_assets": {
                                "type": "boolean"
                            },
                            "include_descendants": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ALL",
                                    "IMMEDIATE",
                                    "NONE"
                                ]
                            },
                            "page_index": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "page_size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "permissions_filter": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "properties": {},
                                    "enum": [
                                        "ASSETVIEW_PERM",
                                        "SUMMARYVIEW_PERM",
                                        "PREVIEWVIEW_PERM",
                                        "EXPORT_PERM",
                                        "SUBSCRIBE_PERM",
                                        "METAEDIT_PERM",
                                        "CONTENTEDIT_PERM",
                                        "MEMBERSHIPEDIT_PERM",
                                        "DELETEASSET_PERM",
                                        "EDITPARENTS_PERM",
                                        "CUSTOM01_PERM",
                                        "CUSTOM02_PERM",
                                        "CUSTOM03_PERM",
                                        "CUSTOM04_PERM"
                                    ]
                                }
                            },
                            "property_filters": {
                                "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                            }
                        }
                    }
                ]
            },
            "AssetIdsSelectionContext": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "asset_ids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "attested_context": {
                                "$ref": "#/components/schemas/AttestedContext"
                            },
                            "attested_context_list": {
                                "$ref": "#/components/schemas/AttestedContextList"
                            },
                            "child_type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSETS",
                                    "CONTAINERS",
                                    "ASSETS_AND_CONTAINERS"
                                ]
                            },
                            "exclusion_asset_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "asset_ids"
                                    }
                                }
                            },
                            "include_deleted_assets": {
                                "type": "boolean"
                            },
                            "include_descendants": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ALL",
                                    "IMMEDIATE",
                                    "NONE"
                                ]
                            },
                            "page_index": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "page_size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "permissions_filter": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "properties": {},
                                    "enum": [
                                        "ASSETVIEW_PERM",
                                        "SUMMARYVIEW_PERM",
                                        "PREVIEWVIEW_PERM",
                                        "EXPORT_PERM",
                                        "SUBSCRIBE_PERM",
                                        "METAEDIT_PERM",
                                        "CONTENTEDIT_PERM",
                                        "MEMBERSHIPEDIT_PERM",
                                        "DELETEASSET_PERM",
                                        "EDITPARENTS_PERM",
                                        "CUSTOM01_PERM",
                                        "CUSTOM02_PERM",
                                        "CUSTOM03_PERM",
                                        "CUSTOM04_PERM"
                                    ]
                                }
                            },
                            "property_filters": {
                                "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                            }
                        }
                    }
                ]
            },
            "AttestedContext": {
                "type": "object",
                "properties": {
                    "attested_identifier": {
                        "type": "string"
                    },
                    "context_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "COLLECTION"
                        ]
                    }
                }
            },
            "AttestedContextList": {
                "type": "object",
                "properties": {
                    "attested_identifier_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "context_list_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "COLLECTION"
                        ]
                    }
                }
            },
            "CollectionAssetsSortCriteria": {
                "type": "object",
                "properties": {
                    "sort_order": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "ASCENDING",
                            "DESCENDING"
                        ]
                    },
                    "sort_parameter": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NAME",
                            "CREATION_DATE",
                            "CONTENT_TYPE"
                        ]
                    }
                }
            },
            "CollectionFilters": {
                "type": "object",
                "properties": {
                    "collection_id_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filter_by_name": {
                        "type": "string"
                    },
                    "filters_type": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "properties": {},
                            "enum": [
                                "PRIVATE",
                                "SHARED_BY_CURRENT_USER",
                                "SHARED_WITH_CURRENT_USER"
                            ]
                        }
                    },
                    "shared_by_user_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "shared_filters_type": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "properties": {},
                            "enum": [
                                "PUBLIC_WEBSITE",
                                "PROMOTED"
                            ]
                        }
                    },
                    "shared_with_user_group_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "shared_with_user_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "CollectionListSelectionContext": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "attested_context": {
                                "$ref": "#/components/schemas/AttestedContext"
                            },
                            "attested_context_list": {
                                "$ref": "#/components/schemas/AttestedContextList"
                            },
                            "child_type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSETS",
                                    "CONTAINERS",
                                    "ASSETS_AND_CONTAINERS"
                                ]
                            },
                            "collection_ids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "exclusion_asset_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "asset_ids"
                                    }
                                }
                            },
                            "exclusion_collection_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "filters": {
                                "$ref": "#/components/schemas/CollectionFilters"
                            },
                            "include_deleted_assets": {
                                "type": "boolean"
                            },
                            "include_descendants": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ALL",
                                    "IMMEDIATE",
                                    "NONE"
                                ]
                            },
                            "page_index": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "page_size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "permissions_filter": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "properties": {},
                                    "enum": [
                                        "ASSETVIEW_PERM",
                                        "SUMMARYVIEW_PERM",
                                        "PREVIEWVIEW_PERM",
                                        "EXPORT_PERM",
                                        "SUBSCRIBE_PERM",
                                        "METAEDIT_PERM",
                                        "CONTENTEDIT_PERM",
                                        "MEMBERSHIPEDIT_PERM",
                                        "DELETEASSET_PERM",
                                        "EDITPARENTS_PERM",
                                        "CUSTOM01_PERM",
                                        "CUSTOM02_PERM",
                                        "CUSTOM03_PERM",
                                        "CUSTOM04_PERM"
                                    ]
                                }
                            },
                            "property_filters": {
                                "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                            },
                            "sort_criteria": {
                                "$ref": "#/components/schemas/CollectionSortCriteria"
                            }
                        }
                    }
                ]
            },
            "CollectionSelectionContext": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "attested_context": {
                                "$ref": "#/components/schemas/AttestedContext"
                            },
                            "attested_context_list": {
                                "$ref": "#/components/schemas/AttestedContextList"
                            },
                            "child_type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSETS",
                                    "CONTAINERS",
                                    "ASSETS_AND_CONTAINERS"
                                ]
                            },
                            "collection_id": {
                                "type": "string"
                            },
                            "exclusion_asset_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "asset_ids"
                                    }
                                }
                            },
                            "include_deleted_assets": {
                                "type": "boolean"
                            },
                            "include_descendants": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ALL",
                                    "IMMEDIATE",
                                    "NONE"
                                ]
                            },
                            "page_index": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "page_size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "permissions_filter": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "properties": {},
                                    "enum": [
                                        "ASSETVIEW_PERM",
                                        "SUMMARYVIEW_PERM",
                                        "PREVIEWVIEW_PERM",
                                        "EXPORT_PERM",
                                        "SUBSCRIBE_PERM",
                                        "METAEDIT_PERM",
                                        "CONTENTEDIT_PERM",
                                        "MEMBERSHIPEDIT_PERM",
                                        "DELETEASSET_PERM",
                                        "EDITPARENTS_PERM",
                                        "CUSTOM01_PERM",
                                        "CUSTOM02_PERM",
                                        "CUSTOM03_PERM",
                                        "CUSTOM04_PERM"
                                    ]
                                }
                            },
                            "property_filters": {
                                "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                            },
                            "sort_criteria": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CollectionAssetsSortCriteria"
                                }
                            }
                        }
                    }
                ]
            },
            "CollectionSortCriteria": {
                "type": "object",
                "properties": {
                    "sort_order": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "ASCENDING",
                            "DESCENDING"
                        ]
                    },
                    "sort_parameter": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NAME",
                            "CREATED_DATE",
                            "UPDATED_DATE",
                            "AVERAGE_RATING",
                            "USER_RATING"
                        ]
                    }
                }
            },
            "ContainerChildSortCriteria": {
                "type": "object",
                "properties": {
                    "sort_order": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "ASCENDING",
                            "DESCENDING"
                        ]
                    },
                    "sort_parameter": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NAME",
                            "CREATION_DATE",
                            "SEQUENCE",
                            "CONTENT_TYPE"
                        ]
                    }
                }
            },
            "DateInterval": {
                "type": "object",
                "properties": {
                    "custom_range": {
                        "type": "boolean"
                    },
                    "fixed_end_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "fixed_start_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "interval_label": {
                        "type": "string"
                    },
                    "relative_end_date": {
                        "$ref": "#/components/schemas/RelativeDateIntervalValue"
                    },
                    "relative_start_date": {
                        "$ref": "#/components/schemas/RelativeDateIntervalValue"
                    }
                },
                "xml": {
                    "name": "DateInterval",
                    "namespace": "http://www.artesia.com/api/xsd"
                }
            },
            "DateRange": {
                "type": "object",
                "properties": {
                    "custom_range": {
                        "type": "boolean"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "start_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    }
                }
            },
            "FacetCascadingFieldRestriction": {
                "type": "object",
                "xml": {
                    "name": "FacetFieldRestriction",
                    "namespace": "http://www.artesia.com/api/xsd"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRestriction"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_generation_behavior": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "DROP",
                                    "INCLUDE",
                                    "EXCLUDE",
                                    "DRILLDOWN"
                                ]
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "field_name": {
                                "type": "string"
                            },
                            "value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HierarchicalFacetValuePath"
                                }
                            }
                        }
                    }
                ]
            },
            "FacetDateIntervalFieldRestriction": {
                "type": "object",
                "xml": {
                    "name": "FacetFieldRestriction",
                    "namespace": "http://www.artesia.com/api/xsd"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRestriction"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_generation_behavior": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "DROP",
                                    "INCLUDE",
                                    "EXCLUDE",
                                    "DRILLDOWN"
                                ]
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "field_name": {
                                "type": "string"
                            },
                            "value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DateInterval"
                                }
                            }
                        }
                    }
                ]
            },
            "FacetDateRangeFieldRestriction": {
                "type": "object",
                "xml": {
                    "name": "FacetFieldRestriction",
                    "namespace": "http://www.artesia.com/api/xsd"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRestriction"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_generation_behavior": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "DROP",
                                    "INCLUDE",
                                    "EXCLUDE",
                                    "DRILLDOWN"
                                ]
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "field_name": {
                                "type": "string"
                            },
                            "value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DateRange"
                                }
                            }
                        }
                    }
                ]
            },
            "FacetFieldRestriction": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "facet_generation_behavior": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "DROP",
                            "INCLUDE",
                            "EXCLUDE",
                            "DRILLDOWN"
                        ]
                    },
                    "field_id": {
                        "type": "string"
                    },
                    "field_name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "xml": {
                    "name": "FacetFieldRestriction",
                    "namespace": "http://www.artesia.com/api/xsd"
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.search.facet.FacetSimpleFieldRestriction": "#/components/schemas/FacetSimpleFieldRestriction",
                        "com.artesia.search.facet.FacetNumericRangeFieldRestriction": "#/components/schemas/FacetNumericRangeFieldRestriction",
                        "com.artesia.search.facet.FacetNumericIntervalFieldRestriction": "#/components/schemas/FacetNumericIntervalFieldRestriction",
                        "com.artesia.search.facet.FacetDateRangeFieldRestriction": "#/components/schemas/FacetDateRangeFieldRestriction",
                        "com.artesia.search.facet.FacetDateIntervalFieldRestriction": "#/components/schemas/FacetDateIntervalFieldRestriction",
                        "com.artesia.search.facet.FacetCascadingFieldRestriction": "#/components/schemas/FacetCascadingFieldRestriction"
                    }
                }
            },
            "FacetNumericIntervalFieldRestriction": {
                "type": "object",
                "xml": {
                    "name": "FacetFieldRestriction",
                    "namespace": "http://www.artesia.com/api/xsd"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRestriction"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_generation_behavior": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "DROP",
                                    "INCLUDE",
                                    "EXCLUDE",
                                    "DRILLDOWN"
                                ]
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "field_name": {
                                "type": "string"
                            },
                            "value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NumericInterval"
                                }
                            }
                        }
                    }
                ]
            },
            "FacetNumericRangeFieldRestriction": {
                "type": "object",
                "xml": {
                    "name": "FacetFieldRestriction",
                    "namespace": "http://www.artesia.com/api/xsd"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRestriction"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_generation_behavior": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "DROP",
                                    "INCLUDE",
                                    "EXCLUDE",
                                    "DRILLDOWN"
                                ]
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "field_name": {
                                "type": "string"
                            },
                            "value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NumericRange"
                                }
                            }
                        }
                    }
                ]
            },
            "FacetSimpleFieldRestriction": {
                "type": "object",
                "xml": {
                    "name": "FacetFieldRestriction",
                    "namespace": "http://www.artesia.com/api/xsd"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRestriction"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_generation_behavior": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "DROP",
                                    "INCLUDE",
                                    "EXCLUDE",
                                    "DRILLDOWN"
                                ]
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "field_name": {
                                "type": "string"
                            },
                            "value_list": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ]
            },
            "FolderSelectionContext": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "attested_context": {
                                "$ref": "#/components/schemas/AttestedContext"
                            },
                            "attested_context_list": {
                                "$ref": "#/components/schemas/AttestedContextList"
                            },
                            "child_type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSETS",
                                    "CONTAINERS",
                                    "ASSETS_AND_CONTAINERS"
                                ]
                            },
                            "exclusion_asset_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "asset_ids"
                                    }
                                }
                            },
                            "folder_id": {
                                "type": "string"
                            },
                            "include_deleted_assets": {
                                "type": "boolean"
                            },
                            "include_descendants": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ALL",
                                    "IMMEDIATE",
                                    "NONE"
                                ]
                            },
                            "page_index": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "page_size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "permissions_filter": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "properties": {},
                                    "enum": [
                                        "ASSETVIEW_PERM",
                                        "SUMMARYVIEW_PERM",
                                        "PREVIEWVIEW_PERM",
                                        "EXPORT_PERM",
                                        "SUBSCRIBE_PERM",
                                        "METAEDIT_PERM",
                                        "CONTENTEDIT_PERM",
                                        "MEMBERSHIPEDIT_PERM",
                                        "DELETEASSET_PERM",
                                        "EDITPARENTS_PERM",
                                        "CUSTOM01_PERM",
                                        "CUSTOM02_PERM",
                                        "CUSTOM03_PERM",
                                        "CUSTOM04_PERM"
                                    ]
                                }
                            },
                            "property_filters": {
                                "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                            },
                            "sort_criteria": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ContainerChildSortCriteria"
                                }
                            }
                        }
                    }
                ]
            },
            "HierarchicalFacetValuePath": {
                "type": "object",
                "properties": {
                    "component_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "NumericInterval": {
                "type": "object",
                "properties": {
                    "custom_range": {
                        "type": "boolean"
                    },
                    "end_inclusive": {
                        "type": "boolean"
                    },
                    "end_value": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "interval_label": {
                        "type": "string"
                    },
                    "start_inclusive": {
                        "type": "boolean"
                    },
                    "start_value": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "xml": {
                    "name": "NumericInterval",
                    "namespace": "http://www.artesia.com/api/xsd"
                }
            },
            "NumericRange": {
                "type": "object",
                "properties": {
                    "custom_range": {
                        "type": "boolean"
                    },
                    "end_value": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "start_value": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RecentAccessSelectionContext": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "attested_context": {
                                "$ref": "#/components/schemas/AttestedContext"
                            },
                            "attested_context_list": {
                                "$ref": "#/components/schemas/AttestedContextList"
                            },
                            "child_type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSETS",
                                    "CONTAINERS",
                                    "ASSETS_AND_CONTAINERS"
                                ]
                            },
                            "exclusion_asset_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "asset_ids"
                                    }
                                }
                            },
                            "include_deleted_assets": {
                                "type": "boolean"
                            },
                            "include_descendants": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ALL",
                                    "IMMEDIATE",
                                    "NONE"
                                ]
                            },
                            "page_index": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "page_size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "permissions_filter": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "properties": {},
                                    "enum": [
                                        "ASSETVIEW_PERM",
                                        "SUMMARYVIEW_PERM",
                                        "PREVIEWVIEW_PERM",
                                        "EXPORT_PERM",
                                        "SUBSCRIBE_PERM",
                                        "METAEDIT_PERM",
                                        "CONTENTEDIT_PERM",
                                        "MEMBERSHIPEDIT_PERM",
                                        "DELETEASSET_PERM",
                                        "EDITPARENTS_PERM",
                                        "CUSTOM01_PERM",
                                        "CUSTOM02_PERM",
                                        "CUSTOM03_PERM",
                                        "CUSTOM04_PERM"
                                    ]
                                }
                            },
                            "property_filters": {
                                "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                            },
                            "type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSET",
                                    "CONTAINER"
                                ]
                            }
                        }
                    }
                ]
            },
            "RelativeDateIntervalValue": {
                "type": "object",
                "properties": {
                    "adjustment_offset": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "adjustment_units": {
                        "type": "string"
                    },
                    "base_time_unit": {
                        "type": "string"
                    }
                }
            },
            "ReviewJobSelectionContext": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "attested_context": {
                                "$ref": "#/components/schemas/AttestedContext"
                            },
                            "attested_context_list": {
                                "$ref": "#/components/schemas/AttestedContextList"
                            },
                            "child_type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSETS",
                                    "CONTAINERS",
                                    "ASSETS_AND_CONTAINERS"
                                ]
                            },
                            "content_filter": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "NO_CONTENT",
                                    "CONTENT_ONLY",
                                    "ALL"
                                ]
                            },
                            "exclusion_asset_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "asset_ids"
                                    }
                                }
                            },
                            "include_all_versions": {
                                "type": "boolean",
                                "writeOnly": true
                            },
                            "include_deleted_assets": {
                                "type": "boolean"
                            },
                            "include_descendants": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ALL",
                                    "IMMEDIATE",
                                    "NONE"
                                ]
                            },
                            "page_index": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "page_size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "permissions_filter": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "properties": {},
                                    "enum": [
                                        "ASSETVIEW_PERM",
                                        "SUMMARYVIEW_PERM",
                                        "PREVIEWVIEW_PERM",
                                        "EXPORT_PERM",
                                        "SUBSCRIBE_PERM",
                                        "METAEDIT_PERM",
                                        "CONTENTEDIT_PERM",
                                        "MEMBERSHIPEDIT_PERM",
                                        "DELETEASSET_PERM",
                                        "EDITPARENTS_PERM",
                                        "CUSTOM01_PERM",
                                        "CUSTOM02_PERM",
                                        "CUSTOM03_PERM",
                                        "CUSTOM04_PERM"
                                    ]
                                }
                            },
                            "property_filters": {
                                "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                            },
                            "review_job_id": {
                                "type": "string"
                            },
                            "sort_ascending": {
                                "type": "boolean"
                            },
                            "sort_field": {
                                "type": "string"
                            },
                            "status_filter": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "NONE",
                                    "APPROVED",
                                    "REQUESTED_CHANGES",
                                    "ALL"
                                ]
                            },
                            "task_id": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "SearchCondition": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "filter_condition": {
                        "type": "boolean"
                    },
                    "left_paren": {
                        "type": "string"
                    },
                    "relational_operator": {
                        "type": "string"
                    },
                    "right_paren": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.search.SearchMetadataCondition": "#/components/schemas/SearchMetadataCondition",
                        "com.artesia.search.SearchCustomCondition": "#/components/schemas/SearchCustomCondition",
                        "com.artesia.search.SearchFulltextCondition": "#/components/schemas/SearchFulltextCondition",
                        "com.artesia.search.SearchScalarCondition": "#/components/schemas/SearchScalarCondition",
                        "com.artesia.search.SearchTabularCondition": "#/components/schemas/SearchTabularCondition"
                    }
                }
            },
            "SearchCustomCondition": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SearchCondition"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "custom_condition_map": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<String,String>"
                            },
                            "filter_condition": {
                                "type": "boolean"
                            },
                            "left_paren": {
                                "type": "string"
                            },
                            "relational_operator": {
                                "type": "string"
                            },
                            "right_paren": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "SearchFulltextCondition": {
                "type": "object",
                "properties": {
                    "filter_condition": {
                        "type": "boolean"
                    },
                    "keyword": {
                        "type": "string"
                    },
                    "left_paren": {
                        "type": "string"
                    },
                    "original_keyword": {
                        "type": "string"
                    },
                    "relational_operator": {
                        "type": "string"
                    },
                    "right_paren": {
                        "type": "string"
                    },
                    "scope_id": {
                        "type": "string"
                    }
                }
            },
            "SearchMetadataCondition": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SearchCondition"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "display_value": {
                                "type": "string"
                            },
                            "filter_condition": {
                                "type": "boolean"
                            },
                            "left_paren": {
                                "type": "string"
                            },
                            "metadata_field_id": {
                                "type": "string"
                            },
                            "relational_operator": {
                                "type": "string"
                            },
                            "relational_operator_id": {
                                "type": "string"
                            },
                            "right_paren": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "SearchScalarCondition": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SearchCondition"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "display_value": {
                                "type": "string"
                            },
                            "filter_condition": {
                                "type": "boolean"
                            },
                            "left_paren": {
                                "type": "string"
                            },
                            "metadata_field_id": {
                                "type": "string"
                            },
                            "relational_operator": {
                                "type": "string"
                            },
                            "relational_operator_id": {
                                "type": "string"
                            },
                            "right_paren": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "SearchSelectionContext": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "apply_search_filter_user_prefs": {
                                "type": "boolean"
                            },
                            "attested_context": {
                                "$ref": "#/components/schemas/AttestedContext"
                            },
                            "attested_context_list": {
                                "$ref": "#/components/schemas/AttestedContextList"
                            },
                            "child_type": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ASSETS",
                                    "CONTAINERS",
                                    "ASSETS_AND_CONTAINERS"
                                ]
                            },
                            "collection_filter_id": {
                                "type": "string"
                            },
                            "collection_list_filter_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "color_filter_id": {
                                "type": "string"
                            },
                            "default_operator": {
                                "type": "string"
                            },
                            "exclusion_asset_id_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "asset_ids"
                                    }
                                }
                            },
                            "facet_config_id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "facet_restriction_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FacetFieldRestriction"
                                }
                            },
                            "fixed_condition_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SearchCondition"
                                }
                            },
                            "folder_filter_id": {
                                "type": "string"
                            },
                            "folder_filter_type": {
                                "type": "string"
                            },
                            "ignore_collection_filter": {
                                "type": "boolean"
                            },
                            "ignore_collection_list_filter": {
                                "type": "boolean"
                            },
                            "ignore_color_filter": {
                                "type": "boolean"
                            },
                            "ignore_folder_filter": {
                                "type": "boolean"
                            },
                            "ignore_keyword_query": {
                                "type": "boolean"
                            },
                            "ignore_search_condition_list": {
                                "type": "boolean"
                            },
                            "include_deleted_assets": {
                                "type": "boolean"
                            },
                            "include_descendants": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "ALL",
                                    "IMMEDIATE",
                                    "NONE"
                                ]
                            },
                            "keyword_filter_list": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "keyword_filter_scope_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "keyword_query": {
                                "type": "string"
                            },
                            "keyword_scope_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "merge_filters": {
                                "type": "boolean"
                            },
                            "multilingual_language_code": {
                                "type": "string"
                            },
                            "page_index": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "page_size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "permissions_filter": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "properties": {},
                                    "enum": [
                                        "ASSETVIEW_PERM",
                                        "SUMMARYVIEW_PERM",
                                        "PREVIEWVIEW_PERM",
                                        "EXPORT_PERM",
                                        "SUBSCRIBE_PERM",
                                        "METAEDIT_PERM",
                                        "CONTENTEDIT_PERM",
                                        "MEMBERSHIPEDIT_PERM",
                                        "DELETEASSET_PERM",
                                        "EDITPARENTS_PERM",
                                        "CUSTOM01_PERM",
                                        "CUSTOM02_PERM",
                                        "CUSTOM03_PERM",
                                        "CUSTOM04_PERM"
                                    ]
                                }
                            },
                            "property_filters": {
                                "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                            },
                            "saved_search_id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "search_condition_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SearchCondition"
                                }
                            },
                            "search_config_id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "search_plugin_id": {
                                "type": "string"
                            },
                            "sort_criteria": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SearchSortField"
                                }
                            }
                        }
                    }
                ]
            },
            "SearchSortField": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "metadata_field_id": {
                        "type": "string"
                    },
                    "sort_order": {
                        "type": "string"
                    }
                }
            },
            "SearchTabularCondition": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SearchCondition"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "filter_condition": {
                                "type": "boolean"
                            },
                            "left_paren": {
                                "type": "string"
                            },
                            "metadata_table_id": {
                                "type": "string"
                            },
                            "relational_operator": {
                                "type": "string"
                            },
                            "right_paren": {
                                "type": "string"
                            },
                            "tabular_field_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SearchTabularFieldCondition"
                                }
                            }
                        }
                    }
                ]
            },
            "SearchTabularFieldCondition": {
                "type": "object",
                "properties": {
                    "display_value": {
                        "type": "string"
                    },
                    "filter_condition": {
                        "type": "boolean"
                    },
                    "left_paren": {
                        "type": "string"
                    },
                    "metadata_field_id": {
                        "type": "string"
                    },
                    "relational_operator": {
                        "type": "string"
                    },
                    "relational_operator_id": {
                        "type": "string"
                    },
                    "right_paren": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "SelectionContext": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "attested_context": {
                        "$ref": "#/components/schemas/AttestedContext"
                    },
                    "attested_context_list": {
                        "$ref": "#/components/schemas/AttestedContextList"
                    },
                    "child_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "ASSETS",
                            "CONTAINERS",
                            "ASSETS_AND_CONTAINERS"
                        ]
                    },
                    "exclusion_asset_id_list": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "xml": {
                                "name": "asset_ids"
                            }
                        }
                    },
                    "include_deleted_assets": {
                        "type": "boolean"
                    },
                    "include_descendants": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "ALL",
                            "IMMEDIATE",
                            "NONE"
                        ]
                    },
                    "page_index": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page_size": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "permissions_filter": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "properties": {},
                            "enum": [
                                "ASSETVIEW_PERM",
                                "SUMMARYVIEW_PERM",
                                "PREVIEWVIEW_PERM",
                                "EXPORT_PERM",
                                "SUBSCRIBE_PERM",
                                "METAEDIT_PERM",
                                "CONTENTEDIT_PERM",
                                "MEMBERSHIPEDIT_PERM",
                                "DELETEASSET_PERM",
                                "EDITPARENTS_PERM",
                                "CUSTOM01_PERM",
                                "CUSTOM02_PERM",
                                "CUSTOM03_PERM",
                                "CUSTOM04_PERM"
                            ]
                        }
                    },
                    "property_filters": {
                        "$ref": "#/components/schemas/SelectionContextPropertyFilters"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.asset.selection.SearchSelectionContext": "#/components/schemas/SearchSelectionContext",
                        "com.artesia.asset.selection.FolderSelectionContext": "#/components/schemas/FolderSelectionContext",
                        "com.artesia.asset.selection.AssetIdsSelectionContext": "#/components/schemas/AssetIdsSelectionContext",
                        "com.artesia.asset.selection.AssetCollectionSelectionContext": "#/components/schemas/AssetCollectionSelectionContext",
                        "com.artesia.asset.selection.RecentAccessSelectionContext": "#/components/schemas/RecentAccessSelectionContext",
                        "com.artesia.asset.selection.ActivitySelectionContext": "#/components/schemas/ActivitySelectionContext",
                        "com.artesia.asset.selection.ReviewJobSelectionContext": "#/components/schemas/ReviewJobSelectionContext",
                        "com.artesia.asset.selection.CollectionSelectionContext": "#/components/schemas/CollectionSelectionContext",
                        "com.artesia.asset.selection.CollectionListSelectionContext": "#/components/schemas/CollectionListSelectionContext"
                    }
                }
            },
            "SelectionContextParam": {
                "type": "object",
                "properties": {
                    "selection_context_param": {
                        "type": "object",
                        "properties": {
                            "selection_context": {
                                "$ref": "#/components/schemas/SelectionContext"
                            }
                        },
                        "format": "SelectionContextParam"
                    }
                },
                "xml": {
                    "name": "selection_context_param"
                }
            },
            "SelectionContextPropertyFilters": {
                "type": "object",
                "properties": {
                    "content_type_filters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AssetIdPathList": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "type": "string"
                    },
                    "paths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContainerPath"
                        }
                    }
                }
            },
            "AssetIdToPathMapParam": {
                "type": "object",
                "properties": {
                    "asset_id_path_map_request_param": {
                        "type": "object",
                        "properties": {
                            "asset_ids_to_path_list_map": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AssetIdPathList"
                                }
                            }
                        },
                        "format": "AssetIdToPathMapParam"
                    }
                },
                "xml": {
                    "name": "asset_id_path_map_request_param"
                }
            },
            "Collection": {
                "type": "object",
                "properties": {
                    "access_control_descriptor": {
                        "$ref": "#/components/schemas/XmlCollectionAccessControlDescriptor"
                    },
                    "average_rating": {
                        "type": "number",
                        "format": "float"
                    },
                    "collection_share_access_info": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CollectionShareAccessInfo"
                        }
                    },
                    "collection_source": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "ASSET",
                            "SEARCH",
                            "NONE"
                        ]
                    },
                    "collection_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "PRIVATE",
                            "PUBLIC",
                            "SHARED"
                        ]
                    },
                    "created_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "description": {
                        "type": "string"
                    },
                    "follow_latest": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "microsite": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner_name": {
                        "type": "string"
                    },
                    "owner_user_id": {
                        "type": "string"
                    },
                    "promoted": {
                        "type": "boolean"
                    },
                    "rating_count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rating_enabled": {
                        "type": "boolean"
                    },
                    "subscribed": {
                        "type": "boolean"
                    },
                    "thumbnail_info": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "thumbnail_original_id": {
                        "type": "string"
                    },
                    "update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "update_user_id": {
                        "type": "string"
                    },
                    "user_rating": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "xml": {
                    "name": "Collection"
                }
            },
            "CollectionShareAccessInfo": {
                "type": "object",
                "properties": {
                    "access_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "access_level": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "USER",
                            "USERGROUP"
                        ]
                    },
                    "collection_id": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "shared_by": {
                        "type": "string"
                    },
                    "user_group_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_group_name": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    },
                    "user_name": {
                        "type": "string"
                    }
                }
            },
            "CollectionsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "collection_resource": {
                        "type": "object",
                        "properties": {
                            "collection": {
                                "type": "array",
                                "xml": {
                                    "name": "collection"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/Collection"
                                }
                            },
                            "collection_summary": {
                                "$ref": "#/components/schemas/RestApiCollectionSummary"
                            }
                        },
                        "format": "CollectionsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "collection_resource"
                }
            },
            "XmlCollectionAccessControlDescriptor": {
                "type": "object",
                "properties": {
                    "permissions_map": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "object",
                                            "format": "Boolean"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,Boolean>"
                    }
                },
                "xml": {
                    "name": "access_control_descriptor"
                }
            },
            "Container": {
                "type": "object",
                "properties": {
                    "access_control_descriptor": {
                        "$ref": "#/components/schemas/XmlAccessControlDescriptor"
                    },
                    "asset_color_infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AssetColorInfo"
                        }
                    },
                    "asset_content_info": {
                        "$ref": "#/components/schemas/AssetContentInfo"
                    },
                    "asset_id": {
                        "type": "string"
                    },
                    "asset_lock_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "asset_lock_state_user_id": {
                        "type": "string"
                    },
                    "asset_state": {
                        "type": "string"
                    },
                    "asset_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "asset_state_user_id": {
                        "type": "string"
                    },
                    "business_unit_id": {
                        "type": "string"
                    },
                    "checked_out": {
                        "type": "boolean"
                    },
                    "collection_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "container_child_counts": {
                        "$ref": "#/components/schemas/ContainerChildCounts"
                    },
                    "container_id": {
                        "type": "string"
                    },
                    "container_type_id": {
                        "type": "string"
                    },
                    "container_type_name": {
                        "type": "string"
                    },
                    "content_editable": {
                        "type": "boolean"
                    },
                    "content_lock_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "content_lock_state_user_id": {
                        "type": "string"
                    },
                    "content_lock_state_user_name": {
                        "type": "string"
                    },
                    "content_size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "content_state": {
                        "type": "string"
                    },
                    "content_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "content_state_user_id": {
                        "type": "string"
                    },
                    "content_state_user_name": {
                        "type": "string"
                    },
                    "content_sub_type": {
                        "type": "string"
                    },
                    "content_type": {
                        "type": "string"
                    },
                    "creator_id": {
                        "type": "string"
                    },
                    "data_type": {
                        "type": "string"
                    },
                    "date_imported": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "date_last_updated": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "deep_zoom_info": {
                        "$ref": "#/components/schemas/DeepZoomInfo"
                    },
                    "default_property_template_id": {
                        "type": "string"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "deletion_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "deletion_state_user_id": {
                        "type": "string"
                    },
                    "deletion_state_user_name": {
                        "type": "string"
                    },
                    "delivery_service_url": {
                        "type": "string"
                    },
                    "expired": {
                        "type": "boolean"
                    },
                    "import_job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "import_user_name": {
                        "type": "string"
                    },
                    "in_review": {
                        "type": "boolean"
                    },
                    "inherited_metadata_collections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InheritedMetadataCollection"
                        }
                    },
                    "latest_version": {
                        "type": "boolean"
                    },
                    "legacy_model_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "links": {
                        "$ref": "#/components/schemas/LinkCollection"
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "master_content_info": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetadataCollection"
                    },
                    "metadata_lock_state_user_name": {
                        "type": "string"
                    },
                    "metadata_model_id": {
                        "type": "string"
                    },
                    "metadata_state_user_name": {
                        "type": "string"
                    },
                    "mime_type": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "original_asset_id": {
                        "type": "string"
                    },
                    "originating_preview_url": {
                        "type": "string"
                    },
                    "originating_thumbnail_url": {
                        "type": "string"
                    },
                    "path_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContainerPath"
                        }
                    },
                    "progressive_download_url": {
                        "type": "string"
                    },
                    "rendition_content": {
                        "$ref": "#/components/schemas/RenditionContentInfo"
                    },
                    "review_asset_approval_summary_collection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReviewJobAssetApprovalSummary"
                        }
                    },
                    "review_info_collection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreativeReviewInfo"
                        }
                    },
                    "security_policy_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SecurityPolicy"
                        }
                    },
                    "streaming_url": {
                        "type": "string"
                    },
                    "subscribed_to": {
                        "type": "boolean"
                    },
                    "thumbnail_content_id": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "watermark_template_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "xml": {
                    "name": "Container"
                }
            },
            "FolderCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "folders_resource": {
                        "type": "object",
                        "properties": {
                            "folder_list": {
                                "type": "array",
                                "xml": {
                                    "name": "folder_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/Container"
                                }
                            }
                        },
                        "format": "FolderCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "folders_resource"
                }
            },
            "AssetSortOptionCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "asset_sort_options_resource": {
                        "type": "object",
                        "properties": {
                            "sort_option_list": {
                                "type": "array",
                                "xml": {
                                    "name": "sort_option_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SortOption"
                                }
                            }
                        },
                        "format": "AssetSortOptionCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "asset_sort_options_resource"
                }
            },
            "SortOption": {
                "type": "object",
                "properties": {
                    "message_id": {
                        "type": "string",
                        "xml": {
                            "name": "message_id"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "sort_option"
                }
            },
            "ParentsOperationRepresentation": {
                "type": "object",
                "properties": {
                    "parents_operation_resource": {
                        "type": "object",
                        "properties": {
                            "failed_operation_ids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "type": {
                                "type": "string"
                            }
                        },
                        "format": "ParentsOperationRepresentation"
                    }
                },
                "xml": {
                    "name": "parents_operation_resource"
                }
            },
            "AssetEditDataSet": {
                "type": "object",
                "properties": {
                    "asset_identifier": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "array",
                        "properties": {},
                        "items": {
                            "$ref": "#/components/schemas/MetadataField"
                        }
                    },
                    "security_policies": {
                        "$ref": "#/components/schemas/SecurityPolicySection"
                    }
                },
                "xml": {
                    "name": "asset_data"
                }
            },
            "EditedAsset": {
                "type": "object",
                "properties": {
                    "edited_asset": {
                        "type": "object",
                        "properties": {
                            "data": {
                                "$ref": "#/components/schemas/AssetEditDataSet"
                            }
                        },
                        "format": "EditedAsset"
                    }
                },
                "xml": {
                    "name": "edited_asset"
                }
            },
            "MetadataField": {
                "type": "object",
                "properties": {
                    "cascading_group_id": {
                        "type": "string"
                    },
                    "column_name": {
                        "type": "string"
                    },
                    "data_length": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "data_type": {
                        "type": "string"
                    },
                    "default_value": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "displayable": {
                        "type": "boolean"
                    },
                    "domain_id": {
                        "type": "string"
                    },
                    "domained": {
                        "type": "boolean"
                    },
                    "edit_type": {
                        "type": "string"
                    },
                    "editable": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "external_datasource_id": {
                        "type": "string"
                    },
                    "facetable": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instructions": {
                        "type": "string"
                    },
                    "multilingual": {
                        "type": "boolean"
                    },
                    "multilingual_table_name": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "options": {
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "restriction_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "scale": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "searchable": {
                        "type": "boolean"
                    },
                    "searchable_scope_id": {
                        "type": "string"
                    },
                    "searchable_scope_num_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sortable": {
                        "type": "boolean"
                    },
                    "system_field": {
                        "type": "boolean"
                    },
                    "table_name": {
                        "type": "string"
                    },
                    "trigger_field": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type when not base MetadataField object."
                    },
                    "validation_rule": {
                        "type": "string"
                    },
                    "value": {
                        "$ref": "#/components/schemas/MetadataValue"
                    }
                },
                "xml": {
                    "name": "MetadataField"
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "ᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠᅠ": "#/components/schemas/MetadataField",
                        "com.artesia.metadata.MetadataTableField": "#/components/schemas/MetadataTableField"
                    }
                }
            },
            "MetadataTableField": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "xml": {
                    "name": "MetadataField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MetadataField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "cascading_group_id": {
                                "type": "string"
                            },
                            "column_name": {
                                "type": "string"
                            },
                            "data_length": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "data_type": {
                                "type": "string"
                            },
                            "default_value": {
                                "type": "string"
                            },
                            "domain_id": {
                                "type": "string"
                            },
                            "edit_type": {
                                "type": "string"
                            },
                            "external_datasource_id": {
                                "type": "string"
                            },
                            "meta_table_seq": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "multilingual_table_name": {
                                "type": "string"
                            },
                            "parent_table_id": {
                                "type": "string"
                            },
                            "parent_table_name": {
                                "type": "string"
                            },
                            "restriction_id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "saved_values_behavior_mode": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "searchable_scope_id": {
                                "type": "string"
                            },
                            "searchable_scope_num_id": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "system_field": {
                                "type": "boolean"
                            },
                            "table_name": {
                                "type": "string"
                            },
                            "trigger_field": {
                                "type": "boolean"
                            },
                            "validation_rule": {
                                "type": "string"
                            },
                            "values": {
                                "type": "array",
                                "properties": {},
                                "items": {
                                    "$ref": "#/components/schemas/MetadataValue"
                                }
                            }
                        }
                    }
                ]
            },
            "SecurityPolicySection": {
                "type": "object",
                "properties": {
                    "edit_mode": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "APPEND",
                            "REPLACE",
                            "REMOVE"
                        ]
                    },
                    "security_policy_ids": {
                        "type": "array",
                        "properties": {},
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "AssetStateOptions": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "apply_to_all_versions": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.asset.DeleteAssetOptions": "#/components/schemas/DeleteAssetOptions",
                        "com.artesia.asset.UndeleteOptions": "#/components/schemas/UndeleteOptions"
                    }
                }
            },
            "AssetStateOptionsParam": {
                "type": "object",
                "properties": {
                    "asset_state_options_param": {
                        "type": "object",
                        "properties": {
                            "asset_state_options": {
                                "$ref": "#/components/schemas/AssetStateOptions"
                            }
                        },
                        "format": "AssetStateOptionsParam"
                    }
                },
                "xml": {
                    "name": "asset_state_options_param"
                }
            },
            "DeleteAssetOptions": {
                "type": "object",
                "xml": {
                    "name": "DeleteAssetOptions"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AssetStateOptions"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "apply_to_all_versions": {
                                "type": "boolean"
                            },
                            "delete_objects_having_multiple_parents": {
                                "type": "boolean"
                            },
                            "delete_only_content": {
                                "type": "boolean"
                            },
                            "hierarchical_processing_options": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "APPLY_ONLY_TO_THIS_CONTAINER",
                                    "APPLY_TO_ALL_DESCENDANTS",
                                    "APPLY_ONLY_TO_DESCENDANT_ASSETS",
                                    "APPLY_ONLY_TO_DESCENDANT_CONTAINERS"
                                ]
                            }
                        }
                    }
                ]
            },
            "UndeleteOptions": {
                "type": "object",
                "xml": {
                    "name": "UndeleteOptions"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AssetStateOptions"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "apply_to_all_versions": {
                                "type": "boolean"
                            },
                            "hierarchical_processing_options": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "APPLY_ONLY_TO_THIS_CONTAINER",
                                    "APPLY_TO_ALL_DESCENDANTS",
                                    "APPLY_ONLY_TO_DESCENDANT_ASSETS",
                                    "APPLY_ONLY_TO_DESCENDANT_CONTAINERS"
                                ]
                            },
                            "undelete_folder_hiearchy": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "BulkEditRequest": {
                "type": "object",
                "properties": {
                    "context": {
                        "$ref": "#/components/schemas/SelectionContext"
                    },
                    "job_name": {
                        "type": "string"
                    },
                    "job_type": {
                        "type": "string"
                    },
                    "metadata_values": {
                        "type": "object",
                        "properties": {
                            "metadata_edit_id_value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataEditTypeToFielIdValueEntry"
                                }
                            }
                        }
                    },
                    "security_policies": {
                        "$ref": "#/components/schemas/SecurityPolicySection"
                    }
                },
                "xml": {
                    "name": "BulkEditRequest"
                }
            },
            "BulkEditRequestParam": {
                "type": "object",
                "properties": {
                    "bulk_edit_request_param": {
                        "type": "object",
                        "properties": {
                            "bulk_edit_request": {
                                "$ref": "#/components/schemas/BulkEditRequest"
                            }
                        },
                        "format": "BulkEditRequestParam"
                    }
                },
                "xml": {
                    "name": "bulk_edit_request_param"
                }
            },
            "FielIdValueEntry": {
                "type": "object",
                "properties": {
                    "metadata_field_id": {
                        "type": "string"
                    },
                    "metadata_value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MetadataValue"
                        }
                    }
                }
            },
            "MetadataEditTypeToFiedlIdValueList": {
                "type": "object",
                "properties": {
                    "metadata_edit_id_value_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MetadataEditTypeToFielIdValueEntry"
                        }
                    }
                }
            },
            "MetadataEditTypeToFielIdValueEntry": {
                "type": "object",
                "properties": {
                    "field_id_value_entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FielIdValueEntry"
                        }
                    },
                    "metadata_section_id": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "METADATA_APPEND_SECTION",
                            "METADATA_MISC_EDIT_SECTION",
                            "METADATA_EMPTY_SECTION"
                        ]
                    }
                }
            },
            "AssetUsage": {
                "type": "object",
                "properties": {
                    "application_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "application_name": {
                        "type": "string"
                    },
                    "asset_id": {
                        "type": "string"
                    },
                    "campaign": {
                        "type": "string"
                    },
                    "category_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "category_name": {
                        "type": "string"
                    },
                    "external_tracking_id": {
                        "type": "string"
                    },
                    "insights_url": {
                        "type": "string"
                    },
                    "project_url": {
                        "type": "string"
                    },
                    "staging_url": {
                        "type": "string"
                    },
                    "tracking_url": {
                        "type": "string"
                    },
                    "usage_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "user_fullname": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    }
                }
            },
            "AssetUsageCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "asset_usages_resource": {
                        "type": "object",
                        "properties": {
                            "asset_usages": {
                                "type": "array",
                                "xml": {
                                    "name": "asset_usages"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/AssetUsage"
                                }
                            },
                            "collection_summary": {
                                "$ref": "#/components/schemas/RestApiCollectionSummary"
                            }
                        },
                        "format": "AssetUsageCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "asset_usages_resource"
                }
            },
            "Spin360ContentInfo": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "type": "string"
                    },
                    "columns": {
                        "type": "string"
                    },
                    "content_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContentInfo"
                        }
                    },
                    "rows": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Spin360ContentInfo"
                }
            },
            "Spin360ContentRepresentation": {
                "type": "object",
                "properties": {
                    "spin_360_content_representation": {
                        "type": "object",
                        "properties": {
                            "spin_360_content_info": {
                                "$ref": "#/components/schemas/Spin360ContentInfo"
                            }
                        },
                        "format": "Spin360ContentRepresentation"
                    }
                },
                "xml": {
                    "name": "spin_360_content_representation"
                }
            },
            "AuditAssetActivity": {
                "type": "object",
                "properties": {
                    "app_msg_xml": {
                        "type": "string"
                    },
                    "date_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "event_context_desc": {
                        "type": "string"
                    },
                    "event_id": {
                        "type": "string"
                    },
                    "extended_msg_data": {
                        "type": "boolean"
                    },
                    "sequence_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "type": "string"
                    }
                }
            },
            "EventCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "audit_event_resource": {
                        "type": "object",
                        "properties": {
                            "audit_event_list": {
                                "type": "array",
                                "xml": {
                                    "name": "audit_event_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/AuditAssetActivity"
                                }
                            },
                            "collection_summary": {
                                "$ref": "#/components/schemas/RestApiCollectionSummary"
                            }
                        },
                        "format": "EventCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "audit_event_resource"
                }
            },
            "AuditDropdownItemsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "audit_dropdown_filter_resource": {
                        "type": "object",
                        "properties": {
                            "dropdown_list": {
                                "type": "array",
                                "xml": {
                                    "name": "dropdown_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/EventConfiguration"
                                }
                            }
                        },
                        "format": "AuditDropdownItemsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "audit_dropdown_filter_resource"
                }
            },
            "EventConfiguration": {
                "type": "object",
                "properties": {
                    "component_description": {
                        "type": "string"
                    },
                    "component_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "context": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "AUDIT",
                            "ERROR",
                            "TRACE",
                            "SECURITY",
                            "DEBUG",
                            "INFO",
                            "JOB",
                            "WORKFLOW",
                            "WARNING",
                            "PROJECT",
                            "COMMENT",
                            "TRANSFOMATION"
                        ]
                    },
                    "context_description": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "editable": {
                        "type": "boolean"
                    },
                    "enabled_external": {
                        "type": "boolean"
                    },
                    "enabled_internal": {
                        "type": "boolean"
                    },
                    "event_id": {
                        "type": "string"
                    },
                    "file_destination": {
                        "type": "string"
                    },
                    "legacy_logging_dest": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "legacy_table_dest": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "AuditEventDetails": {
                "type": "object",
                "properties": {
                    "event_id": {
                        "type": "string",
                        "xml": {
                            "name": "event_id"
                        }
                    },
                    "field_edit_details": {
                        "type": "array",
                        "xml": {
                            "name": "field_edit_details"
                        },
                        "items": {
                            "$ref": "#/components/schemas/FieldEditDetails"
                        }
                    },
                    "name_value_details": {
                        "$ref": "#/components/schemas/NameValueDetails"
                    },
                    "policy_edit_details": {
                        "$ref": "#/components/schemas/PolicyEditDetails"
                    },
                    "sequence_id": {
                        "type": "integer",
                        "format": "int64",
                        "xml": {
                            "name": "sequence_id"
                        }
                    }
                }
            },
            "AuditEventDetailsRepresentation": {
                "type": "object",
                "properties": {
                    "audit_event_details_resource": {
                        "type": "object",
                        "properties": {
                            "event_details": {
                                "$ref": "#/components/schemas/AuditEventDetails"
                            }
                        },
                        "format": "AuditEventDetailsRepresentation"
                    }
                },
                "xml": {
                    "name": "audit_event_details_resource"
                }
            },
            "FieldEditDetails": {
                "type": "object",
                "properties": {
                    "data_type": {
                        "type": "string",
                        "xml": {
                            "name": "data_type"
                        }
                    },
                    "field_id": {
                        "type": "string",
                        "xml": {
                            "name": "field_id"
                        }
                    },
                    "new_values": {
                        "type": "array",
                        "xml": {
                            "name": "new_values"
                        },
                        "items": {
                            "type": "string",
                            "xml": {
                                "name": "new_values"
                            }
                        }
                    },
                    "old_values": {
                        "type": "array",
                        "xml": {
                            "name": "old_values"
                        },
                        "items": {
                            "type": "string",
                            "xml": {
                                "name": "old_values"
                            }
                        }
                    }
                }
            },
            "NameValue": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "old_value": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "NameValueDetails": {
                "type": "object",
                "properties": {
                    "name_value_list": {
                        "type": "array",
                        "xml": {
                            "name": "name_value_list"
                        },
                        "items": {
                            "$ref": "#/components/schemas/NameValue"
                        }
                    }
                }
            },
            "PolicyEditDetails": {
                "type": "object",
                "properties": {
                    "new_values": {
                        "type": "array",
                        "xml": {
                            "name": "new_values"
                        },
                        "items": {
                            "$ref": "#/components/schemas/PolicyEditItem"
                        }
                    },
                    "old_values": {
                        "type": "array",
                        "xml": {
                            "name": "old_values"
                        },
                        "items": {
                            "$ref": "#/components/schemas/PolicyEditItem"
                        }
                    }
                }
            },
            "PolicyEditItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "AuditSortOptionCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "audit_sort_options_resource": {
                        "type": "object",
                        "properties": {
                            "sort_option_list": {
                                "type": "array",
                                "xml": {
                                    "name": "sort_option_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SortOption"
                                }
                            }
                        },
                        "format": "AuditSortOptionCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "audit_sort_options_resource"
                }
            },
            "BasicBrandConfiguration": {
                "type": "object",
                "properties": {
                    "extended_brand_configurations": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "object",
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "description": "Set to \"string\""
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "value": {
                                            "type": "object",
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "description": "Set to \"base64Binary\""
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map"
                    },
                    "header_bg_color": {
                        "type": "string"
                    },
                    "header_logo": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "header_logo_name": {
                        "type": "string"
                    },
                    "hero_image": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "hero_image_name": {
                        "type": "string"
                    },
                    "homescreen_bg": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "homescreen_bg_name": {
                        "type": "string"
                    },
                    "homescreen_default_color": {
                        "type": "string"
                    },
                    "notification_brand_configurations": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "object",
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "description": "Set to \"string\""
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "value": {
                                            "type": "object",
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "description": "Set to \"base64Binary\""
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map"
                    },
                    "primary_color": {
                        "type": "string"
                    },
                    "secondary_color": {
                        "type": "string"
                    }
                }
            },
            "Branding": {
                "type": "object",
                "properties": {
                    "basic_brand_configuration": {
                        "$ref": "#/components/schemas/BasicBrandConfiguration"
                    },
                    "branding_type": {
                        "type": "string"
                    },
                    "branding_ui_zip": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "configuration_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "BASIC",
                            "ADVANCED"
                        ]
                    },
                    "create_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "creator_id": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "update_user_id": {
                        "type": "string"
                    }
                }
            },
            "BrandingRepresentation": {
                "type": "object",
                "properties": {
                    "branding_resource": {
                        "type": "object",
                        "properties": {
                            "branding": {
                                "$ref": "#/components/schemas/Branding"
                            }
                        },
                        "format": "BrandingRepresentation"
                    }
                },
                "xml": {
                    "name": "branding_resource"
                }
            },
            "CascadingDomainValue": {
                "type": "object",
                "properties": {
                    "element_values": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "value": {
                                            "$ref": "#/components/schemas/DomainValue"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<Integer,DomainValue>"
                    },
                    "field_value": {
                        "type": "object"
                    }
                },
                "xml": {
                    "name": "CascadingDomainValue"
                }
            },
            "CascadingElement": {
                "type": "object",
                "properties": {
                    "domain_id": {
                        "type": "string"
                    },
                    "id": {
                        "$ref": "#/components/schemas/CascadingTableElementId"
                    },
                    "prompt": {
                        "type": "string"
                    },
                    "seq": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "CascadingGroup": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,String>"
                    },
                    "cacheable": {
                        "type": "boolean"
                    },
                    "cascading_domain_values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CascadingDomainValue"
                        }
                    },
                    "descr": {
                        "type": "string"
                    },
                    "domain_table_name": {
                        "type": "string"
                    },
                    "element_map": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "value": {
                                            "$ref": "#/components/schemas/CascadingElement"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<Integer,CascadingElement>"
                    },
                    "id": {
                        "type": "string"
                    },
                    "implementation_class": {
                        "type": "string"
                    },
                    "no_of_elements": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "prompt": {
                        "type": "string"
                    }
                }
            },
            "CascadingGroupRepresentation": {
                "type": "object",
                "properties": {
                    "cascading_domain_resource": {
                        "type": "object",
                        "properties": {
                            "cascading_group": {
                                "$ref": "#/components/schemas/CascadingGroup"
                            }
                        },
                        "format": "CascadingGroupRepresentation"
                    }
                },
                "xml": {
                    "name": "cascading_domain_resource"
                }
            },
            "CascadingTableElementId": {
                "type": "object",
                "properties": {
                    "column_name": {
                        "type": "string"
                    },
                    "table_name": {
                        "type": "string"
                    }
                }
            },
            "DomainValue": {
                "required": [
                    "activeFrom",
                    "activeTo",
                    "displayValue",
                    "fieldValue"
                ],
                "type": "object",
                "properties": {
                    "active_from": {
                        "type": "string"
                    },
                    "active_to": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "display_value": {
                        "type": "string"
                    },
                    "expired_value": {
                        "type": "boolean"
                    },
                    "field_value": {
                        "type": "object"
                    }
                },
                "xml": {
                    "name": "DomainValue"
                }
            },
            "DomainValuesCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "domain_values_resource": {
                        "type": "object",
                        "properties": {
                            "domain_values": {
                                "type": "array",
                                "properties": {},
                                "xml": {
                                    "name": "domain_values"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/DomainValue"
                                }
                            }
                        },
                        "format": "DomainValuesCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "domain_values_resource"
                }
            },
            "CollectionError": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "type": "string"
                    },
                    "collection_id": {
                        "type": "string"
                    },
                    "reasons": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "properties": {},
                            "enum": [
                                "DELETED_ASSET",
                                "ASSET_NOT_FOUND",
                                "ASSET_ALREADY_EXISTS",
                                "CONTAINER_NOT_ALLOWED",
                                "USER_NOT_ALLOWED",
                                "PROPERTY_TEMPLATE_NOT_ALLOWED",
                                "COLLECTION_NOT_FOUND",
                                "OPERATION_NOT_ALLOWED",
                                "DATABASE_ERROR",
                                "ASSET_NOT_ALLOWEED_NO_VIEW_PERMISSION",
                                "ASSET_NOT_ALLOWEED_NO_DOWNLOAD_PERMISSION",
                                "ERROR_WHILE_COLLECTION_SUBSCRIPTION",
                                "ERROR_WHILE_COLLECTION_ASSET_SUBSCRIPTION",
                                "COLLECTION_ALREADY_SUBSCRIBED",
                                "ERROR_WHILE_COLLECTION_UNSUBSCRIPTION",
                                "ERROR_WHILE_COLLECTION_ASSET_UNSUBSCRIPTION",
                                "ERROR_WHILE_COLLECTION_LINK_REMOVAL",
                                "ERROR_WHILE_COLLECTION_ASSET_LINK_REMOVAL",
                                "COLLECTION_NOT_SUBSCRIBED"
                            ]
                        }
                    }
                }
            },
            "CollectionOperationResult": {
                "type": "object",
                "properties": {
                    "collection_error_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CollectionError"
                        }
                    },
                    "errors": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "$ref": "#/components/schemas/CollectionError"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<TeamsIdentifier,CollectionError>"
                    },
                    "result": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "PASSED",
                            "ERROR",
                            "PARTIAL"
                        ]
                    },
                    "valid_asset_id_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "valid_collection_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "xml": {
                    "name": "ListOperationResult"
                }
            },
            "CollectionOperationResultRepresentation": {
                "type": "object",
                "properties": {
                    "collection_operation_result_representation": {
                        "type": "object",
                        "properties": {
                            "collection_operation_result": {
                                "$ref": "#/components/schemas/CollectionOperationResult"
                            }
                        },
                        "format": "CollectionOperationResultRepresentation"
                    }
                },
                "xml": {
                    "name": "collection_operation_result_representation"
                }
            },
            "CollectionRepresentation": {
                "type": "object",
                "properties": {
                    "collection_resource": {
                        "type": "object",
                        "properties": {
                            "collection": {
                                "$ref": "#/components/schemas/Collection"
                            }
                        },
                        "format": "CollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "collection_resource"
                }
            },
            "CollectionParam": {
                "type": "object",
                "properties": {
                    "collection_param": {
                        "type": "object",
                        "properties": {
                            "asset_list": {
                                "type": "array",
                                "xml": {
                                    "name": "asset_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/Asset"
                                }
                            },
                            "collection": {
                                "$ref": "#/components/schemas/Collection"
                            }
                        },
                        "format": "CollectionParam"
                    }
                },
                "xml": {
                    "name": "collection_param"
                }
            },
            "CollectionListSelectionContextParam": {
                "type": "object",
                "properties": {
                    "collection_list_selection_context_param": {
                        "type": "object",
                        "properties": {
                            "collection_list_selection_context": {
                                "$ref": "#/components/schemas/CollectionListSelectionContext"
                            }
                        },
                        "format": "CollectionListSelectionContextParam"
                    }
                },
                "xml": {
                    "name": "collection_list_selection_context_param"
                }
            },
            "AccessType": {
                "type": "object",
                "properties": {
                    "curate_permission": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "download_permission": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "manage_permission": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "view_permission": {
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "AccessType"
                }
            },
            "AccessTypeRepresentation": {
                "type": "object",
                "properties": {
                    "access_type_resource": {
                        "type": "object",
                        "properties": {
                            "access_type_list": {
                                "type": "array",
                                "xml": {
                                    "name": "access_type_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/AccessType"
                                }
                            }
                        },
                        "format": "AccessTypeRepresentation"
                    }
                },
                "xml": {
                    "name": "access_type_resource"
                }
            },
            "CollectionSortOptionCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "collection_sort_options_resource": {
                        "type": "object",
                        "properties": {
                            "sort_option_list": {
                                "type": "array",
                                "xml": {
                                    "name": "sort_option_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SortOption"
                                }
                            }
                        },
                        "format": "CollectionSortOptionCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "collection_sort_options_resource"
                }
            },
            "CollectionFiltersParam": {
                "type": "object",
                "properties": {
                    "collection_filters_param": {
                        "type": "object",
                        "properties": {
                            "filters": {
                                "$ref": "#/components/schemas/CollectionFilters"
                            }
                        },
                        "format": "CollectionFiltersParam"
                    }
                },
                "xml": {
                    "name": "collection_filters_param"
                }
            },
            "UserGroup": {
                "type": "object",
                "properties": {
                    "create_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "created_by": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "has_permission_on_sec_policy": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "last_updated_by": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "otds_group_mapping": {
                        "type": "string"
                    },
                    "ownership_type": {
                        "type": "string"
                    },
                    "parent": {
                        "type": "boolean"
                    },
                    "parent_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "path": {
                        "type": "string"
                    },
                    "preference_template_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "UserGroupCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "user_groups_resource": {
                        "type": "object",
                        "properties": {
                            "user_group_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        },
                        "format": "UserGroupCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "user_groups_resource"
                }
            },
            "ColorFilterOption": {
                "type": "object",
                "properties": {
                    "gray_scale": {
                        "type": "boolean"
                    },
                    "hue": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "rgb_hex_value": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ColorFilterOption",
                    "namespace": "http://www.artesia.com/api/xsd"
                }
            },
            "ColorFilterRepresentation": {
                "type": "object",
                "properties": {
                    "color_filter_resource": {
                        "type": "object",
                        "properties": {
                            "color_filter": {
                                "$ref": "#/components/schemas/ColorFilterOption"
                            }
                        },
                        "format": "ColorFilterRepresentation"
                    }
                },
                "xml": {
                    "name": "color_filter_resource"
                }
            },
            "ColorFilterCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "color_filters_resource": {
                        "type": "object",
                        "properties": {
                            "color_filter_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ColorFilterOption"
                                }
                            }
                        },
                        "format": "ColorFilterCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "color_filters_resource"
                }
            },
            "FacetCascadingFieldRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRequest"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "type": "string"
                            },
                            "multi_select": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "FacetConfiguration": {
                "type": "object",
                "properties": {
                    "default_facet_values_displayed": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "default_facets_displayed": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string"
                    },
                    "facet_field_request_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FacetFieldRequest"
                        }
                    },
                    "facet_value_limit": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "facet_value_order": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "locking_session": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "min_asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "min_facetvalues": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "show_color_filter": {
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "FacetConfiguration",
                    "namespace": "http://www.artesia.com/api/xsd"
                }
            },
            "FacetConfigurationRepresentation": {
                "type": "object",
                "properties": {
                    "facet_configuration_resource": {
                        "type": "object",
                        "properties": {
                            "facet_configuration": {
                                "$ref": "#/components/schemas/FacetConfiguration"
                            }
                        },
                        "format": "FacetConfigurationRepresentation"
                    }
                },
                "xml": {
                    "name": "facet_configuration_resource"
                }
            },
            "FacetDateIntervalFieldRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRequest"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "display_by_sequence": {
                                "type": "boolean"
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "interval_profile_id": {
                                "type": "string"
                            },
                            "multi_select": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "FacetDateRangeFieldRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRequest"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "end": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "multi_select": {
                                "type": "boolean"
                            },
                            "range_size": {
                                "type": "string"
                            },
                            "start": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            }
                        }
                    }
                ]
            },
            "FacetFieldRequest": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "field_id": {
                        "type": "string"
                    },
                    "multi_select": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.search.facet.FacetSimpleFieldRequest": "#/components/schemas/FacetSimpleFieldRequest",
                        "com.artesia.search.facet.FacetNumericRangeFieldRequest": "#/components/schemas/FacetNumericRangeFieldRequest",
                        "com.artesia.search.facet.FacetNumericIntervalFieldRequest": "#/components/schemas/FacetNumericIntervalFieldRequest",
                        "com.artesia.search.facet.FacetDateRangeFieldRequest": "#/components/schemas/FacetDateRangeFieldRequest",
                        "com.artesia.search.facet.FacetDateIntervalFieldRequest": "#/components/schemas/FacetDateIntervalFieldRequest",
                        "com.artesia.search.facet.FacetCascadingFieldRequest": "#/components/schemas/FacetCascadingFieldRequest"
                    }
                }
            },
            "FacetNumericIntervalFieldRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRequest"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "display_by_sequence": {
                                "type": "boolean"
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "interval_profile_id": {
                                "type": "string"
                            },
                            "multi_select": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "FacetNumericRangeFieldRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRequest"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "end": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "field_id": {
                                "type": "string"
                            },
                            "multi_select": {
                                "type": "boolean"
                            },
                            "range_size": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "start": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                ]
            },
            "FacetSimpleFieldRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldRequest"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "type": "string"
                            },
                            "multi_select": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "FacetConfigurationCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "facet_configurations_resource": {
                        "type": "object",
                        "properties": {
                            "facet_configuration_list": {
                                "type": "array",
                                "xml": {
                                    "name": "facet_configuration_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/FacetConfiguration"
                                }
                            }
                        },
                        "format": "FacetConfigurationCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "facet_configurations_resource"
                }
            },
            "FeaturesRepresentation": {
                "type": "object",
                "properties": {
                    "features_representation": {
                        "type": "object",
                        "properties": {
                            "features": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "xml": {
                                        "name": "features"
                                    }
                                }
                            }
                        },
                        "format": "FeaturesRepresentation"
                    }
                },
                "xml": {
                    "name": "features_representation"
                }
            },
            "ContainmentError": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "reasons": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "properties": {},
                            "enum": [
                                "CIRCULAR",
                                "NOT_EXIST",
                                "ASSET_NOT_ALLOWED",
                                "CONTAINER_TYPE_NOT_ALLOWED",
                                "SINGLE_PARENT",
                                "WRONG_TREE",
                                "CANT_BE_ROOT",
                                "EXISTING_CHILD",
                                "INACTIVE",
                                "NO_EDIT_PARENTS",
                                "USER_GROUP_CANNOT_CREATE_CONTAINER",
                                "CANT_BE_ROOT_FOLDER"
                            ]
                        }
                    }
                }
            },
            "FolderOperationRepresentation": {
                "type": "object",
                "properties": {
                    "folder_operation_resource": {
                        "type": "object",
                        "properties": {
                            "folder": {
                                "$ref": "#/components/schemas/Container"
                            },
                            "folder_operation_result": {
                                "$ref": "#/components/schemas/ListOperationResult"
                            }
                        },
                        "format": "FolderOperationRepresentation"
                    }
                },
                "xml": {
                    "name": "folder_operation_resource"
                }
            },
            "ListOperationResult": {
                "type": "object",
                "properties": {
                    "failed_children": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContainmentError"
                        }
                    },
                    "valid_children": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidChild"
                        }
                    }
                },
                "xml": {
                    "name": "ListOperationResult"
                }
            },
            "ValidChild": {
                "type": "object",
                "properties": {
                    "container": {
                        "type": "boolean"
                    },
                    "containment_link_id": {
                        "type": "string"
                    },
                    "original_id": {
                        "type": "string"
                    },
                    "uoi_id": {
                        "type": "string"
                    }
                }
            },
            "FolderRepresentation": {
                "type": "object",
                "properties": {
                    "folder_resource": {
                        "type": "object",
                        "properties": {
                            "folder": {
                                "$ref": "#/components/schemas/Container"
                            }
                        },
                        "format": "FolderRepresentation"
                    }
                },
                "xml": {
                    "name": "folder_resource"
                }
            },
            "AssetFilterRequest": {
                "type": "object",
                "properties": {
                    "exclude_deleted_assets": {
                        "type": "boolean"
                    },
                    "include_orphan_folder": {
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "AssetFilterRequest"
                }
            },
            "AssetFilterRequestParam": {
                "type": "object",
                "properties": {
                    "asset_filter_request_param": {
                        "type": "object",
                        "properties": {
                            "asset_filter_request": {
                                "$ref": "#/components/schemas/AssetFilterRequest"
                            }
                        },
                        "format": "AssetFilterRequestParam"
                    }
                },
                "xml": {
                    "name": "asset_filter_request_param"
                }
            },
            "FolderChildrenRepresentation": {
                "type": "object",
                "properties": {
                    "folder_children": {
                        "type": "object",
                        "properties": {
                            "asset_list": {
                                "type": "array",
                                "xml": {
                                    "name": "asset_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/Asset"
                                }
                            }
                        },
                        "format": "FolderChildrenRepresentation"
                    }
                },
                "xml": {
                    "name": "folder_children"
                }
            },
            "ContainerPropertyTemplate": {
                "type": "object",
                "properties": {
                    "content_type_property_template_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PropertyTemplateExcept"
                        }
                    },
                    "default_property_template_id": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "FolderPropertyTemplateRepresentation": {
                "type": "object",
                "properties": {
                    "folder_property_template_resource": {
                        "type": "object",
                        "properties": {
                            "folder_property_template": {
                                "$ref": "#/components/schemas/ContainerPropertyTemplate"
                            }
                        },
                        "format": "FolderPropertyTemplateRepresentation"
                    }
                },
                "xml": {
                    "name": "folder_property_template_resource"
                }
            },
            "PropertyTemplateExcept": {
                "type": "object",
                "properties": {
                    "container_id": {
                        "type": "string"
                    },
                    "content_type": {
                        "type": "string"
                    },
                    "property_template_id": {
                        "type": "string"
                    }
                }
            },
            "FolderSortOptionCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "folder_sort_options_resource": {
                        "type": "object",
                        "properties": {
                            "sort_option_list": {
                                "type": "array",
                                "xml": {
                                    "name": "sort_option_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SortOption"
                                }
                            }
                        },
                        "format": "FolderSortOptionCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "folder_sort_options_resource"
                }
            },
            "EditedFolder": {
                "type": "object",
                "properties": {
                    "edited_folder": {
                        "type": "object",
                        "properties": {
                            "data": {
                                "$ref": "#/components/schemas/FolderEditDataSet"
                            }
                        },
                        "format": "EditedFolder"
                    }
                },
                "xml": {
                    "name": "edited_folder"
                }
            },
            "FolderEditDataSet": {
                "type": "object",
                "properties": {
                    "asset_identifier": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "array",
                        "properties": {},
                        "items": {
                            "$ref": "#/components/schemas/MetadataField"
                        }
                    },
                    "security_policies": {
                        "$ref": "#/components/schemas/SecurityPolicySection"
                    }
                }
            },
            "ContainerType": {
                "type": "object",
                "properties": {
                    "allowable_user_groups": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "assets": {
                        "type": "boolean"
                    },
                    "child_types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "container_children_restricted": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "inactive": {
                        "type": "boolean"
                    },
                    "metadata_model_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parent_types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preview_id": {
                        "type": "string"
                    },
                    "restricted_to_have_single_parent": {
                        "type": "boolean"
                    },
                    "root": {
                        "type": "boolean"
                    },
                    "root_folder": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "MY_FOLDER",
                            "PUBLIC_FOLDER",
                            "BOTH_FOLDERS"
                        ]
                    },
                    "thumb_nail_id": {
                        "type": "string"
                    },
                    "user_groups_restricted": {
                        "type": "boolean"
                    }
                }
            },
            "FolderTypeRepresentation": {
                "type": "object",
                "properties": {
                    "folder_type_resource": {
                        "type": "object",
                        "properties": {
                            "folder_type": {
                                "$ref": "#/components/schemas/ContainerType"
                            }
                        },
                        "format": "FolderTypeRepresentation"
                    }
                },
                "xml": {
                    "name": "folder_type_resource"
                }
            },
            "FolderTypeCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "folder_types_resource": {
                        "type": "object",
                        "properties": {
                            "folder_type_list": {
                                "type": "array",
                                "xml": {
                                    "name": "folder_type_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/ContainerType"
                                }
                            }
                        },
                        "format": "FolderTypeCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "folder_types_resource"
                }
            },
            "HightailSpace": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "SHARE",
                            "APPROVAL"
                        ]
                    },
                    "url": {
                        "type": "string"
                    }
                }
            },
            "HightailSpaceRepresentation": {
                "type": "object",
                "properties": {
                    "hightail_space_resource": {
                        "type": "object",
                        "properties": {
                            "hightail_space": {
                                "$ref": "#/components/schemas/HightailSpace"
                            }
                        },
                        "format": "HightailSpaceRepresentation"
                    }
                },
                "xml": {
                    "name": "hightail_space_resource"
                }
            },
            "UserContact": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "hightail_user_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "otmm_user_id": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "HIGHTAIL",
                            "OTMM",
                            "BOTH"
                        ]
                    }
                }
            },
            "UserContactCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "user_contacts_resource": {
                        "type": "object",
                        "properties": {
                            "user_contact_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserContact"
                                }
                            }
                        },
                        "format": "UserContactCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "user_contacts_resource"
                }
            },
            "SubscriptionInfo": {
                "type": "object",
                "properties": {
                    "approval_enabled": {
                        "type": "boolean"
                    },
                    "approval_passcode_allowed": {
                        "type": "boolean"
                    },
                    "approval_passcode_complexity_enabled": {
                        "type": "boolean"
                    },
                    "approval_passcode_required": {
                        "type": "boolean"
                    },
                    "archive_enabled": {
                        "type": "boolean"
                    },
                    "business_account": {
                        "type": "boolean"
                    },
                    "expiration_date_allowed": {
                        "type": "boolean"
                    },
                    "share_passcode_allowed": {
                        "type": "boolean"
                    },
                    "share_passcode_complexity_enabled": {
                        "type": "boolean"
                    },
                    "share_passcode_required": {
                        "type": "boolean"
                    },
                    "verify_recipients_allowed": {
                        "type": "boolean"
                    }
                }
            },
            "TokenValidation": {
                "type": "object",
                "properties": {
                    "client_id": {
                        "type": "string"
                    },
                    "redirect_url": {
                        "type": "string"
                    },
                    "subscription_info": {
                        "$ref": "#/components/schemas/SubscriptionInfo"
                    },
                    "valid": {
                        "type": "boolean"
                    }
                }
            },
            "TokenValidationRepresentation": {
                "type": "object",
                "properties": {
                    "token_validation_resource": {
                        "type": "object",
                        "properties": {
                            "token_validation": {
                                "$ref": "#/components/schemas/TokenValidation"
                            }
                        },
                        "format": "TokenValidationRepresentation"
                    }
                },
                "xml": {
                    "name": "token_validation_resource"
                }
            },
            "ImportTemplate": {
                "type": "object",
                "properties": {
                    "can_delete": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "can_edit": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "created_by": {
                        "type": "string"
                    },
                    "created_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "string"
                    },
                    "metadat_collection": {
                        "$ref": "#/components/schemas/MetadataCollection"
                    },
                    "metadata_model_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "security_policy_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SecurityPolicy"
                        }
                    },
                    "update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    }
                },
                "xml": {
                    "name": "ImportTemplate",
                    "namespace": "http://www.artesia.com/api/xsd"
                }
            },
            "ImportTemplatesCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "import_templates_resource": {
                        "type": "object",
                        "properties": {
                            "import_template_list": {
                                "type": "array",
                                "xml": {
                                    "name": "import_template_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/ImportTemplate"
                                }
                            }
                        },
                        "format": "ImportTemplatesCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "import_templates_resource"
                }
            },
            "ImportTemplateDataLoadRequest": {
                "type": "object",
                "properties": {
                    "load_metadata": {
                        "type": "boolean"
                    },
                    "load_security_policies": {
                        "type": "boolean"
                    }
                }
            },
            "ImportTemplateDataLoadRequestParam": {
                "type": "object",
                "properties": {
                    "data_load_request_param": {
                        "type": "object",
                        "properties": {
                            "data_load_request": {
                                "$ref": "#/components/schemas/ImportTemplateDataLoadRequest"
                            }
                        },
                        "format": "ImportTemplateDataLoadRequestParam"
                    }
                },
                "xml": {
                    "name": "data_load_request_param"
                }
            },
            "DateIntervalFacetProfile": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/IntervalFacetProfile"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "date_interval_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DateInterval"
                                }
                            },
                            "locking_session": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                ]
            },
            "IntervalFacetProfile": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "locking_session": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.search.intervalprofile.DateIntervalFacetProfile": "#/components/schemas/DateIntervalFacetProfile",
                        "com.artesia.search.intervalprofile.NumericIntervalFacetProfile": "#/components/schemas/NumericIntervalFacetProfile"
                    }
                }
            },
            "IntervalProfileRepresentation": {
                "type": "object",
                "properties": {
                    "interval_profile_resource": {
                        "type": "object",
                        "properties": {
                            "interval_profile": {
                                "$ref": "#/components/schemas/IntervalFacetProfile"
                            }
                        },
                        "format": "IntervalProfileRepresentation"
                    }
                },
                "xml": {
                    "name": "interval_profile_resource"
                }
            },
            "NumericIntervalFacetProfile": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/IntervalFacetProfile"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "locking_session": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "numeric_interval_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NumericInterval"
                                }
                            }
                        }
                    }
                ]
            },
            "IntervalProfileCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "interval_profiles_resource": {
                        "type": "object",
                        "properties": {
                            "interval_profile_list": {
                                "type": "array",
                                "xml": {
                                    "name": "interval_profile_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/IntervalFacetProfile"
                                }
                            }
                        },
                        "format": "IntervalProfileCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "interval_profiles_resource"
                }
            },
            "Argument": {
                "type": "object",
                "properties": {
                    "arg_num": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "argument_values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArgumentValue"
                        }
                    },
                    "data_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NUMERIC",
                            "CHARACTER"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "display_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "HIDDEN",
                            "READONLY",
                            "EDITABLE"
                        ]
                    },
                    "gui_comment": {
                        "type": "string"
                    },
                    "gui_num": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "max_length": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string"
                    },
                    "option_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "TEXT",
                            "TEXTAREA",
                            "SELECT_LIST",
                            "PASSWORD",
                            "EMAIL_ADDRESS",
                            "EMAIL_ADDRESS_LIST",
                            "DATE"
                        ]
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "value": {
                        "type": "object"
                    }
                }
            },
            "ArgumentValue": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "EndpointData": {
                "type": "object",
                "properties": {
                    "audit_url": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "object",
                                            "format": "Object"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,Object>"
                    },
                    "object_url": {
                        "type": "string"
                    }
                }
            },
            "IntegrationServiceMetadataMapping": {
                "type": "object",
                "properties": {
                    "field_id": {
                        "type": "string"
                    },
                    "integration_service_field_id": {
                        "type": "string"
                    }
                }
            },
            "Metadata": {
                "type": "object",
                "properties": {
                    "data_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NUMERIC",
                            "CHARACTER",
                            "DATE"
                        ]
                    },
                    "field_id": {
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object"
                    }
                }
            },
            "Service": {
                "type": "object",
                "properties": {
                    "allowed_content_types": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "properties": {},
                            "enum": [
                                "BITMAP",
                                "TXT",
                                "MSOFFICE",
                                "ACROBAT",
                                "VIDEO",
                                "AUDIO",
                                "THREE_D",
                                "OTHER"
                            ]
                        }
                    },
                    "application": {
                        "type": "string"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Argument"
                        }
                    },
                    "category": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "endpoint_data": {
                        "$ref": "#/components/schemas/EndpointData"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "impl_class": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "metadata_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Metadata"
                        }
                    },
                    "service_name": {
                        "type": "string"
                    },
                    "system_service": {
                        "type": "boolean"
                    }
                }
            },
            "ServiceRepresentation": {
                "type": "object",
                "properties": {
                    "service_resource": {
                        "type": "object",
                        "properties": {
                            "service_wrapper": {
                                "$ref": "#/components/schemas/ServiceWrapper"
                            }
                        },
                        "format": "ServiceRepresentation"
                    }
                },
                "xml": {
                    "name": "service_resource"
                }
            },
            "ServiceWrapper": {
                "type": "object",
                "properties": {
                    "integration_service_metadata_mappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntegrationServiceMetadataMapping"
                        }
                    },
                    "service": {
                        "$ref": "#/components/schemas/Service"
                    }
                }
            },
            "ServiceCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "services_resource": {
                        "type": "object",
                        "properties": {
                            "services": {
                                "type": "array",
                                "xml": {
                                    "name": "services"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/ServiceWrapper"
                                }
                            }
                        },
                        "format": "ServiceCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "services_resource"
                }
            },
            "AssigneeFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "display_values": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "object",
                                                    "format": "Object"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<Object,String>"
                            },
                            "read_only": {
                                "type": "boolean"
                            },
                            "show_resource": {
                                "type": "boolean"
                            },
                            "user_group": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "user_list": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ]
            },
            "CheckBoxFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data_source": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "SQL",
                                    "DOMAIN_ID",
                                    "STATIC",
                                    "JOB_CONTEXT"
                                ]
                            },
                            "data_source_value": {
                                "type": "string"
                            },
                            "input_values": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "object",
                                                    "format": "Object"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<Object,String>"
                            },
                            "read_only": {
                                "type": "boolean"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                ]
            },
            "CollaborationServiceTypeFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data_source": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "SQL",
                                    "DOMAIN_ID",
                                    "STATIC",
                                    "JOB_CONTEXT"
                                ]
                            },
                            "data_source_value": {
                                "type": "string"
                            },
                            "input_values": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "object",
                                                    "format": "Object"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<Object,String>"
                            },
                            "read_only": {
                                "type": "boolean"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                ]
            },
            "ComboFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data_source": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "SQL",
                                    "DOMAIN_ID",
                                    "STATIC",
                                    "JOB_CONTEXT"
                                ]
                            },
                            "data_source_value": {
                                "type": "string"
                            },
                            "input_values": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "object",
                                                    "format": "Object"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<Object,String>"
                            },
                            "read_only": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "DateFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "read_only": {
                                "type": "boolean"
                            },
                            "value": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            }
                        }
                    }
                ]
            },
            "ExternalUsersFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data_source_value": {
                                "type": "string"
                            },
                            "dependent_form_field_id": {
                                "type": "string"
                            },
                            "display_values": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "object",
                                                    "format": "Object"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<Object,String>"
                            },
                            "read_only": {
                                "type": "boolean"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                ]
            },
            "Form": {
                "type": "object",
                "properties": {
                    "form_actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormAction"
                        }
                    },
                    "form_fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormField"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "user_action": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Form"
                }
            },
            "FormAction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "index": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "label": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "FormAction"
                }
            },
            "FormField": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "index": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "label": {
                        "type": "string"
                    },
                    "read_only": {
                        "type": "boolean"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "xml": {
                    "name": "FormField"
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.opentext.job.task.TextFormField": "#/components/schemas/TextFormField",
                        "com.opentext.job.task.CheckBoxFormField": "#/components/schemas/CheckBoxFormField",
                        "com.opentext.job.task.ComboFormField": "#/components/schemas/ComboFormField",
                        "com.opentext.job.task.DateFormField": "#/components/schemas/DateFormField",
                        "com.opentext.job.task.RadioButtonFormField": "#/components/schemas/RadioButtonFormField",
                        "com.opentext.job.task.NumericTextFormField": "#/components/schemas/NumericTextFormField",
                        "com.opentext.job.task.TypeaheadFormField": "#/components/schemas/TypeaheadFormField",
                        "com.opentext.job.task.ListFormField": "#/components/schemas/ListFormField",
                        "com.opentext.job.task.ExternalUsersFormField": "#/components/schemas/ExternalUsersFormField",
                        "com.opentext.job.task.AssigneeFormField": "#/components/schemas/AssigneeFormField",
                        "com.opentext.job.task.CollaborationServiceTypeFormField": "#/components/schemas/CollaborationServiceTypeFormField"
                    }
                }
            },
            "Job": {
                "type": "object",
                "properties": {
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "asset_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "create_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "end_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "form": {
                        "$ref": "#/components/schemas/Form"
                    },
                    "initiator_id": {
                        "type": "string"
                    },
                    "job_class": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "IMPORT",
                            "EXPORT",
                            "PUBLISH",
                            "CUSTOM",
                            "BULK_EDIT",
                            "MOVE_CONTENT",
                            "SMART_COMPOSE",
                            "MEDIA_ANALYSIS",
                            "ATTACH_PREVIEW",
                            "ROLLOVER",
                            "COLLABORATION",
                            "DEEP_ZOOM",
                            "COLOR_ANALYSIS",
                            "SHUTTERSTOCK"
                        ]
                    },
                    "job_context": {
                        "$ref": "#/components/schemas/JobContext"
                    },
                    "job_details": {
                        "$ref": "#/components/schemas/JobDetails"
                    },
                    "job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "job_name": {
                        "type": "string"
                    },
                    "job_type": {
                        "type": "string"
                    },
                    "job_user_name": {
                        "type": "string"
                    },
                    "last_updated_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "start_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "COMPLETED",
                            "FAILED",
                            "INPROGRESS",
                            "COMPLETED_WITH_ERRORS",
                            "ABANDONED"
                        ]
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Step"
                        }
                    },
                    "system_job": {
                        "type": "boolean"
                    },
                    "task_details": {
                        "$ref": "#/components/schemas/TaskDetails"
                    },
                    "thumbnail_asset_id": {
                        "type": "string"
                    },
                    "user_role": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "INITIATOR",
                            "MANAGER",
                            "WATCHER"
                        ]
                    },
                    "version": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "JobContext": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "object",
                                            "format": "Object"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,Object>"
                    }
                },
                "xml": {
                    "name": "JobContext"
                }
            },
            "JobDetails": {
                "type": "object",
                "properties": {
                    "downloaded": {
                        "type": "boolean"
                    },
                    "export_size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "export_zip_name": {
                        "type": "string"
                    },
                    "relative_download_url": {
                        "type": "string"
                    },
                    "transfer_file_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransferSchemeFileItem"
                        }
                    },
                    "transfer_scheme_name": {
                        "type": "string"
                    }
                }
            },
            "JobsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "jobs_resource": {
                        "type": "object",
                        "properties": {
                            "collection_summary": {
                                "$ref": "#/components/schemas/RestApiCollectionSummary"
                            },
                            "jobs": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Job"
                                }
                            }
                        },
                        "format": "JobsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "jobs_resource"
                }
            },
            "ListFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data_source": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "SQL",
                                    "DOMAIN_ID",
                                    "STATIC",
                                    "JOB_CONTEXT"
                                ]
                            },
                            "data_source_value": {
                                "type": "string"
                            },
                            "input_values": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "object",
                                                    "format": "Object"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<Object,String>"
                            },
                            "read_only": {
                                "type": "boolean"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                ]
            },
            "NumericTextFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "read_only": {
                                "type": "boolean"
                            },
                            "value": {
                                "type": "number",
                                "format": "double"
                            }
                        }
                    }
                ]
            },
            "RadioButtonFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data_source": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "SQL",
                                    "DOMAIN_ID",
                                    "STATIC",
                                    "JOB_CONTEXT"
                                ]
                            },
                            "data_source_value": {
                                "type": "string"
                            },
                            "input_values": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "object",
                                                    "format": "Object"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<Object,String>"
                            },
                            "read_only": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "Step": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "end_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "label": {
                        "type": "string"
                    },
                    "start_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string"
                    },
                    "step_name": {
                        "type": "string"
                    },
                    "step_properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepProperty"
                        }
                    },
                    "task_assigned_users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskAssignedUser"
                        }
                    },
                    "task_details": {
                        "$ref": "#/components/schemas/TaskDetails"
                    },
                    "user_step": {
                        "type": "boolean"
                    }
                }
            },
            "StepProperty": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    },
                    "value": {
                        "type": "object"
                    }
                },
                "xml": {
                    "name": "StepProperty"
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.opentext.job.UserStepProperty": "#/components/schemas/UserStepProperty",
                        "com.opentext.job.UserGroupStepProperty": "#/components/schemas/UserGroupStepProperty"
                    }
                }
            },
            "TaskAssignedUser": {
                "type": "object",
                "properties": {
                    "end_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "start_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "COMPLETED",
                            "INPROGRESS",
                            "MEMBERS_COMPLETED",
                            "ABANDONED"
                        ]
                    },
                    "task_data": {
                        "$ref": "#/components/schemas/TaskData"
                    },
                    "task_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_fullname": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    }
                }
            },
            "TaskData": {
                "type": "object",
                "properties": {
                    "asset_actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "asset_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "asset_toolbar_actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auth_task": {
                        "type": "boolean"
                    },
                    "collab_service_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "collab_service_name": {
                        "type": "string"
                    },
                    "review_task": {
                        "type": "boolean"
                    },
                    "review_type": {
                        "type": "string"
                    },
                    "task_form": {
                        "$ref": "#/components/schemas/TaskForm"
                    },
                    "workspace_id": {
                        "type": "string"
                    },
                    "workspace_url": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "TaskData"
                }
            },
            "TaskDetails": {
                "type": "object",
                "properties": {
                    "due_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "HIGH",
                            "MEDIUM",
                            "LOW"
                        ]
                    },
                    "task_users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskUser"
                        }
                    },
                    "user_group_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_group_name": {
                        "type": "string"
                    },
                    "user_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "TaskForm": {
                "type": "object",
                "properties": {
                    "form_actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormAction"
                        }
                    },
                    "form_fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormField"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "user_action": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "TaskForm"
                }
            },
            "TaskUser": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "COMPLETED",
                            "INPROGRESS",
                            "MEMBERS_COMPLETED",
                            "ABANDONED"
                        ]
                    },
                    "user_fullname": {
                        "type": "string"
                    }
                }
            },
            "TextFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data_source": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "SQL",
                                    "DOMAIN_ID",
                                    "STATIC",
                                    "JOB_CONTEXT"
                                ]
                            },
                            "data_source_value": {
                                "type": "string"
                            },
                            "read_only": {
                                "type": "boolean"
                            },
                            "size": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "text_mode": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "SINGLE_LINE",
                                    "MULTI_LINE"
                                ]
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "TransferSchemeFileItem": {
                "required": [
                    "schemeFileId",
                    "schemeFileName"
                ],
                "type": "object",
                "properties": {
                    "local_file": {
                        "type": "string",
                        "format": "file"
                    },
                    "scheme_directory": {
                        "type": "string"
                    },
                    "scheme_file_id": {
                        "type": "string"
                    },
                    "scheme_file_name": {
                        "type": "string"
                    },
                    "transfer_direction": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "UPLOAD",
                            "DOWNLOAD"
                        ]
                    },
                    "transfer_status": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NOT_STARTED",
                            "IN_PROGRESS",
                            "FAILED",
                            "COMPLETED"
                        ]
                    }
                }
            },
            "TypeaheadFormField": {
                "type": "object",
                "xml": {
                    "name": "FormField"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormField"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data_source": {
                                "type": "string",
                                "properties": {},
                                "enum": [
                                    "SQL",
                                    "DOMAIN_ID",
                                    "STATIC",
                                    "JOB_CONTEXT"
                                ]
                            },
                            "data_source_value": {
                                "type": "string"
                            },
                            "display_values": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "object",
                                                    "format": "Object"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<Object,String>"
                            },
                            "read_only": {
                                "type": "boolean"
                            },
                            "show_resource": {
                                "type": "boolean"
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                ]
            },
            "UserGroupStepProperty": {
                "type": "object",
                "xml": {
                    "name": "StepProperty"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/StepProperty"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "user_group_name": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "UserStepProperty": {
                "type": "object",
                "xml": {
                    "name": "StepProperty"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/StepProperty"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "display_values": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<String,String>"
                            }
                        }
                    }
                ]
            },
            "JobInfo": {
                "type": "object",
                "properties": {
                    "form": {
                        "$ref": "#/components/schemas/Form"
                    },
                    "job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "job_name": {
                        "type": "string"
                    },
                    "job_type": {
                        "type": "string"
                    }
                }
            },
            "Task": {
                "type": "object",
                "properties": {
                    "assigned_user_group": {
                        "type": "string"
                    },
                    "assigned_users": {
                        "type": "string"
                    },
                    "create_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "due_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "end_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "initiator_fullname": {
                        "type": "string"
                    },
                    "initiator_user_id": {
                        "type": "string"
                    },
                    "job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "job_info": {
                        "$ref": "#/components/schemas/JobInfo"
                    },
                    "job_name": {
                        "type": "string"
                    },
                    "job_steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Step"
                        }
                    },
                    "job_type": {
                        "type": "string"
                    },
                    "job_version": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "members_accept_level": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "ALL",
                            "ANY",
                            "MAJORITY"
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "next_due": {
                        "type": "boolean"
                    },
                    "past_due": {
                        "type": "boolean"
                    },
                    "priority": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "HIGH",
                            "MEDIUM",
                            "LOW"
                        ]
                    },
                    "start_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "COMPLETED",
                            "INPROGRESS",
                            "MEMBERS_COMPLETED",
                            "ABANDONED"
                        ]
                    },
                    "task_data": {
                        "$ref": "#/components/schemas/TaskData"
                    },
                    "thumbnail_asset_id": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Task"
                }
            },
            "TasksCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "tasks_resource": {
                        "type": "object",
                        "properties": {
                            "collection_summary": {
                                "$ref": "#/components/schemas/RestApiCollectionSummary"
                            },
                            "tasks": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        },
                        "format": "TasksCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "tasks_resource"
                }
            },
            "JobUser": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    }
                }
            },
            "JobUserCollection": {
                "type": "object",
                "properties": {
                    "managers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JobUser"
                        }
                    },
                    "owner": {
                        "$ref": "#/components/schemas/JobUser"
                    },
                    "participants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JobUser"
                        }
                    },
                    "watchers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JobUser"
                        }
                    }
                }
            },
            "JobUserCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "job_users_resource": {
                        "type": "object",
                        "properties": {
                            "job_users": {
                                "$ref": "#/components/schemas/JobUserCollection"
                            }
                        },
                        "format": "JobUserCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "job_users_resource"
                }
            },
            "JobContextMap": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object"
                    }
                },
                "xml": {
                    "name": "JobContextMap"
                }
            },
            "JobRequest": {
                "required": [
                    "jobType"
                ],
                "type": "object",
                "properties": {
                    "asset_ids": {
                        "type": "array",
                        "xml": {
                            "name": "asset_ids"
                        },
                        "items": {
                            "type": "string",
                            "xml": {
                                "name": "asset_ids"
                            }
                        }
                    },
                    "callback_url": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "due_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time",
                        "xml": {
                            "name": "due_date"
                        }
                    },
                    "form": {
                        "$ref": "#/components/schemas/Form"
                    },
                    "job_class": {
                        "type": "string",
                        "xml": {
                            "name": "job_class"
                        }
                    },
                    "job_context_map": {
                        "type": "array",
                        "xml": {
                            "name": "job_context_map"
                        },
                        "items": {
                            "$ref": "#/components/schemas/JobContextMap"
                        }
                    },
                    "job_name": {
                        "type": "string",
                        "xml": {
                            "name": "job_name"
                        }
                    },
                    "job_type": {
                        "type": "string",
                        "xml": {
                            "name": "job_type"
                        }
                    },
                    "selection_context": {
                        "$ref": "#/components/schemas/SelectionContext"
                    }
                }
            },
            "JobRequestParam": {
                "required": [
                    "jobRequest"
                ],
                "type": "object",
                "properties": {
                    "job_request_param": {
                        "type": "object",
                        "properties": {
                            "job_request": {
                                "$ref": "#/components/schemas/JobRequest"
                            }
                        },
                        "format": "JobRequestParam"
                    }
                },
                "xml": {
                    "name": "job_request_param"
                }
            },
            "TransferDetailsParam": {
                "required": [
                    "transferFileItems",
                    "transferScheme"
                ],
                "type": "object",
                "properties": {
                    "transfer_details_param": {
                        "type": "object",
                        "properties": {
                            "transfer_file_items": {
                                "type": "array",
                                "xml": {
                                    "name": "transfer_file_items"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/TransferSchemeFileItem"
                                }
                            },
                            "transfer_scheme": {
                                "type": "string",
                                "xml": {
                                    "name": "transfer_scheme"
                                }
                            }
                        },
                        "format": "TransferDetailsParam"
                    }
                },
                "xml": {
                    "name": "transfer_details_param"
                }
            },
            "ExportJobHandle": {
                "type": "object",
                "properties": {
                    "export_job_handle": {
                        "type": "object",
                        "properties": {
                            "export_response": {
                                "$ref": "#/components/schemas/StartExportProcessResponse"
                            }
                        },
                        "format": "ExportJobHandle"
                    }
                },
                "xml": {
                    "name": "export_job_handle"
                }
            },
            "StartExportProcessResponse": {
                "type": "object",
                "properties": {
                    "exportable_count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "unexportable_count": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "xml": {
                    "name": "StartExportProcessResponse"
                }
            },
            "AssetUsageDetails": {
                "type": "object",
                "properties": {
                    "client_application": {
                        "$ref": "#/components/schemas/ClientApplication"
                    },
                    "usage_description": {
                        "type": "string"
                    },
                    "usage_type": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "AssetUsageDetails"
                }
            },
            "ClientApplication": {
                "type": "object",
                "properties": {
                    "application": {
                        "type": "string"
                    },
                    "client_host": {
                        "type": "string"
                    },
                    "client_ip_address": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,String>"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ClientApplication"
                }
            },
            "ContentDataRequest": {
                "type": "object",
                "properties": {
                    "attested_context": {
                        "$ref": "#/components/schemas/AttestedContext"
                    },
                    "content_manager_id": {
                        "type": "string"
                    },
                    "load_storage_attributes": {
                        "type": "boolean"
                    },
                    "locality": {
                        "type": "string"
                    },
                    "retrieval_method": {
                        "type": "string"
                    },
                    "storage_attributes_map": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,String>"
                    },
                    "storage_method": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ContentDataRequest"
                }
            },
            "DeliveryTemplate": {
                "required": [
                    "defaultFileHandlingTemplate",
                    "deliveryTemplateException"
                ],
                "type": "object",
                "properties": {
                    "attribute_values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransformerInstanceValue"
                        }
                    },
                    "default_file_handling_template": {
                        "type": "string"
                    },
                    "delivery_template_exception": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeliveryTemplateException"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadable": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "restriction": {
                        "type": "string"
                    },
                    "schedulable": {
                        "type": "boolean"
                    },
                    "transformer_id": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "DeliveryTemplate"
                }
            },
            "DeliveryTemplateException": {
                "required": [
                    "groupId"
                ],
                "type": "object",
                "properties": {
                    "group_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "xml": {
                    "name": "DeliveryTemplateException"
                }
            },
            "ExportContentRequest": {
                "type": "object",
                "properties": {
                    "default_content_data_request": {
                        "$ref": "#/components/schemas/ContentDataRequest"
                    },
                    "export_master_content": {
                        "type": "boolean"
                    },
                    "export_preview_content": {
                        "type": "boolean"
                    },
                    "export_supporting_content": {
                        "type": "boolean"
                    },
                    "export_thumbnail_content": {
                        "type": "boolean"
                    }
                }
            },
            "ExportLinkRequest": {
                "type": "object",
                "properties": {
                    "link_types_to_traverse": {
                        "type": "array",
                        "properties": {},
                        "items": {
                            "type": "string"
                        }
                    },
                    "number_of_link_iterations": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ExportRequest": {
                "type": "object",
                "properties": {
                    "callback_url": {
                        "type": "string"
                    },
                    "content_request": {
                        "$ref": "#/components/schemas/ExportContentRequest"
                    },
                    "create_collection_folders": {
                        "type": "boolean"
                    },
                    "delivery_template": {
                        "$ref": "#/components/schemas/DeliveryTemplate"
                    },
                    "destination_named_content_area": {
                        "type": "string"
                    },
                    "destination_relative_dir": {
                        "type": "string"
                    },
                    "error_handling_action": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "DEFAULT_HANDLING",
                            "ALL_OR_NOTHING",
                            "STOP_AND_KEEP_ALREADY_PROCESSED",
                            "CONTINUE_AND_PROCESS_REMAINING"
                        ]
                    },
                    "export_job_transformers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransformerArguments"
                        }
                    },
                    "export_result_data_filter": {
                        "$ref": "#/components/schemas/ExportResultDataFilter"
                    },
                    "job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "job_instance_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "job_name": {
                        "type": "string"
                    },
                    "job_type": {
                        "type": "string"
                    },
                    "link_request": {
                        "$ref": "#/components/schemas/ExportLinkRequest"
                    },
                    "preserve_folder_hierarchy": {
                        "type": "boolean"
                    },
                    "process_name": {
                        "type": "string"
                    },
                    "remove_working_directory": {
                        "type": "boolean"
                    },
                    "replace_export_dir": {
                        "type": "boolean"
                    },
                    "selected_root_folder_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "usage_details": {
                        "$ref": "#/components/schemas/AssetUsageDetails"
                    },
                    "write_csv": {
                        "type": "boolean"
                    },
                    "write_xls": {
                        "type": "boolean"
                    },
                    "write_xml": {
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "ExportRequest"
                }
            },
            "ExportRequestParam": {
                "type": "object",
                "properties": {
                    "export_request_param": {
                        "type": "object",
                        "properties": {
                            "export_request": {
                                "$ref": "#/components/schemas/ExportRequest"
                            }
                        },
                        "format": "ExportRequestParam"
                    }
                },
                "xml": {
                    "name": "export_request_param"
                }
            },
            "ExportResultDataFilter": {
                "type": "object",
                "properties": {
                    "suppress_asset_descriptor_data": {
                        "type": "boolean"
                    },
                    "suppress_link_collection_data": {
                        "type": "boolean"
                    },
                    "suppress_metadata": {
                        "type": "boolean"
                    },
                    "suppress_rendition_content_info": {
                        "type": "boolean"
                    },
                    "suppress_security_policy_info": {
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "ExportResultDataRequest"
                }
            },
            "TransformerArguments": {
                "type": "object",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "transformer_id": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "TransformerArguments"
                }
            },
            "TransformerInstanceValue": {
                "type": "object",
                "properties": {
                    "argument_number": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "TransformerInstanceValue"
                }
            },
            "ContentTypeTransformerMap": {
                "type": "object",
                "properties": {
                    "content_type": {
                        "type": "string"
                    },
                    "exclusion_asset_id_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "include_original": {
                        "type": "boolean"
                    },
                    "include_preview": {
                        "type": "boolean"
                    },
                    "include_sub_files": {
                        "type": "boolean"
                    },
                    "include_thumbnail": {
                        "type": "boolean"
                    },
                    "trans_arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransformerArguments"
                        }
                    }
                }
            },
            "ContentTypeTransformerMapParam": {
                "type": "object",
                "properties": {
                    "content_type_transformer_map_list": {
                        "type": "object",
                        "properties": {
                            "content_type_transformer_map": {
                                "type": "array",
                                "xml": {
                                    "name": "content_type_transformer_map"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/ContentTypeTransformerMap"
                                }
                            }
                        },
                        "format": "ContentTypeTransformerMapParam"
                    }
                },
                "xml": {
                    "name": "content_type_transformer_map_list"
                }
            },
            "AssetIdTransformerMap": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "type": "string"
                    },
                    "include_original": {
                        "type": "boolean"
                    },
                    "include_preview": {
                        "type": "boolean"
                    },
                    "include_sub_files": {
                        "type": "boolean"
                    },
                    "include_thumbnail": {
                        "type": "boolean"
                    },
                    "trans_arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransformerArguments"
                        }
                    }
                }
            },
            "AssetIdTransformerMapParam": {
                "type": "object",
                "properties": {
                    "asset_id_transformer_map_list": {
                        "type": "object",
                        "properties": {
                            "asset_id_transformer_map": {
                                "type": "array",
                                "xml": {
                                    "name": "asset_id_transformer_map"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/AssetIdTransformerMap"
                                }
                            }
                        },
                        "format": "AssetIdTransformerMapParam"
                    }
                },
                "xml": {
                    "name": "asset_id_transformer_map_list"
                }
            },
            "PublishJobHandle": {
                "type": "object",
                "properties": {
                    "publish_job_handle": {
                        "type": "object",
                        "properties": {
                            "publish_response": {
                                "$ref": "#/components/schemas/PublishJobResponse"
                            }
                        },
                        "format": "PublishJobHandle"
                    }
                },
                "xml": {
                    "name": "publish_job_handle"
                }
            },
            "PublishJobResponse": {
                "type": "object",
                "properties": {
                    "job_id": {
                        "type": "integer",
                        "format": "int64",
                        "xml": {
                            "name": "job_id"
                        }
                    },
                    "publishable_count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "publishable_count"
                        }
                    },
                    "unpublishable_count": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "unpublishable_count"
                        }
                    }
                },
                "xml": {
                    "name": "PublishJobResponse"
                }
            },
            "PublishRequestParam": {
                "type": "object",
                "properties": {
                    "publish_request_param": {
                        "type": "object",
                        "properties": {
                            "publish_request": {
                                "$ref": "#/components/schemas/ExportRequest"
                            }
                        },
                        "format": "PublishRequestParam"
                    }
                },
                "xml": {
                    "name": "publish_request_param"
                }
            },
            "ActivityForm": {
                "type": "object",
                "properties": {
                    "create_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "created_by": {
                        "type": "string"
                    },
                    "form_actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormAction"
                        }
                    },
                    "form_fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormField"
                        }
                    },
                    "form_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "USER",
                            "PRE_LAUNCH",
                            "REVIEW"
                        ]
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "last_updated": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "updated_by": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "ActivityForm"
                }
            },
            "ActivityFormRepresentation": {
                "type": "object",
                "properties": {
                    "activity_form_resource": {
                        "type": "object",
                        "properties": {
                            "activity_form": {
                                "$ref": "#/components/schemas/ActivityForm"
                            }
                        },
                        "format": "ActivityFormRepresentation"
                    }
                },
                "xml": {
                    "name": "activity_form_resource"
                }
            },
            "JobRepresentation": {
                "type": "object",
                "properties": {
                    "job_resource": {
                        "type": "object",
                        "properties": {
                            "job": {
                                "$ref": "#/components/schemas/Job"
                            }
                        },
                        "format": "JobRepresentation"
                    }
                },
                "xml": {
                    "name": "job_resource"
                }
            },
            "JobDefinition": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "job_type": {
                        "type": "string"
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Step"
                        }
                    },
                    "systemjob": {
                        "type": "boolean"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "JobDefinitionsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "job_definitions_resource": {
                        "type": "object",
                        "properties": {
                            "job_definitions": {
                                "type": "array",
                                "xml": {
                                    "name": "job_definitions"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/JobDefinition"
                                }
                            }
                        },
                        "format": "JobDefinitionsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "job_definitions_resource"
                }
            },
            "ConfigOption": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "option"
                }
            },
            "ConfigurationOptionsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "configuration_options_resource": {
                        "type": "object",
                        "properties": {
                            "option_list": {
                                "type": "array",
                                "xml": {
                                    "name": "option_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/ConfigOption"
                                }
                            }
                        },
                        "format": "ConfigurationOptionsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "configuration_options_resource"
                }
            },
            "JobDataParam": {
                "required": [
                    "job"
                ],
                "type": "object",
                "properties": {
                    "job_data_param": {
                        "type": "object",
                        "properties": {
                            "job": {
                                "$ref": "#/components/schemas/Job"
                            }
                        },
                        "format": "JobDataParam"
                    }
                },
                "xml": {
                    "name": "job_data_param"
                }
            },
            "LinkType": {
                "type": "object",
                "properties": {
                    "copy_links_on_checkin": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "editable": {
                        "type": "boolean"
                    },
                    "follow_latest_version_of_destination": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "reciprocal_link_type_id": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                }
            },
            "LinkTypeCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "link_types_resource": {
                        "type": "object",
                        "properties": {
                            "link_type_list": {
                                "type": "array",
                                "xml": {
                                    "name": "link_type_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/LinkType"
                                }
                            }
                        },
                        "format": "LinkTypeCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "link_types_resource"
                }
            },
            "LookupDomain": {
                "type": "object",
                "properties": {
                    "cacheable": {
                        "type": "boolean"
                    },
                    "datatype": {
                        "type": "string"
                    },
                    "domain_id": {
                        "type": "string"
                    },
                    "domain_values": {
                        "type": "array",
                        "properties": {},
                        "items": {
                            "$ref": "#/components/schemas/DomainValue"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "LookupDomainsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "lookup_domains_resource": {
                        "type": "object",
                        "properties": {
                            "lookup_domains": {
                                "type": "array",
                                "properties": {},
                                "xml": {
                                    "name": "lookup_domains"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/LookupDomain"
                                }
                            }
                        },
                        "format": "LookupDomainsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "lookup_domains_resource"
                }
            },
            "LookupDomainRepresentation": {
                "type": "object",
                "properties": {
                    "lookup_domain_resource": {
                        "type": "object",
                        "properties": {
                            "lookup_domain": {
                                "$ref": "#/components/schemas/LookupDomain"
                            }
                        },
                        "format": "LookupDomainRepresentation"
                    }
                },
                "xml": {
                    "name": "lookup_domain_resource"
                }
            },
            "MetadataCategory": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "legacy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "metadata_element_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MetadataElement"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "MetadataFieldGroupRepresentation": {
                "type": "object",
                "properties": {
                    "metadata_field_group_resource": {
                        "type": "object",
                        "properties": {
                            "metadata_field_group": {
                                "$ref": "#/components/schemas/MetadataCategory"
                            }
                        },
                        "format": "MetadataFieldGroupRepresentation"
                    }
                },
                "xml": {
                    "name": "metadata_field_group_resource"
                }
            },
            "MetadataFieldGroupsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "metadata_field_groups_resource": {
                        "type": "object",
                        "properties": {
                            "metadata_field_group_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataCategory"
                                }
                            }
                        },
                        "format": "MetadataFieldGroupsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "metadata_field_groups_resource"
                }
            },
            "MetadataFieldRepresentation": {
                "type": "object",
                "properties": {
                    "metadata_field_resource": {
                        "type": "object",
                        "properties": {
                            "metadata_field": {
                                "$ref": "#/components/schemas/MetadataField"
                            }
                        },
                        "format": "MetadataFieldRepresentation"
                    }
                },
                "xml": {
                    "name": "metadata_field_resource"
                }
            },
            "MetadataFieldsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "metadata_fields_resource": {
                        "type": "object",
                        "properties": {
                            "metadata_field_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataField"
                                }
                            }
                        },
                        "format": "MetadataFieldsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "metadata_fields_resource"
                }
            },
            "MetadataLocale": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "default": {
                        "type": "boolean"
                    },
                    "in_use": {
                        "type": "boolean"
                    },
                    "language": {
                        "type": "string"
                    }
                }
            },
            "MetadataLocalesCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "metadata_locales_resource": {
                        "type": "object",
                        "properties": {
                            "metadata_locale_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataLocale"
                                }
                            }
                        },
                        "format": "MetadataLocalesCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "metadata_locales_resource"
                }
            },
            "MetadataModel": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "has_multilingual_fields": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "legacy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "metadata_element_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MetadataElement"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "object_type": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "MetadataModel"
                }
            },
            "MetadataModelRepresentation": {
                "type": "object",
                "properties": {
                    "metadata_model_resource": {
                        "type": "object",
                        "properties": {
                            "metadata_model": {
                                "$ref": "#/components/schemas/MetadataModel"
                            }
                        },
                        "format": "MetadataModelRepresentation"
                    }
                },
                "xml": {
                    "name": "metadata_model_resource"
                }
            },
            "MetadataModelsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "metadata_models_resource": {
                        "type": "object",
                        "properties": {
                            "metadata_model_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataModel"
                                }
                            }
                        },
                        "format": "MetadataModelsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "metadata_models_resource"
                }
            },
            "ContentInfoRepresentation": {
                "type": "object",
                "properties": {
                    "content_info_resource": {
                        "type": "object",
                        "properties": {
                            "content_info": {
                                "$ref": "#/components/schemas/ContentInfo"
                            }
                        },
                        "format": "ContentInfoRepresentation"
                    }
                },
                "xml": {
                    "name": "content_info_resource"
                }
            },
            "SavedSearchRepresentation": {
                "type": "object",
                "properties": {
                    "saved_search_resource": {
                        "type": "object",
                        "properties": {
                            "saved_search": {
                                "$ref": "#/components/schemas/Search"
                            }
                        },
                        "format": "SavedSearchRepresentation"
                    }
                },
                "xml": {
                    "name": "saved_search_resource"
                }
            },
            "Search": {
                "type": "object",
                "properties": {
                    "apply_search_filter_user_prefs": {
                        "type": "boolean"
                    },
                    "candidate_field_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchElementReference"
                        }
                    },
                    "collection_filter": {
                        "$ref": "#/components/schemas/SearchCollectionFilter"
                    },
                    "collection_list_filter": {
                        "$ref": "#/components/schemas/SearchCollectionListFilter"
                    },
                    "color_filter": {
                        "$ref": "#/components/schemas/SearchColorFilter"
                    },
                    "condition_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchCondition"
                        }
                    },
                    "container_filter": {
                        "$ref": "#/components/schemas/SearchContainerFilter"
                    },
                    "context_notes": {
                        "type": "string"
                    },
                    "create_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "create_user_id": {
                        "type": "string"
                    },
                    "default_operator": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "facet_config_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "facet_configuration": {
                        "$ref": "#/components/schemas/FacetConfiguration"
                    },
                    "facet_field_restriction_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FacetFieldRestriction"
                        }
                    },
                    "favorite": {
                        "type": "boolean"
                    },
                    "fixed_condition_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchCondition"
                        }
                    },
                    "fulltext_condition_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchFulltextCondition"
                        }
                    },
                    "group_by": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "CONTENT_TYPE",
                            "METADATA_MODEL",
                            "DATA_TYPE"
                        ]
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "is_internal": {
                        "type": "boolean"
                    },
                    "is_public": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "keyword_search_allowed": {
                        "type": "boolean"
                    },
                    "legacy_model_id": {
                        "type": "string"
                    },
                    "multilingual_language_code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "plugin_id": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "sort_field_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchSortField"
                        }
                    },
                    "thumbnail_asset_id": {
                        "type": "string"
                    },
                    "thumbnail_info": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "type_counts_requested": {
                        "type": "boolean"
                    },
                    "update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "update_user_id": {
                        "type": "string"
                    },
                    "user_group_ids": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "valid_search_context_list": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "properties": {},
                            "enum": [
                                "FOLDER"
                            ]
                        }
                    }
                },
                "xml": {
                    "name": "Search"
                }
            },
            "SearchCollectionFilter": {
                "type": "object",
                "properties": {
                    "collection_id": {
                        "type": "string"
                    }
                }
            },
            "SearchCollectionListFilter": {
                "type": "object",
                "properties": {
                    "collection_id_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SearchColorFilter": {
                "type": "object",
                "properties": {
                    "color_id": {
                        "type": "string"
                    }
                }
            },
            "SearchContainerFilter": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "restriction_type": {
                        "type": "string"
                    }
                }
            },
            "SearchElementReference": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.search.SearchFieldReference": "#/components/schemas/SearchFieldReference",
                        "com.artesia.search.SearchTableReference": "#/components/schemas/SearchTableReference"
                    }
                }
            },
            "SearchFieldReference": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SearchElementReference"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "field_id": {
                                "type": "string"
                            },
                            "is_default_selected": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "SearchTableFieldReference": {
                "type": "object",
                "properties": {
                    "field_id": {
                        "type": "string"
                    },
                    "is_default_selected": {
                        "type": "boolean"
                    },
                    "table_id": {
                        "type": "string"
                    }
                }
            },
            "SearchTableReference": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SearchElementReference"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "table_field_reference_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SearchTableFieldReference"
                                }
                            },
                            "table_id": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "SearchConditionListParam": {
                "type": "object",
                "properties": {
                    "search_condition_list": {
                        "type": "object",
                        "properties": {
                            "search_condition": {
                                "type": "array",
                                "xml": {
                                    "name": "search_condition"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SearchCondition"
                                }
                            }
                        },
                        "format": "SearchConditionListParam"
                    }
                },
                "xml": {
                    "name": "search_condition_list"
                }
            },
            "FacetRestrictionParam": {
                "type": "object",
                "properties": {
                    "facet_restriction_list": {
                        "type": "object",
                        "properties": {
                            "facet_field_restriction": {
                                "type": "array",
                                "xml": {
                                    "name": "facet_field_restriction"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/FacetFieldRestriction"
                                }
                            }
                        },
                        "format": "FacetRestrictionParam"
                    }
                },
                "xml": {
                    "name": "facet_restriction_list"
                }
            },
            "CandidateFieldListParam": {
                "type": "object",
                "properties": {
                    "candidate_field_list_param": {
                        "type": "object",
                        "properties": {
                            "candidate_field_list": {
                                "type": "array",
                                "xml": {
                                    "name": "candidate_field_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SearchElementReference"
                                }
                            }
                        },
                        "format": "CandidateFieldListParam"
                    }
                },
                "xml": {
                    "name": "candidate_field_list_param"
                }
            },
            "SavedSearchCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "saved_searches_resource": {
                        "type": "object",
                        "properties": {
                            "saved_search_list": {
                                "type": "array",
                                "xml": {
                                    "name": "saved_search_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "format": "SavedSearchCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "saved_searches_resource"
                }
            },
            "SchedulerHandle": {
                "type": "object",
                "properties": {
                    "schedule_name": {
                        "type": "string",
                        "xml": {
                            "name": "schedule_name"
                        }
                    }
                },
                "xml": {
                    "name": "schedule_handle"
                }
            },
            "ScheduleRecurrence": {
                "type": "object",
                "properties": {
                    "end_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "recurrence_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "DAILY",
                            "WEEKLY",
                            "MONTHLY",
                            "CRON",
                            "RUN_ONCE"
                        ]
                    },
                    "schedule_string": {
                        "type": "string"
                    },
                    "start_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    }
                }
            },
            "ScheduleRequestParam": {
                "type": "object",
                "properties": {
                    "schedule_request_param": {
                        "type": "object",
                        "properties": {
                            "deploy_modified_assets_only": {
                                "type": "boolean",
                                "xml": {
                                    "name": "deploy_modified_assets_only"
                                }
                            },
                            "scheduler_job": {
                                "$ref": "#/components/schemas/SchedulerJob"
                            }
                        },
                        "format": "ScheduleRequestParam"
                    }
                },
                "xml": {
                    "name": "schedule_request_param"
                }
            },
            "SchedulerJob": {
                "type": "object",
                "properties": {
                    "disabled": {
                        "type": "boolean"
                    },
                    "job_recurrence": {
                        "$ref": "#/components/schemas/ScheduleRecurrence"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "SchedulerJob",
                    "namespace": "http://www.artesia.com/api/xsd"
                }
            },
            "SearchSortOptionCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "asset_sort_options_resource": {
                        "type": "object",
                        "properties": {
                            "sort_option_list": {
                                "type": "array",
                                "xml": {
                                    "name": "sort_option_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SortOption"
                                }
                            }
                        },
                        "format": "SearchSortOptionCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "asset_sort_options_resource"
                }
            },
            "FacetCascadingFieldResponse": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_field_request": {
                                "$ref": "#/components/schemas/FacetCascadingFieldRequest"
                            },
                            "facet_value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FacetCascadingValue"
                                }
                            },
                            "field_name": {
                                "type": "string"
                            },
                            "parent_path": {
                                "$ref": "#/components/schemas/HierarchicalFacetValuePath"
                            }
                        }
                    }
                ]
            },
            "FacetCascadingValue": {
                "type": "object",
                "properties": {
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "leaf_node": {
                        "type": "boolean"
                    },
                    "path": {
                        "$ref": "#/components/schemas/HierarchicalFacetValuePath"
                    }
                }
            },
            "FacetDateIntervalFieldResponse": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_field_request": {
                                "$ref": "#/components/schemas/FacetDateIntervalFieldRequest"
                            },
                            "facet_value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FacetDateIntervalValue"
                                }
                            },
                            "field_name": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "FacetDateIntervalValue": {
                "type": "object",
                "properties": {
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "date_interval": {
                        "$ref": "#/components/schemas/DateInterval"
                    },
                    "token_expansion_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "FacetDateRangeFieldResponse": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_field_request": {
                                "$ref": "#/components/schemas/FacetDateRangeFieldRequest"
                            },
                            "facet_value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FacetDateRangeValue"
                                }
                            },
                            "field_name": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "FacetDateRangeValue": {
                "type": "object",
                "properties": {
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "date_range": {
                        "$ref": "#/components/schemas/DateRange"
                    }
                }
            },
            "FacetFieldResponse": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "facet_field_request": {
                        "$ref": "#/components/schemas/FacetFieldRequest"
                    },
                    "facet_value_list": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "field_name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Discriminator for sub-types. Set to the fully qualified name of the sub-type."
                    }
                },
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "com.artesia.search.facet.FacetSimpleFieldResponse": "#/components/schemas/FacetSimpleFieldResponse",
                        "com.artesia.search.facet.FacetNumericRangeFieldResponse": "#/components/schemas/FacetNumericRangeFieldResponse",
                        "com.artesia.search.facet.FacetNumericIntervalFieldResponse": "#/components/schemas/FacetNumericIntervalFieldResponse",
                        "com.artesia.search.facet.FacetDateRangeFieldResponse": "#/components/schemas/FacetDateRangeFieldResponse",
                        "com.artesia.search.facet.FacetDateIntervalFieldResponse": "#/components/schemas/FacetDateIntervalFieldResponse",
                        "com.artesia.search.facet.FacetCascadingFieldResponse": "#/components/schemas/FacetCascadingFieldResponse"
                    }
                }
            },
            "FacetNumericIntervalFieldResponse": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_field_request": {
                                "$ref": "#/components/schemas/FacetNumericIntervalFieldRequest"
                            },
                            "facet_value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FacetNumericIntervalValue"
                                }
                            },
                            "field_name": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "FacetNumericIntervalValue": {
                "type": "object",
                "properties": {
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "numeric_interval": {
                        "$ref": "#/components/schemas/NumericInterval"
                    }
                }
            },
            "FacetNumericRangeFieldResponse": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_field_request": {
                                "$ref": "#/components/schemas/FacetNumericRangeFieldRequest"
                            },
                            "facet_value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FacetNumericRangeValue"
                                }
                            },
                            "field_name": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "FacetNumericRangeValue": {
                "type": "object",
                "properties": {
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "numeric_range": {
                        "$ref": "#/components/schemas/NumericRange"
                    }
                }
            },
            "FacetSimpleFieldResponse": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FacetFieldResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "facet_field_request": {
                                "$ref": "#/components/schemas/FacetSimpleFieldRequest"
                            },
                            "facet_value_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FacetSimpleValue"
                                }
                            },
                            "field_name": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "FacetSimpleValue": {
                "type": "object",
                "properties": {
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "SearchPagedResult": {
                "type": "object",
                "properties": {
                    "asset_group_count": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "integer",
                                            "format": "int64"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,Long>"
                    },
                    "asset_id_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "contains_invalid_conditions": {
                        "type": "boolean"
                    },
                    "facet_field_response_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FacetFieldResponse"
                        }
                    },
                    "hit_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "offset": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "search_type_counts": {
                        "$ref": "#/components/schemas/SearchTypeCounts"
                    },
                    "total_hit_count": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "xml": {
                    "name": "SearchPagedResult"
                }
            },
            "SearchResultRepresentation": {
                "type": "object",
                "properties": {
                    "search_result_resource": {
                        "type": "object",
                        "properties": {
                            "asset_list": {
                                "type": "array",
                                "xml": {
                                    "name": "asset_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/Asset"
                                }
                            },
                            "search_object": {
                                "$ref": "#/components/schemas/Search"
                            },
                            "search_result": {
                                "$ref": "#/components/schemas/SearchPagedResult"
                            }
                        },
                        "format": "SearchResultRepresentation"
                    }
                },
                "xml": {
                    "name": "search_result_resource"
                }
            },
            "SearchTypeCounts": {
                "type": "object",
                "properties": {
                    "asset_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "folder_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_count": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "SearchSuggestionResult": {
                "type": "object",
                "properties": {
                    "suggestion_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SearchSuggestionResultRepresentation": {
                "type": "object",
                "properties": {
                    "search_suggestion_result_resource": {
                        "type": "object",
                        "properties": {
                            "search_suggestion_result": {
                                "$ref": "#/components/schemas/SearchSuggestionResult"
                            }
                        },
                        "format": "SearchSuggestionResultRepresentation"
                    }
                },
                "xml": {
                    "name": "search_suggestion_result_resource"
                }
            },
            "SearchConfiguration": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "facet_configuration_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "is_custom_config": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "search": {
                        "$ref": "#/components/schemas/Search"
                    },
                    "user_group_id_list": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "SearchConfigurationRepresentation": {
                "type": "object",
                "properties": {
                    "search_configuration_resource": {
                        "type": "object",
                        "properties": {
                            "search_configuration": {
                                "$ref": "#/components/schemas/SearchConfiguration"
                            }
                        },
                        "format": "SearchConfigurationRepresentation"
                    }
                },
                "xml": {
                    "name": "search_configuration_resource"
                }
            },
            "SearchConfigurationCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "search_configurations_resource": {
                        "type": "object",
                        "properties": {
                            "search_configuration_list": {
                                "type": "array",
                                "xml": {
                                    "name": "search_configuration_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SearchConfiguration"
                                }
                            }
                        },
                        "format": "SearchConfigurationCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "search_configurations_resource"
                }
            },
            "SearchOperator": {
                "type": "object",
                "properties": {
                    "datatype": {
                        "type": "string"
                    },
                    "display_sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "expected_value_count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "valid_for_cascading_fields": {
                        "type": "boolean",
                        "xml": {
                            "name": "valid_for_cascading_fields"
                        }
                    },
                    "valid_for_domained_fields": {
                        "type": "boolean",
                        "xml": {
                            "name": "valid_for_domained_fields"
                        }
                    }
                }
            },
            "SearchOperatorCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "search_operators_resource": {
                        "type": "object",
                        "properties": {
                            "search_operator_list": {
                                "type": "array",
                                "xml": {
                                    "name": "search_operator_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SearchOperator"
                                }
                            }
                        },
                        "format": "SearchOperatorCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "search_operators_resource"
                }
            },
            "SearchScope": {
                "type": "object",
                "properties": {
                    "column_name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "table_name": {
                        "type": "string"
                    }
                }
            },
            "SearchScopeCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "search_scopes_resource": {
                        "type": "object",
                        "properties": {
                            "search_scope_list": {
                                "type": "array",
                                "xml": {
                                    "name": "search_scope_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SearchScope"
                                }
                            }
                        },
                        "format": "SearchScopeCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "search_scopes_resource"
                }
            },
            "SecurityPoliciesCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "security_policies_resource": {
                        "type": "object",
                        "properties": {
                            "security_policy_list": {
                                "type": "array",
                                "xml": {
                                    "name": "security_policy_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/SecurityPolicy"
                                }
                            }
                        },
                        "format": "SecurityPoliciesCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "security_policies_resource"
                }
            },
            "SecurityPolicyRepresentation": {
                "type": "object",
                "properties": {
                    "security_policy_resource": {
                        "type": "object",
                        "properties": {
                            "security_policy": {
                                "$ref": "#/components/schemas/SecurityPolicy"
                            }
                        },
                        "format": "SecurityPolicyRepresentation"
                    }
                },
                "xml": {
                    "name": "security_policy_resource"
                }
            },
            "SecurityPermissions": {
                "type": "object",
                "properties": {
                    "all_permissions": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "asset_view_permission": {
                        "type": "boolean"
                    },
                    "content_edit_permission": {
                        "type": "boolean"
                    },
                    "custom_permission01": {
                        "type": "boolean"
                    },
                    "custom_permission02": {
                        "type": "boolean"
                    },
                    "custom_permission03": {
                        "type": "boolean"
                    },
                    "custom_permission04": {
                        "type": "boolean"
                    },
                    "delete_asset_permission": {
                        "type": "boolean"
                    },
                    "edit_parents_permission": {
                        "type": "boolean"
                    },
                    "export_permission": {
                        "type": "boolean"
                    },
                    "membership_edit_permission": {
                        "type": "boolean"
                    },
                    "metadata_edit_permission": {
                        "type": "boolean"
                    },
                    "named_permissions_granted": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "preview_view_permission": {
                        "type": "boolean"
                    },
                    "project_view_permission": {
                        "type": "boolean"
                    },
                    "subscribe_permission": {
                        "type": "boolean"
                    },
                    "summary_view_permission": {
                        "type": "boolean"
                    }
                }
            },
            "SecurityPolicyPermissionsTreeNode": {
                "type": "object",
                "properties": {
                    "child_node_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SecurityPolicyPermissionsTreeNode"
                        }
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/SecurityPermissions"
                    },
                    "user_group": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "user_group_has_permission": {
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "SecurityPolicyPermissionsTreeNode"
                }
            },
            "SecurityPolicyPermissionsTreeRepresentation": {
                "type": "object",
                "properties": {
                    "security_policy_permissions_tree": {
                        "type": "object",
                        "properties": {
                            "root_node": {
                                "$ref": "#/components/schemas/SecurityPolicyPermissionsTreeNode"
                            }
                        },
                        "format": "SecurityPolicyPermissionsTreeRepresentation"
                    }
                },
                "xml": {
                    "name": "security_policy_permissions_tree"
                }
            },
            "SecuritySession": {
                "type": "object",
                "properties": {
                    "domain_name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "local_session": {
                        "type": "boolean"
                    },
                    "login_name": {
                        "type": "string"
                    },
                    "message_digest": {
                        "type": "string"
                    },
                    "role_name": {
                        "type": "string"
                    },
                    "user_full_name": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    },
                    "user_role_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "validation_key": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "xml": {
                    "name": "SecuritySession",
                    "namespace": "http://www.artesia.com/api/xsd"
                }
            },
            "SessionRepresentation": {
                "type": "object",
                "properties": {
                    "session_resource": {
                        "type": "object",
                        "properties": {
                            "session": {
                                "$ref": "#/components/schemas/SecuritySession"
                            }
                        },
                        "format": "SessionRepresentation"
                    }
                },
                "xml": {
                    "name": "session_resource"
                }
            },
            "PasswordParameter": {
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string"
                    }
                }
            },
            "OAuthTokenRepresentation": {
                "type": "object",
                "properties": {
                    "token_info": {
                        "type": "object",
                        "properties": {
                            "oauth_token": {
                                "$ref": "#/components/schemas/OAuthTokens"
                            }
                        },
                        "format": "OAuthTokenRepresentation"
                    }
                },
                "xml": {
                    "name": "token_info"
                }
            },
            "OAuthTokens": {
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string"
                    },
                    "expiry_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "refresh_token": {
                        "type": "string"
                    },
                    "token_type": {
                        "type": "string"
                    }
                }
            },
            "OtdsSession": {
                "type": "object",
                "properties": {
                    "ticket": {
                        "type": "string"
                    }
                }
            },
            "OtdsSessionRepresentation": {
                "type": "object",
                "properties": {
                    "otds_session_resource": {
                        "type": "object",
                        "properties": {
                            "otds_session": {
                                "$ref": "#/components/schemas/OtdsSession"
                            }
                        },
                        "format": "OtdsSessionRepresentation"
                    }
                },
                "xml": {
                    "name": "otds_session_resource"
                }
            },
            "HostedHelpDetails": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "hosted_help_details"
                }
            },
            "HostedHelpRepresentation": {
                "type": "object",
                "properties": {
                    "hosted_help_resource": {
                        "type": "object",
                        "properties": {
                            "hosted_help_details": {
                                "$ref": "#/components/schemas/HostedHelpDetails"
                            }
                        },
                        "format": "HostedHelpRepresentation"
                    }
                },
                "xml": {
                    "name": "hosted_help_resource"
                }
            },
            "SystemDetailsRepresentation": {
                "type": "object",
                "properties": {
                    "system_details_resource": {
                        "type": "object",
                        "properties": {
                            "system_details_map": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<String,String>"
                            }
                        },
                        "format": "SystemDetailsRepresentation"
                    }
                },
                "xml": {
                    "name": "system_details_resource"
                }
            },
            "SupportedLocaleCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "supported_locales_resource": {
                        "type": "object",
                        "properties": {
                            "supported_locales": {
                                "type": "object",
                                "properties": {
                                    "entry": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "format": "Map<String,String>"
                            }
                        },
                        "format": "SupportedLocaleCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "supported_locales_resource"
                }
            },
            "PrefData": {
                "type": "object",
                "properties": {
                    "cacheable": {
                        "type": "boolean"
                    },
                    "data_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "INTEGER",
                            "STRING"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "pref_data_id": {
                        "$ref": "#/components/schemas/PrefDataId"
                    },
                    "public_system_configuration": {
                        "type": "boolean"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "PrefDataId": {
                "type": "object",
                "properties": {
                    "component": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "SystemSettingRepresentation": {
                "type": "object",
                "properties": {
                    "system_setting_resource": {
                        "type": "object",
                        "properties": {
                            "system_setting": {
                                "$ref": "#/components/schemas/PrefData"
                            }
                        },
                        "format": "SystemSettingRepresentation"
                    }
                },
                "xml": {
                    "name": "system_setting_resource"
                }
            },
            "SystemSettingsCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "system_settings_resource": {
                        "type": "object",
                        "properties": {
                            "system_settings": {
                                "type": "array",
                                "properties": {},
                                "xml": {
                                    "name": "system_settings"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/PrefData"
                                }
                            }
                        },
                        "format": "SystemSettingsCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "system_settings_resource"
                }
            },
            "TaskOperationResult": {
                "type": "object",
                "properties": {
                    "comment_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "error": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "INVALID_USER",
                            "ALREADY_APPROVED",
                            "ALREADY_REJECTED"
                        ]
                    },
                    "job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "status": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "SUCCESS",
                            "FAILURE"
                        ]
                    },
                    "task_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TaskOperationResultRepresentation": {
                "type": "object",
                "properties": {
                    "task_operation_result_resource": {
                        "type": "object",
                        "properties": {
                            "task_operation_result": {
                                "$ref": "#/components/schemas/TaskOperationResult"
                            }
                        },
                        "format": "TaskOperationResultRepresentation"
                    }
                },
                "xml": {
                    "name": "task_operation_result_resource"
                }
            },
            "TaskAssetCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "task_assets_resource": {
                        "type": "object",
                        "properties": {
                            "assets": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Asset"
                                }
                            },
                            "collection_summary": {
                                "$ref": "#/components/schemas/RestApiCollectionSummary"
                            },
                            "task_asset_summaries": {
                                "type": "array",
                                "xml": {
                                    "name": "task_asset_summaries"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/TaskAssetSummary"
                                }
                            }
                        },
                        "format": "TaskAssetCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "task_assets_resource"
                }
            },
            "TaskAssetSummary": {
                "type": "object",
                "properties": {
                    "asset_approval_state": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NONE",
                            "APPROVED",
                            "REJECTED"
                        ]
                    },
                    "asset_id": {
                        "type": "string"
                    },
                    "comments_count": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "AssetReviewComment": {
                "type": "object",
                "properties": {
                    "annotation_data": {
                        "type": "string"
                    },
                    "asset_approval_state": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "NONE",
                            "APPROVED",
                            "REJECTED"
                        ]
                    },
                    "asset_id": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "comment_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "comment_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "task_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_fullname": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    }
                }
            },
            "TaskAssetReviewCommentsRepresentation": {
                "type": "object",
                "properties": {
                    "task_asset_review_comments_resource": {
                        "type": "object",
                        "properties": {
                            "task_asset_review_comments": {
                                "type": "array",
                                "xml": {
                                    "name": "task_asset_review_comments"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/AssetReviewComment"
                                }
                            }
                        },
                        "format": "TaskAssetReviewCommentsRepresentation"
                    }
                },
                "xml": {
                    "name": "task_asset_review_comments_resource"
                }
            },
            "TaskRepresentation": {
                "type": "object",
                "properties": {
                    "task_resource": {
                        "type": "object",
                        "properties": {
                            "task": {
                                "$ref": "#/components/schemas/Task"
                            }
                        },
                        "format": "TaskRepresentation"
                    }
                },
                "xml": {
                    "name": "task_resource"
                }
            },
            "TaskAssignees": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_group_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "TaskAssigneesParam": {
                "type": "object",
                "properties": {
                    "task_assignees_param": {
                        "type": "object",
                        "properties": {
                            "task_assignees": {
                                "$ref": "#/components/schemas/TaskAssignees"
                            },
                            "task_assignees_update_mode": {
                                "type": "string",
                                "xml": {
                                    "name": "task_assignees_update_mode"
                                }
                            }
                        },
                        "format": "TaskAssigneesParam"
                    }
                },
                "xml": {
                    "name": "task_assignees_param"
                }
            },
            "TaskDataRepresentation": {
                "type": "object",
                "properties": {
                    "task_data_resource": {
                        "type": "object",
                        "properties": {
                            "task_form": {
                                "$ref": "#/components/schemas/TaskForm"
                            }
                        },
                        "format": "TaskDataRepresentation"
                    }
                },
                "xml": {
                    "name": "task_data_resource"
                }
            },
            "TransferSchemeCredentials": {
                "type": "object",
                "properties": {
                    "authentication_token": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    }
                }
            },
            "TransferSchemeSessionRepresentation": {
                "type": "object",
                "properties": {
                    "transferschemes_session_resource": {
                        "type": "object",
                        "properties": {
                            "transfer_session": {
                                "$ref": "#/components/schemas/TransferSchemeCredentials"
                            }
                        },
                        "format": "TransferSchemeSessionRepresentation"
                    }
                },
                "xml": {
                    "name": "transferschemes_session_resource"
                }
            },
            "TransferSchemeConfiguration": {
                "type": "object",
                "properties": {
                    "scheme_name": {
                        "type": "string"
                    },
                    "transfer_configuration": {
                        "type": "object",
                        "properties": {
                            "entry": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "object",
                                            "format": "Object"
                                        }
                                    }
                                }
                            }
                        },
                        "format": "Map<String,Object>"
                    }
                }
            },
            "TransferSchemesCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "transferschemes_resource": {
                        "type": "object",
                        "properties": {
                            "transfer_scheme": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TransferSchemeConfiguration"
                                }
                            }
                        },
                        "format": "TransferSchemesCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "transferschemes_resource"
                }
            },
            "ArgumentDataType": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ArgumentDisplay": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ArgumentOptionType": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "TransformerArgument": {
                "type": "object",
                "properties": {
                    "argument_number": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "argument_option": {
                        "type": "string"
                    },
                    "data_type": {
                        "$ref": "#/components/schemas/ArgumentDataType"
                    },
                    "default_value": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "display": {
                        "$ref": "#/components/schemas/ArgumentDisplay"
                    },
                    "gui_comments": {
                        "type": "string"
                    },
                    "gui_number": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "legacy_transformer_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "maximum_length": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string"
                    },
                    "option_type": {
                        "$ref": "#/components/schemas/ArgumentOptionType"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "transformer_id": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransformerArgumentValue"
                        }
                    }
                }
            },
            "TransformerArgumentValue": {
                "type": "object",
                "properties": {
                    "legacy_transformer_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "transformer_argument_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "transformer_id": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "TransformerInfo": {
                "type": "object",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransformerArgument"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "executable": {
                        "type": "string"
                    },
                    "export_content_types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "export_job_transformer": {
                        "type": "boolean"
                    },
                    "export_transformer": {
                        "type": "boolean"
                    },
                    "filter_mask": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "string"
                    },
                    "implementation_class": {
                        "type": "string"
                    },
                    "import_transformer": {
                        "type": "boolean"
                    },
                    "legacy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "named_location_transformer": {
                        "type": "boolean"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "system_transformer": {
                        "type": "boolean"
                    },
                    "transformer_type": {
                        "type": "string"
                    },
                    "update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "update_id": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    },
                    "working_dir": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "TransformerInfo"
                }
            },
            "TransformerInstance": {
                "type": "object",
                "properties": {
                    "attribute_values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransformerInstanceValue"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "downloadable": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "restriction": {
                        "type": "string"
                    },
                    "schedulable": {
                        "type": "boolean"
                    },
                    "transformer_id": {
                        "type": "string"
                    }
                }
            },
            "TransformerRepresentation": {
                "type": "object",
                "properties": {
                    "transformer_resource": {
                        "type": "object",
                        "properties": {
                            "transformer_info": {
                                "$ref": "#/components/schemas/TransformerInfo"
                            },
                            "transformer_instances": {
                                "type": "array",
                                "xml": {
                                    "name": "transformer_instances"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/TransformerInstance"
                                }
                            }
                        },
                        "format": "TransformerRepresentation"
                    }
                },
                "xml": {
                    "name": "transformer_resource"
                }
            },
            "TransformersCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "transformers_resource": {
                        "type": "object",
                        "properties": {
                            "transformer": {
                                "type": "array",
                                "xml": {
                                    "name": "transformer"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/TransformerRepresentation"
                                }
                            }
                        },
                        "format": "TransformersCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "transformers_resource"
                }
            },
            "UsageApplication": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "UsageApplicationCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "usage_applications_resource": {
                        "type": "object",
                        "properties": {
                            "usage_applications": {
                                "type": "array",
                                "xml": {
                                    "name": "usage_applications"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/UsageApplication"
                                }
                            }
                        },
                        "format": "UsageApplicationCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "usage_applications_resource"
                }
            },
            "UsageApplicationRepresentation": {
                "type": "object",
                "properties": {
                    "usage_application_resource": {
                        "type": "object",
                        "properties": {
                            "usage_application": {
                                "$ref": "#/components/schemas/UsageApplication"
                            }
                        },
                        "format": "UsageApplicationRepresentation"
                    }
                },
                "xml": {
                    "name": "usage_application_resource"
                }
            },
            "UsageCategory": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "UsageCategoryCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "usage_categories_resource": {
                        "type": "object",
                        "properties": {
                            "usage_categories": {
                                "type": "array",
                                "xml": {
                                    "name": "usage_categories"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/UsageCategory"
                                }
                            }
                        },
                        "format": "UsageCategoryCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "usage_categories_resource"
                }
            },
            "UsageCategoryRepresentation": {
                "type": "object",
                "properties": {
                    "usage_category_resource": {
                        "type": "object",
                        "properties": {
                            "usage_category": {
                                "$ref": "#/components/schemas/UsageCategory"
                            }
                        },
                        "format": "UsageCategoryRepresentation"
                    }
                },
                "xml": {
                    "name": "usage_category_resource"
                }
            },
            "UserPreferenceData": {
                "type": "object",
                "properties": {
                    "sub_preferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserPreferenceData"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "UserPreferenceRepresentation": {
                "type": "object",
                "properties": {
                    "user_preference_resource": {
                        "type": "object",
                        "properties": {
                            "preference_data": {
                                "type": "array",
                                "xml": {
                                    "name": "preference_data"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/UserPreferenceData"
                                }
                            },
                            "preference_id": {
                                "type": "string",
                                "xml": {
                                    "name": "preference_id"
                                }
                            }
                        },
                        "format": "UserPreferenceRepresentation"
                    }
                },
                "xml": {
                    "name": "user_preference_resource"
                }
            },
            "UserPreferenceDateRange": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "range": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "UserPreferenceDateRangeCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "user_preference_date_ranges_resource": {
                        "type": "object",
                        "properties": {
                            "user_preference_date_range_list": {
                                "type": "array",
                                "xml": {
                                    "name": "user_preference_date_range_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/UserPreferenceDateRange"
                                }
                            }
                        },
                        "format": "UserPreferenceDateRangeCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "user_preference_date_ranges_resource"
                }
            },
            "UserPreferenceCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "user_preferences_resource": {
                        "type": "object",
                        "properties": {
                            "user_preference_list": {
                                "type": "array",
                                "xml": {
                                    "name": "user_preference_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/UserPreferenceRepresentation"
                                }
                            }
                        },
                        "format": "UserPreferenceCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "user_preferences_resource"
                }
            },
            "SessionInfo": {
                "type": "object",
                "properties": {
                    "application_name": {
                        "type": "string"
                    },
                    "last_ping_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "login_time": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "session_id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "SessionInfoCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "session_info_list": {
                        "type": "object",
                        "properties": {
                            "active_session_count": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "last_login_time": {
                                "type": "string",
                                "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                                "format": "date-time"
                            },
                            "session_info": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SessionInfo"
                                }
                            }
                        },
                        "format": "SessionInfoCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "session_info_list"
                }
            },
            "UserRepresentation": {
                "type": "object",
                "properties": {
                    "user_resource": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "$ref": "#/components/schemas/TeamsUser"
                            }
                        },
                        "format": "UserRepresentation"
                    }
                },
                "xml": {
                    "name": "user_resource"
                }
            },
            "UserCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "users_resource": {
                        "type": "object",
                        "properties": {
                            "user_list": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TeamsUser"
                                }
                            }
                        },
                        "format": "UserCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "users_resource"
                }
            },
            "UserType": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "install_type": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "UserTypeCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "user_type_resource": {
                        "type": "object",
                        "properties": {
                            "user_type_list": {
                                "type": "array",
                                "xml": {
                                    "name": "user_type_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/UserType"
                                }
                            }
                        },
                        "format": "UserTypeCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "user_type_resource"
                }
            },
            "UserTypeRepresentation": {
                "type": "object",
                "properties": {
                    "user_type_resource": {
                        "type": "object",
                        "properties": {
                            "user_type": {
                                "$ref": "#/components/schemas/UserType"
                            }
                        },
                        "format": "UserTypeRepresentation"
                    }
                },
                "xml": {
                    "name": "user_type_resource"
                }
            },
            "VideoClip": {
                "type": "object",
                "properties": {
                    "access_control_descriptor": {
                        "$ref": "#/components/schemas/XmlAccessControlDescriptor"
                    },
                    "asset_color_infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AssetColorInfo"
                        }
                    },
                    "asset_content_info": {
                        "$ref": "#/components/schemas/AssetContentInfo"
                    },
                    "asset_id": {
                        "type": "string"
                    },
                    "asset_lock_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "asset_lock_state_user_id": {
                        "type": "string"
                    },
                    "asset_state": {
                        "type": "string"
                    },
                    "asset_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "asset_state_user_id": {
                        "type": "string"
                    },
                    "business_unit_id": {
                        "type": "string"
                    },
                    "checked_out": {
                        "type": "boolean"
                    },
                    "collection_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "content_editable": {
                        "type": "boolean"
                    },
                    "content_lock_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "content_lock_state_user_id": {
                        "type": "string"
                    },
                    "content_lock_state_user_name": {
                        "type": "string"
                    },
                    "content_size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "content_state": {
                        "type": "string"
                    },
                    "content_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "content_state_user_id": {
                        "type": "string"
                    },
                    "content_state_user_name": {
                        "type": "string"
                    },
                    "content_sub_type": {
                        "type": "string"
                    },
                    "content_type": {
                        "type": "string"
                    },
                    "creator_id": {
                        "type": "string"
                    },
                    "data_type": {
                        "type": "string"
                    },
                    "date_imported": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "date_last_updated": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "deep_zoom_info": {
                        "$ref": "#/components/schemas/DeepZoomInfo"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "deletion_state_last_update_date": {
                        "type": "string",
                        "description": "The convention for representing date objects is <b>ISO 8601</b> format i.e <b>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</b>",
                        "format": "date-time"
                    },
                    "deletion_state_user_id": {
                        "type": "string"
                    },
                    "deletion_state_user_name": {
                        "type": "string"
                    },
                    "delivery_service_url": {
                        "type": "string"
                    },
                    "expired": {
                        "type": "boolean"
                    },
                    "import_job_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "import_user_name": {
                        "type": "string"
                    },
                    "inherited_metadata_collections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InheritedMetadataCollection"
                        }
                    },
                    "latest_version": {
                        "type": "boolean"
                    },
                    "legacy_model_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "links": {
                        "$ref": "#/components/schemas/LinkCollection"
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "master_content_info": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetadataCollection"
                    },
                    "metadata_lock_state_user_name": {
                        "type": "string"
                    },
                    "metadata_model_id": {
                        "type": "string"
                    },
                    "metadata_state_user_name": {
                        "type": "string"
                    },
                    "mime_type": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "original_asset_id": {
                        "type": "string"
                    },
                    "parent_video_id": {
                        "type": "string"
                    },
                    "path_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContainerPath"
                        }
                    },
                    "progressive_download_url": {
                        "type": "string"
                    },
                    "rendition_content": {
                        "$ref": "#/components/schemas/RenditionContentInfo"
                    },
                    "review_asset_approval_summary_collection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReviewJobAssetApprovalSummary"
                        }
                    },
                    "review_info_collection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreativeReviewInfo"
                        }
                    },
                    "security_policy_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SecurityPolicy"
                        }
                    },
                    "smpte_in": {
                        "type": "string"
                    },
                    "smpte_out": {
                        "type": "string"
                    },
                    "streaming_url": {
                        "type": "string"
                    },
                    "subscribed_to": {
                        "type": "boolean"
                    },
                    "thumbnail_content_id": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version_count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "video_clip_name": {
                        "type": "string"
                    },
                    "video_reference": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "watermark_template_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "xml": {
                    "name": "Asset"
                }
            },
            "VideoClipRepresentation": {
                "type": "object",
                "properties": {
                    "video_clip_resource": {
                        "type": "object",
                        "properties": {
                            "video_clip": {
                                "$ref": "#/components/schemas/VideoClip"
                            }
                        },
                        "format": "VideoClipRepresentation"
                    }
                },
                "xml": {
                    "name": "video_clip_resource"
                }
            },
            "VideoSpeechText": {
                "type": "object",
                "properties": {
                    "end_time": {
                        "type": "string"
                    },
                    "start_time": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "text_id": {
                        "type": "string"
                    },
                    "text_type": {
                        "type": "string",
                        "properties": {},
                        "enum": [
                            "TRANSCRIPT",
                            "OCR"
                        ]
                    }
                }
            },
            "VideoSpeechTextParam": {
                "type": "object",
                "properties": {
                    "video_speech_text_param": {
                        "type": "object",
                        "properties": {
                            "video_speech_text": {
                                "$ref": "#/components/schemas/VideoSpeechText"
                            }
                        },
                        "format": "VideoSpeechTextParam"
                    }
                },
                "xml": {
                    "name": "video_speech_text_param"
                }
            },
            "VideoClipCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "video_clips_resource": {
                        "type": "object",
                        "properties": {
                            "clip_list": {
                                "type": "array",
                                "xml": {
                                    "name": "clip_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/VideoClip"
                                }
                            },
                            "collection_summary": {
                                "$ref": "#/components/schemas/RestApiCollectionSummary"
                            }
                        },
                        "format": "VideoClipCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "video_clips_resource"
                }
            },
            "VideoSpeachTextCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "video_speech_text_resource": {
                        "type": "object",
                        "properties": {
                            "speech_text": {
                                "type": "array",
                                "xml": {
                                    "name": "speech_text"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/VideoSpeechText"
                                }
                            }
                        },
                        "format": "VideoSpeachTextCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "video_speech_text_resource"
                }
            },
            "Appearance": {
                "type": "object",
                "properties": {
                    "end_time": {
                        "type": "string"
                    },
                    "start_time": {
                        "type": "string"
                    }
                }
            },
            "VideoAppearanceCollection": {
                "type": "object",
                "properties": {
                    "appearances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Appearance"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "VideoBrandInfo": {
                "type": "object",
                "properties": {
                    "appearances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Appearance"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "seen_duration_ratio": {
                        "type": "string"
                    },
                    "wiki_url": {
                        "type": "string"
                    }
                }
            },
            "VideoFaceInfo": {
                "type": "object",
                "properties": {
                    "appearances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Appearance"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "seen_duration_ratio": {
                        "type": "string"
                    },
                    "thumbnail_info": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "title": {
                        "type": "string"
                    }
                }
            },
            "VideoInsightsRepresentation": {
                "type": "object",
                "properties": {
                    "video_insights_resource": {
                        "type": "object",
                        "properties": {
                            "brands": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/VideoBrandInfo"
                                }
                            },
                            "duration": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "faces": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/VideoFaceInfo"
                                }
                            },
                            "keywords": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/VideoAppearanceCollection"
                                }
                            },
                            "labels": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/VideoAppearanceCollection"
                                }
                            },
                            "name": {
                                "type": "string"
                            },
                            "sentiments": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/VideoSentimentsInfo"
                                }
                            },
                            "speech_text": {
                                "type": "array",
                                "xml": {
                                    "name": "speech_text"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/VideoSpeechText"
                                }
                            }
                        },
                        "format": "VideoInsightsRepresentation"
                    }
                },
                "xml": {
                    "name": "video_insights_resource"
                }
            },
            "VideoSentimentsInfo": {
                "type": "object",
                "properties": {
                    "appearances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Appearance"
                        }
                    },
                    "asset_id": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "seen_duration_ratio": {
                        "type": "string"
                    }
                }
            },
            "VideoInsightRequest": {
                "type": "object",
                "properties": {
                    "load_all_insights": {
                        "type": "boolean"
                    },
                    "load_brands": {
                        "type": "boolean"
                    },
                    "load_faces": {
                        "type": "boolean"
                    },
                    "load_keywords": {
                        "type": "boolean"
                    },
                    "load_labels": {
                        "type": "boolean"
                    },
                    "load_sentiments": {
                        "type": "boolean"
                    },
                    "load_speech_text": {
                        "type": "boolean"
                    }
                }
            },
            "VideoInsightRequestParam": {
                "type": "object",
                "properties": {
                    "video_insight_request_param": {
                        "type": "object",
                        "properties": {
                            "insight_request": {
                                "$ref": "#/components/schemas/VideoInsightRequest"
                            }
                        },
                        "format": "VideoInsightRequestParam"
                    }
                },
                "xml": {
                    "name": "video_insight_request_param"
                }
            },
            "VideoKeyframe": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "type": "string"
                    },
                    "content_info": {
                        "$ref": "#/components/schemas/ContentInfo"
                    },
                    "data_mime_type": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "msec_timecode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "object_id": {
                        "type": "string"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "smpte_timecode": {
                        "type": "string"
                    },
                    "thumbnail": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "video_text_tracks": {
                        "type": "array",
                        "properties": {},
                        "items": {
                            "$ref": "#/components/schemas/VideoTextTrack"
                        }
                    }
                },
                "xml": {
                    "name": "VideoKeyframe",
                    "namespace": "http://www.artesia.com/api/xsd"
                }
            },
            "VideoKeyframesCollectionRepresentation": {
                "type": "object",
                "properties": {
                    "video_keyframes_resource": {
                        "type": "object",
                        "properties": {
                            "collection_summary": {
                                "$ref": "#/components/schemas/RestApiCollectionSummary"
                            },
                            "key_frame_list": {
                                "type": "array",
                                "writeOnly": true,
                                "items": {
                                    "$ref": "#/components/schemas/VideoKeyframe"
                                }
                            },
                            "keyframe_list": {
                                "type": "array",
                                "xml": {
                                    "name": "Keyframe_list"
                                },
                                "items": {
                                    "$ref": "#/components/schemas/VideoKeyframe"
                                }
                            }
                        },
                        "format": "VideoKeyframesCollectionRepresentation"
                    }
                },
                "xml": {
                    "name": "video_keyframes_resource"
                }
            },
            "VideoTextTrack": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "msec_timecode_end": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "msec_timecode_start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "smpte_timecode_end": {
                        "type": "string"
                    },
                    "smpte_timecode_start": {
                        "type": "string"
                    },
                    "text_data": {
                        "type": "string"
                    },
                    "track_type": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "VideoTextTrack",
                    "namespace": "http://www.artesia.com/api/xsd"
                }
            },
            "VideoInsightPersonParam": {
                "type": "object",
                "properties": {
                    "video_face_info_param": {
                        "type": "object",
                        "properties": {
                            "face_id": {
                                "type": "string",
                                "xml": {
                                    "name": "face_id"
                                }
                            },
                            "person_name": {
                                "type": "string",
                                "xml": {
                                    "name": "person_name"
                                }
                            }
                        },
                        "format": "VideoInsightPersonParam"
                    }
                },
                "xml": {
                    "name": "video_face_info_param"
                }
            }
        }
    }
}