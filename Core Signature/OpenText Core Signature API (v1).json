{
    "swagger": "2.0",
    "info": {
        "title": "OpenText Core Signature API",
        "termsOfService": "https://core.opentext.com/terms",
        "contact": {
            "email": "support@sign.core.opentext.com"
        },
        "x-logo": {
            "url": "https://sign.core.opentext.com/images/logo.png",
            "altText": "OpenText Core Signature"
        },
        "description": "# Core Signature Service OT2 Developer Guide\n\nCore Signature APIs are designed to accept requests made with OAuth 2.0 access tokens retrieved using OT2's integrated OTDS OAuth 2.0 clients.\n\nThis guide is intended to provide steps needed to set up you development Site to be able to request tokens and access the Core Signature APIs.\n\n## About your Development Sandbox Site and Production Site\n\nYour Opentext Sales Representative will set up your Development / Trial Sandbox, as well as your Production Site when you are ready to make your application live and commercially available.\n\n### Sandbox Site\n\nYour Sandbox Site is set up for you to begin trial and development with Core Signature Service API. Note that all users and clients created in your sandbox Site are for testing purposes and will not be available in production once you move to your Production Site.\n\n### Production Site\n\nWhen you are ready to make the move to production you will need to work with your Opentext Sales Representative to make your production Site available to you.\n\n## Available OT2 Environments\n\nThe Core Signature Service is available on several OT2 environments. To be sure you're using the correct one, please refer to the table below which outlines the Core Signature environments and the corresponding OT2 Admin Center environments.\n\n<table>\n    <tr>\n        <th>Purpose</th>\n        <th>Region</th>\n        <th>Core Signature URL</th>\n        <th>OT2 Admin Center Environment</th>\n    </tr>\n\t<tr>\n\t\t <td>Pre-production development</td>\n\t\t <td>Global (US-based)</td>\n         <td><a href=https://staging.sign.core.opentext.com>https://staging.sign.core.opentext.com</a></td>\n         <td><a href=https://admincenter.preprod.ot2.opentext.com>https://admincenter.preprod.ot2.opentext.com</a></td>\n\t</tr>\n\t<tr>\n         <td rowspan=\"2\">Production</td>\n         <td>US</td>\n\t\t <td><a href=https://sign.core.opentext.com>https://sign.core.opentext.com</a></td>\n\t\t <td><a href=https://admincenter.ot2.opentext.com>https://admincenter.ot2.opentext.com</a></td>\n\t</tr>\n\t<tr>\n\t\t <td>Europe</td>\n\t\t <td><a href=https://sign.core.opentext.eu>https://sign.core.opentext.eu</a></td>\n\t\t <td><a href=https://admincenter.ot2.opentext.eu>https://admincenter.ot2.opentext.eu</a></td>\n\t</tr>\n</table>\n\n## Getting Started with Admin Center\n\nAdmin Center is where you as a developer can administer your Site to add your subscriptions for applications and services available on the OT2 platform.\n\nIn this guide we provide a high-level view into Admin Center Sites and Subscriptions.\n\nTo begin developing with Core Signature API you will need to have a **Site** created from within OT2 Admin Center, and also add a **Subscription** to that Site.\n<br></br>\n\n### Step 1: You need your Site.\n\nYour Site is the place where you manage users and subscriptions to access other OT2 services and applications. You also create API Access Credentials (OAuth 2.0 clients) that allow you to retrieve access tokens for your users.\n\nFor OT2 customers, you will need to have your Site and Subscription provisioned for you by your Opentext provisioning representative.\n<br></br>\n\n### Step 2: You need a Core Signature API Subscription added to your site.\n\nWhen requesting an Access Token to access the Core Signature API, you will need to have a **Subscription** added to your Site.\n\nFor OT2 customers, you will need to have your Site and Subscription provisioned for you by your Opentext provisioning representative.\n\n## Adding Admins and Users to your Subscription\n\nOnce your subscription is set up, you may want to create additional admin users and start adding other users to your subscription.\n\nFrom your Site page in Admin Center, click on the **Subscriptions** side bar menu item.\n\nThen click on the Core Signature subscription under the **Subscriptions** page. Note the name of the Core Signature subscription will be unique to your Site name and will not look exactly as shown in the screen shot below:\n\n![Subscriptions](../../../../static/api-docs-assets/subscriptions.png)\n\nOnce you've selected your subscription, from the side bar menu click on **Admins**.\n\n**NOTE:** If you just want to add a regular user, click on the **Users** side bar menu item and follow the same steps.\n\nClick the ( ***+*** ) button in the top-right corner of the **Admins** page.\n\n![Admins Page](../../../../static/api-docs-assets/admins.png)\n\nIn the modal page that pops up, you can now enter a valid email address of the user you want to invite.\n\nAn email invite will be sent to that user with instructions on how to accept the invitation.\n\nThat's it! You can repeat this process as many times as your subscription allows.\n\n# Accessing the Core Signature API (OT2 Developers)\n\n### Prerequisites\n\nIn order to be able to access the Core Signature Service API, you will need to carry out and familiarize yourself with the following steps:\n\n* [Creating your OAuth 2.0 Credentials](#section/Accessing-the-Core-Signature-API-(OT2-Developers)/Creating-your-OAuth-2.0-Credentials)\n\n* [Getting an Access Token](#section/Accessing-the-Core-Signature-API-(OT2-Developers)/Getting-an-Access-Token)\n\n## Creating your OAuth 2.0 Credentials\n\nIn order to obtain an Access Token that allows you to make requests to the Core Signature Service API you will need to set up your API Service Credentials from within Admin Center for your site.\n\n### Prerequisites\n\n* [Set up your Admin Center Site](#section/Core-Signature-Service-OT2-Developer-Guide/Getting-Started-with-Admin-Center)\n\n* Ensure a Subscription to Core Signature Service API is available and added to your Site.\n\nSign in to Admin Center with your Site's admin user credentials and navigate to your Site's console.\n\nFrom the left-hand navigation menu, select 'API service credentials'.\n\n![API Service Credentials](../../../../static/api-docs-assets/nav_bar_api_credentials.png)\n\nFrom the API service credentials view, select the 'plus' ( + ) icon in the top right-hand corner.\n\n![API Service Credentials](../../../../static/api-docs-assets/api_credentials.png)\n\nGive your new API service credentials a name and click the 'Add' button. Note, this name is for your own organizational purposes and is not needed when accessing the OAuth 2.0 client and making requests.\n\n![API Service Credentials](../../../../static/api-docs-assets/api_credentials_modal.png)\n\nFollow the instructions and take note of the **Client Id** and **Client Secret**. You will need these to make requests to the OAuth 2.0 client and retrieve your access token.\n\n![API Service Credentials](../../../../static/api-docs-assets/api_credentials_detail_modal.png)\n\nYou're done! You can now use your API service credentials to obtain an Access Token.\n\n## Getting an Access Token\n\n### Getting an Access Token using Password Grant\n\nYour [API Access Credentials](#section/Accessing-the-Core-Signature-API-(OT2-Developers)/Creating-your-OAuth-2.0-Credentials) (OTDS OAuth 2.0 client) supports Password Grant as a method to retrieve an access token. For more information about OT2 OAuth 2.0 capabilities see [OT2 Oauth 2.0 Documentation](https://developer.opentext.com/resources/documentation/Integrate%20and%20Access/0c60d99343c11b3025ce4f05adca3e59/page/6)\n\nTo obtain an Access token you will execute a **POST** request to the Token Route as follows.\n\n### Token Route\n\nTo form the Token route you will need your Site's **Tenant id** from the [Admin Center console](https://otdsauth.ot2.opentext.com/otdstenant/otds.system/login?response_type=code&redirect_uri=https%3A%2F%2Fadmincenter.ot2.opentext.com%2Fmc%2Fplatform%2Foauth&client_id=pmc).\n\n![Site Details](../../../../static/api-docs-assets/site_details.png)\n\nUse your Tenant id in the path for the token route:\n\n**POST** https://otdsauth.ot2.opentext.com/otdstenant/{YOUR_TENANT_ID}/oauth2/token\n\n### Request Parameters\n**Note**: It is important that you include your **Subscription** name in the scope parameter below. Additionally, if you wish to use an endpoint that requires tenant admin access (like `/brandings/`) you must include `otds:roles` in your scope so that your token includes the tenant admin role.\n\nRequest must include the following header and parameters in the body:\n\n```\nheader:\n    Content-Type: \"application/x-www-form-urlencoded\"\n\n\nbody = {\n    grant_type: password,\n    username: {some_username},\n    password: {some_password},\n    scope: \"subscription:{some_subscription_id}\",\n    client_id: {some_client_id},\n    client_secret: {some_client_secret}\n}\n```\n\n# Sending your First Signature Request\n\nThis example will walk you through a simple user flow to upload a document, and send a Signature Request.\n<br></br>\n\nThe flow is as follows:\n\nSigner > Upload Document > Send Signature Request > Signer Receives Document via Email\n<br></br>\n\nTopics will include:\n\n* Getting an access token\n\n* Creating a Document\n\n* Sending a Signature Request\n<br></br>\n\n**Note**: This document uses Postman to illustrate how to set up the http requests. If you don't have Postman you can download it [here](https://www.postman.com/downloads/).\n<br></br>\n\n### Step 1: Get an Access Token\n\nBefore continuing, ensure you have completed and understood these steps:\n\n* [Getting Started with Admin Center](#section/Core-Signature-Service-OT2-Developer-Guide/Getting-Started-with-Admin-Center)\n\n* [Creating your OAuth 2.0 Credentials](#section/Accessing-the-Core-Signature-API-(OT2-Developers)/Creating-your-OAuth-2.0-Credentials)\n\n* [Getting an Access Token](#section/Accessing-the-Core-Signature-API-(OT2-Developers)/Getting-an-Access-Token)\n\nStart by adding a new tab in Postman, and click on the **Authorization** tab below the URL entry field.\n\nHere's an example of using the Postman **Authorization** tab, using OAuth 2.0 as the TYPE, to get an access token. Note, you will need to input your own **Client Secret**, as well as the **User credentials** for the person sending the Signature Request (the Sender).\n\nUsing the Authorization Tab will automatically create the correct Authorization Header when executing your requests.\n\n![Get Access Token](../../../../static/api-docs-assets/get_new_access_token.png)\n\nWhen clicking on 'Request Token' you should see the token like so:\n\n![Access Token](../../../../static/api-docs-assets/access_token_use.png)\n\nClick on 'Use Token' to use the token for your request.\n<br></br>\n\n### Step 2: Upload a Document\n\nCreate a new tab in Postman and change the request method to '**POST**'.\n\nFor the URL, we will be using our Documents API route: **https://sign.core.opentext.com/api/v1/documents/**\n\nYou may need to select the Authorization Tab again, to refresh the access token. You should not have to change your OAuth 2.0 credentials that you provided in the above step.\n\nWe'll be using a sample document which can be downloaded here: [signature_request_demo_document.pdf](https://sign.core.opentext.com/static/demo/signature_request_demo_document.pdf)\n\nThe simplest way to upload a document for a user to be used in a Signature Request, is to use form-data file upload. This allows you to use the original file as-is. Other methods can be used like using a base-64 representation of the document, or simply providing a URL for the document. Using either depends on your application. More can be read in the [Create a Document](#operation/documents_create) section.\n\nSelect the **Body** tab. Ensure the key name is exactly written as **file**, and select your file from the browser provided.\n\n![Body Tab](../../../../static/api-docs-assets/post_body_tab.png)\n\nExecute the request and you should now have a JSON response that includes the document **url**, and the document **uuid**. You will need the document url for the next step.\n\n![JSON Response](../../../../static/api-docs-assets/post_json_response.png)\n<br></br>\n\n### Step 3: Create a Signature Request\n\nTo create a simple Signature Request, you will need:\n\n* The value for 'url' in the above response.\n* The email address of the intended recipient (the person signing).\n* The same OAuth 2.0 credentials you used to get your access token.\n\nCreate a new request in Postman by opening a new tab.\n\nThis will be a **POST** request to the Signature Request API: **https://sign.core.opentext.com/api/v1/signature-requests/**\n\nSelect the **Body** tab and enter the **url** and **email** address for the signer as JSON:\n\n![JSON Body](../../../../static/api-docs-assets/sign_json_body.png)\n\nAgain, ensure you have a valid Access Token by selecting the **Authorization** tab and request a new token with your credentials.\n\nWith your new token, execute the request. You should receive a http **Success** status code **201 Created**.\n\nYou will also receive a JSON representation of the Signature Request you just created in your response body. This will allow you to further track the signing process of your signature request. Review the Documentation for more about what you can do with a Signature Request.\n\n**That's it! Your Signature Request is on its way! The signer will shortly receive an email requesting them to sign the document.**\n\n# Getting Help for OT2 Developers\n\nFor more help or if you have questions that are not covered in these documents please see the following:\n\n* Browse resources for [OT2 Developers](https://developer.opentext.com/)\n* Or, please contact your Opentext Sales Representative.\n\n# Getting Started\n\nThe OpenText Core Signature REST API enables you to create documents and send them for signature. Using the API, have all the functionality of the frontend and more.\n\nIt is also possible to receive events from OpenText Core Signature when, for example, a document has been signed. This way you can keep your application in sync with OpenText Core Signature without polling document endpoints. For this a callback url needs to be provided when creating a document, or by setting up a [Webhook](#tag/webhooks).\n\n## API Authentication\n\nIn order to use the API you need a valid OT2 token. Use tokens with an `Authorization: Bearer YOUR_TOKEN_HERE` header in your requests when making requests to the OpenText Core Signature API. Additionally, ensure that your requests have `Content-Type: application/json`.\n\nExample headers:\n```bash\ncurl -H 'Authorization: Bearer YOUR_TOKEN_HERE' -H 'Content-Type:application/json'\n```\n\n## Creating a Document\n\nIn order to send a signature request, we first need to create a document. There are three ways to create a document by sending a POST request to the [documents endpoint](#operation/documents_create).\n1. Includes a `file` in a `multipart/form-data` request\n2. Provide a `file_from_url`, in which case Core Signature will download the document from that location\n3. Provide base64 encoded document content in `file_from_content`, together with the filename for this content in `file_from_content_name`.\n\nThe third option can be useful if you have trouble POSTing the file together with other configuration data (in the case of the [signature-request-quick-create endpoint](#operation/signature-request-quick-create_create)). Please be sure to add the correct extension to the filename (e.g. `my_pdf_file.pdf`) in order for Core Signature to be able to determine the content type of the provided content.\n\nNote that when using `file_from_url`, the URL needs to be available for Core Signature to download. If the download location returns a content type of `text/plain` or `text/html`, OpenText Core Signature will do its best to make a PDF out of it. This can be used if you want to dynamically create PDF documents from web pages without making a PDF yourself. `external_id` is optional and can be used in order to have a reference to the document in your own system. The `name` field is also optional and can be customized; it defaults to the filename.\n\n## Document Limitations\nCurrently, the following limitations exist on the size and complexity of files uploaded as documents; if a document exceeds these limits we recommend breaking up the document and only sending the portion required for signing.\n* Documents must be smaller than 25MB in size\n* Documents must be less than 110 pages in length\n\n## Sending a Signature Request\n\nOnce you have successfully created a document, you can use the [signature-requests endpoint](#operation/signature_requests_create) to send a signature request using the `url` returned from the [documents endpoint](#operation/documents_create).\n\nThe minimal data needed to send out a signature request is the following:\n\n```json\n{\n    \"document\": \"https://sign.core.opentext.com/api/v1/documents/f2bac751-4fa1-43f1-91de-a1b8905c239a/\",\n    \"message\": \"Please sign this document.\\n\\nThanks!\",\n    \"signers\": [\n        {\n            \"email\": \"otcoresupport@opentext.com\"\n        }\n    ]\n}\n```\n\nNote that we always also create a signer for the `from_email` sending the signature request, however for this signer the `needs_to_sign` flag is set to `false` meaning that this signer will **not** get a signature request. If you want a signer to be `notify_only` (not need to sign or approve), you must set `needs_to_sign=false`.  If a request is sent where multiple signers are accidentally included with the same `email` and `order`, we will use the last one provided as the valid configuration for that signer.\n\nBy default, sending the signature request will send an email to the first signer who needs to sign the document. If you wish to control the signing link and delivery yourself, you can do so using an [Embed url](#section/Additional-signing-methods/Embed-url).\n\n## Quick Create a Signature Request\n\nIn some cases it may be desirable to create a document and send the signature request in one API call. This can be done using the [signature-request-quick-create endpoint](#tag/signature-request-quick-create). This endpoint takes all of the fields of the [documents](#operation/documents_create) and [signature-requests](#operation/signature_requests_create) endpoints together, creates the document, and sends the signature request.\n\n## Document Data Segregation Between OT2 Site Users\n\nCore Signature Service data segregation follows standard OT2 user tenancy as it relates to data isolation of documents created by SignatureRequests. When you create a SignatureRequest with an access token from a specific Site on OT2, the signer will need to have an account within that same Site to be able to access the document in the Core Signature frontend (documents list) or via API requests. Otherwise, a non-registered user can access the signed document via public link, or email as specified by the developer. Public links can be enabled on a per-document basis when creating a document in the [documents](#tag/documents) endpoint. Additional information in relation to general OT2 tenancy can be found in [OT2 Developer Experience](https://developer.opentext.com).\n\n## Filtering with Query Parameters\n\nSeveral endpoints allow you to filter your results by providing values for certain fields. This can even be done in nested fields by using `__` syntax to access a child field. It should be noted that when filtering, emails which contain a `+` (e.g `user+1@opentext.com`) will not be filtered correctly; this is a limitation of current filtering capabilities.\n\n# Working with a Signature Request\n\n## Adding Attachments to a Signature Request\n\nAttachments can be added to a signature request using the [document-attachments endpoint](#operation/document-attachments_create). Signers will be able to download and read them before signing, but these will not be signed themselves. Document attachments must be added to a document before a signature request is created; you cannot add or remove attachments from a document which has been sent for signature.\n\nWhen retrieving attachments with the [document-attachments endpoint](#operation/document-attachments_create), you will see results for attachments you personally have uploaded. If you wish to see attachments that a signer has uploaded, you must retrieve the document, which will have both sender and signer attachments included.\n\n## Overriding Signer Name\n\nFor signature_requests and quick_create API endpoints, it is now possible to specify the signer's name without having to explicitly define first and last name in two separate parameters (first_name and last_name), making it easier to define a signer's name from other data or user identity sources where the names are themselves not split out.\n\nFunctionally, setting full_name will override first_name and last_name **for a given non-managed user (signer)**, although first_name and last_name will continue to exist in the user record. If present, **full_name will replace all places in the UI presented as part of generating a signature request with the signature_requests or quick_create API**.\n\n## Customizing the Core Signature Email\n\nThe `subject` and `message` fields can be used to customize the email sent to a signer. The `message` may contain the following html tags:\n- `<a>`\n- `<abbr>`\n- `<acronym>`\n- `<b>`\n- `<blockquote>`\n- `<code>`\n- `<em>`\n- `<i>`\n- `<ul>`\n- `<li>`\n- `<ol>`\n- `<strong>`\n\nBe aware that when the HTML to text ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed.\n\nWhen the `from_email_name` field is provided, this name will be used in the `From` email header as `{from_email_name} <no-reply@opentext.com>`. By default `Sender Name (sender@email.com) | OpenText Core Signature` is used as the `from_email_name`.\n\n## Resend the OpenText Core Signature email(s)\n\nThe [resend](#operation/signature_requests_resend) endpoint can be used to resend the signature request email as a reminder to all signers who didn't sign yet and have previously received an email to sign the document. There is a minimum wait period of 10 minutes between sending the initial signature request and resending.\n\n## Cancel a Signature Request\n\nA signature request that has not been fully signed or declined can be cancelled using the [cancel endpoint](#operation/signature_requests_cancel). By doing so, all signers that have not yet signed will be unable to open and sign the document anymore.\n\n## Download a Signed Document\n\nWhen a signature request has been signed the `pdf` field on the document resource will be filled with a link to download the signed PDF. The signing log PDF can be downloaded from the `pdf` field contained within the `signing_log` object field on the document resource.\n\nThe recommended way to download the files and store them in your own systems is to setup the [Events callback](#section/Events/Events-callback) functionality and have your application download the files on the `signed` (Document signed) event. Please note that the download links expire and are regenerated on every API call / events callback, so download the files right away when needed.\n\n## Public Linking a Signed Document\n\nWhen creating a document, you can optionally provide the `link_expire_days` field to allow unauthenticated access to signers after the signature request has finished. This will allow signers to click the download links for the document and signing log and be able to access them without signing in to Core Signature for a number of days, after which this option will expire. If no value is set, the signers will also need to be registered Core Signature users in order to access the document and signing log.\n\n## Deleting Documents\n\nTo delete a document, the owner of the document must send a DELETE request to the [document resource url](#operation/documents_delete). By default, you cannot delete a document for which there is an unfinished signature request. If you wish to cancel the signature request and delete the document, you may use the `force_delete` field when deleting the document.\n\nNote that for completed documents, a deletion only makes the document unavailable for the user who requested the deletion (usually the sender). For all signers that do not have a registered OpenText Core Signature account, a grace period is started to give them a chance to download the signed document. After this grace period the document will be deleted for these signers automatically. When all signers have requested a delete (manually, automatically, or via the API) or do not have a registered OpenText Core Signature account and the grace period has lapsed, the document will be fully deleted.\n\nIf a signer is also an API user, they can send a DELETE request on the document; however this only soft deletes the document. The signer will lose access to the document (as if it's been deleted), and they will decline the document if it has an active signature request which they have yet to action.\n\n### Automatic Document Deletion\n\nTo automatically delete a document, the `auto_delete_days` field on a document can be set to a number of days after which a finished document (signed / cancelled / declined) will be automatically deleted. The behaviour is the same as doing a DELETE on the document resource X number of days after the document is finished. When the document is scheduled to be deleted, the `auto_delete_after` will hold the date after which it will be deleted.\n\n## Redirecting After Signing\n\nA `redirect_url` field is available both on a signature request as well as individual signers. The signature request redirect URL acts as a default for the document, and will be overridden by an individual signer's redirect URL. When specified, Core Signature will redirect to this URL after the document is signed.\n\n**Note** If no `redirect_url` is specified by the sender on signature request level or signer level, product [defaults](#section/Defaults) are followed. To learn more about redirect_url default configuration, refer to [Signature-Completion-Redirect-URL](#section/Defaults/Signature-Completion-Redirect-URL) API endpoint. In this case, it is expected to see a `null` value for redirect_url field returned in the signature-request API response. Signers will be redirected as per the defaults after completing a signing flow.\n\nGiven below is the behaviour of the redirect_url when signature request may have in-person and non-in-person signers.\n\nSignature Request has in-person signers\n1. If redirect_url is set on any non-last in-person signers or sender, then that redirect_url will be ignored.\n\n2. If redirect_url is set on the last in-person signer, then that redirect_url will be called, once the last in-person signer has signed the document.\n\n3. If redirect_url is set at the document level then redirect_url will be called only after the last in-person signer has signed the document.\n\n4. For non in-person signers, if redirect_url is set on signer level or at document level , those non-in-person signers will be redirected to that url (document level redirect_url used if not set at signer level), once they log-in to Core Signature and sign the document.\n\nSignature Request has no in-person signers\n1. If redirect_url is set on the sender, then that redirect_url will be called once the sender signs the document.\n\n\n## Disabling Signing Tools / Features\n\nIt is possible to disable certain tools and features signers have when signing a document. The following flags can be set to `true` when creating a signature request to disable these features.\n\n- `disable_checkbox`: Disable adding a checkbox placeholder\n- `disable_text`: Disable adding a text placeholder\n- `disable_date`: Disable adding a date placeholder\n- `disable_attachments`: Disable uploading / adding attachments\n- `disable_text_signatures`: Disable usage of signatures generated by typing (text)\n- `disable_upload_signatures`: Disable usage of uploaded signatures (images)\n\nPlease note that we **strongly discourage** disabling features, as these are carefully chosen for optimal usability of the Core Signature product.\n\n## Required Attachments\n\nTo require signers to upload attachments (like a passport picture), the `required_attachments` field can be used. This field takes an array of objects with a `name` parameter. Example: `required_attachments: [{\"name\": \"Passport\"}]`\n\n## Templates\n\nIn the frontend application it is possible to create templates. These templates can be found in the [templates endpoint](#tag/templates). In order to send a signature request using a template, reference the URL of the template in the `template` field. This works in both the [documents](#tag/documents) and the [signature-request-quick-create](#tag/signature-request-quick-create) endpoints.\n\n## Automatic Reminders\nTo enable automatic reminders, set the `send_reminders` boolean to `true` on the [signature request resource](#tag/signature_requests). When enabled, Core Signature will automatically remind signers to sign a document.\n\n# Preparing a Document\n\nUsing the OpenText Core Signature frontend web application you have the option to \"prepare\" a document. This helps the receiver as they can only sign the document at the designated place(s) on the document.\n\nUsing the API you can also **prepare a document by using tags** to specify where a signer needs to add a date, text, checkbox, and/or a signature.\n\nTags need to start with `[[` and end with `]]`. The tag data is separated by a pipe `|`. The first letter of the tag represents the tag type and must be one of the following:\n\n- `t` for text\n- `d` for date\n- `s` for signature\n- `c` for checkbox\n\nThe second piece of data is an integer representing the index of the signer for which this placeholder is intended. The numbers in the tags are used to make distinctions between the signers and group multiple tags (input fields) to one specific signer.\n\nThe template tags are assigned to the order in which the email addresses are added to the contact field, and are not the same as the order of signing. This means that for example `s|1` can be the first or last signer depending on what you specified in the order of signing (if used of course).\n\nAs the sender is always the first email address added, meaning the sender is always `s|0`. If the sender does not need to add a signature or other data input, then `s|0` will be assigned to the next in line.\n\nMismatches in the amount of declared placeholders and available signers will be silently ignored. The extra placeholders will not show up if more than the amount of signers **OR** signers just get an unprepared document to sign when there were no placeholders declared for them.\n\nExamples:\n\n```\n[[s|0                 ]]  // A signature for the first signer OR the owner/sender when they need to sign.\n[[c|0                 ]]  // A checkbox placeholder for the first signer\n[[d|1                 ]]  // A date input placeholder for the second signer\n[[t|2                 ]]  // A text input placeholder for the third signer\n```\n\nThe height / width (font size) and the position of the tag in your document matters. Also, **since you do not want the placeholder tag to show up in the document**, you need to make the font color match the background.\n\nNote that the font chosen can make a difference in the bounding box margins and position. For most fonts the top margin will be bigger, as desired. For this reason make sure to **leave enough space or double the line height** in order for the placeholder to not overlap the line above.\n\n## Tag modifiers\nThere are multiple tag modifiers available to further customize the tags. The following key / value pairs can be used after the signer index.\n\n- `r` to make a placeholder required: `1` / `true` for required, `0` / `false` for not required\n- `m` to make a text placeholder multiline: `1` / `true` for multiline, `0` / `false` for single line (default)\n- `n` to set a label / name on a text placeholder: 'a string'\n- `p` to prefill text / dates on a text / date placeholder: 'a string'. For a date placeholder this can also be set to `0` / `false` to not prefill the current date.\n- `id` to assign an `external_id` to the placeholder: \"your_id\" (see also [Retrieving signer input](#section/Preparing-a-document/Retrieving-signer-input) and [Prefill tags](#section/Preparing-a-document/Prefill-tags-templates))\n\nExamples:\n```\n[[c|0|r:1                                ]]  // A checkbox that cannot be skipped (needs to be checked or not)\n[[c|0|r:0                                ]]  // A checkbox that can be skipped\n[[c|0|p:1                                ]]  // A checkbox that is checked by default (can be changed)\n[[d|0|n:Birth date|p:0                   ]]  // A date that is not prefilled with the date of signing and has the label 'Birth date'\n[[t|0|n:City|p:New York|id:customer_city ]]  // A text input placeholder with the label 'City', prefilled with the text 'New York' and an external_id of 'customer_city' that will be available later in the 'inputs' field (see: 'Retrieving signer input') and can be used to prefill the tag using prefill_tags on the document resource (see: 'Prefill tags').\n```\n\nNote that placeholder names / prefilled data can get quite long. If this impacts the placeholder width/height you can choose to make the font between the opening `[[` and closing `]]` tags (really) small. The tag configuration does not need to be human readable as the text is extracted from the PDF format directly.\n\n## Prefill Tags / Templates\n\nInstead of generating a new document and using the `p` tag modifier to prefill signer input data, it is also possible to use `prefill_tags`. For this to work all tags need to have an `id` as this is needed to reference the tag.\n\nExample:\n\n```\n[[c|0|id:checkbox_1                      ]]  // Should be checked\n[[c|0|id:checkbox_2                      ]]  // Should not be checked\n[[d|0|n:Birth date|id:birth_date         ]]  // Should be prefilled with the birth date of the signer\n[[t|0|n:City|id:customer_city            ]]  // Should be prefilled with 'New York'\n```\n\nWhen a document contains the tags above, you can prefill them using the `prefill_tags` field on document by referencing the 'id'.\n\n```json\n\"prefill_tags\": [\n    {\"external_id\":\"checkbox_1\", \"checkbox_value\":\"true\"},\n    {\"external_id\":\"checkbox_2\", \"checkbox_value\":\"false\"},\n    {\"external_id\":\"birth_date\", \"date_value\":\"1984-12-31\"},  // must be in ISO format ([YYYY]-[MM]-[DD])\n    {\"external_id\":\"customer_city\", \"text\":\"New York\"}\n]\n```\n\nIf you are using templates created from within the Core Signature app, you can also set the `external_id` of a template tag in the advanced section when editing a tag.\n\nNote that it's also possible to add these tags when using the [OpenText Core Signature JS client](#section/Frontend-API/OpenText-Core-Signature-JS-Client-(beta)) and the [Frontend API](#section/Frontend-API).\n\nFor more information & examples of how to use prefill tags, see [this document](../../../../static/demo/signature_request_tags_3_signers.pdf).\n\n## Prepare Using the Web Interface\n\nIt is also possible to have the sender of a signature request prepare the document before sending the request out. To use this functionality, set the `is_being_prepared` flag on the signature request resource to `true`. If not previously set for the sender you will need to set `embed_url_user_id` to get the\n`prepare_url` to be generated. Should you like to have a seamless login flow just append `?auth_provider=<your_auth_provider>&site=<your_tenant_id>` to the end of the `prepare_url`. For OT2, the `auth_provider` is `opentext_ot2`, and the `tenant_id` is the ID for the application being built as defined in OpenText Admin Center. When `is_being_prepared` is set to `true`, the signature request will not be sent out to the recipient(s) and the `prepare_url` field will be set to a URL where your application can redirect the sender to prepare the document. Please note that if the sender does not have an Core Signature account they will be asked to verify their email after preparing the document.\n\nYou may wish to have the sender redirected after sending the signature request using the web interface (back to your application, for example). To do this, append a `redirect_url` parameter to the `prepare_url` returned when creating the signature request (e.g `{prepare_url}?redirect_url=https://your.application.com/`). Be sure to include the full URL, including protocol, when using this parameter. Note that this will take precedence over in-person signing, and the sender will always be redirected after sending.\n\nExample:\n\n```json\n{\n    \"file_from_url\": \"https://sign.core.opentext.com/static/demo/signature_request_demo_document.pdf\",\n    \"who\": \"mo\",\n    \"is_being_prepared\": \"true\",\n    \"signers\": [{\"email\": \"you_the_sender@yourcompany.com\", \"embed_url_user_id\": \"unique_id_of_your_choice\"}, {\"email\": \"otcoresupport@opentext.com\"}]\n}\n```\n\nNote that it's possible to include tags in the document. The sender will be able to change / remove them.\n\n## Retrieving Signer Input\n\nAll text, date, and boolean inputs of signers after a signer signs are available in the `inputs` field of a signer. This can be helpful if you need to update your systems based on data signers add to a document.\n\n```json\n\"inputs\": [\n    {\n        \"type\": \"d\",                    // 's' (signature input), 't' (text input), 'd' (date input) or 'c' (checkbox input)\n        \"page_index\": 0,                // Index of the page on which this input resides\n        \"text\": \"09-25-18\",             // Text as seen on the document (only for date and text inputs)\n        \"checkbox_value\": null,         // true or false (checkbox inputs only)\n        \"date_value\": \"2018-09-25\",     // The date in ISO format ([YYYY]-[MM]-[DD])\n        \"external_id\": null             // (Optional) The external ID assigned to a tag (helpful if you need to identify a specific input. See 'Tag Modifiers')\n    }\n]\n```\n\n# Accessing the Core Signature UI\n\nThe Core Signature UI is fully available to users who are integrating with the API via OT2. As described above in the [Prepare using the web interface](#section/Preparing-a-Document/Prepare-Using-the-Web-Interface) section, to log in to the UI you simply hit Core Signature with the URL parameters `?auth_provider=<your_auth_provider>&site=<your_tenant_id>`.\n\nBelow you can find a comprehensive list of all of the Core Signature UI pages you are able to navigate to, along with their purpose.\n\n<table>\n    <tr>\n        <th>Page URL</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>/document/UUID/UUID/</td>\n        <td>The document signing page. This should only be accessed via recommended flows, like preparing with a prepare_url or signing with an embed_url.</td>\n    </tr>\n    <tr>\n\t\t<td>/document-status/UUID/</td>\n        <td>See detailed information about the status and history of a specific document</td>\n\t</tr>\n\t<tr>\n\t\t<td>/documents</td>\n        <td>Access your in-flight and completed signature requests, as well as documents waiting on you to action</td>\n\t</tr>\n    <tr>\n\t\t<td>/privacy</td>\n        <td>View the Opentext Core Signature privacy policy.</td>\n\t</tr>\n    <tr>\n\t\t<td>/signatures</td>\n        <td>Manage your personal signatures. These show up under the Saved tab of the add signature modal when signing.</td>\n\t</tr>\n    <tr>\n\t\t<td>/templates</td>\n        <td>Access your saved templates, modify existing ones and create a new one for easy re-use in future signature requests.</td>\n\t</tr>\n    <tr>\n\t\t<td>/terms</td>\n        <td>View the Opentext Core Signature terms & conditions.</td>\n\t</tr>\n</table>\n\n# Events\n\n## Event Polling\n\nIf you wish to poll for events, you can do so by creating GET requests for the [Events resource](#tag/events). This endpoint supports queries for several parameters, enabling you to poll for specific events.\n\nHowever, it should be noted that polling is not the optimal method to retrieve event-based data in asynchronous flows like signing a document. We recommend using [Event Callbacks](#section/Events/Event-Callbacks) or [Webhooks](#section/Events/Event-Webhooks) to react to events, as polling\ncan in rare cases lead to inconsistent results if a document is being processed when the polling occurs.\n\n## Event Callbacks\n\nIn order to receive the `events` as a callback to your application a **callback url** needs to be set. This can be set on a per-document basis, or by creating a [webhook](#tag/webhooks). To set this for a document, you can set the callback url using the `events_callback_url` field when [creating a document](#operation/documents_create) or when using the [signature-request-quick-create endpoint](#tag/signature-request-quick-create).\n\nIt is also possible to change the **callback url on a per document basis**. To use this functionality you can set the callback url using the `events_callback_url` field when [creating a document](#operation/documents_create).\n\nWhen set, Core Signature will POST events as `application/json` to this endpoint. Your endpoint should return a `200 OK` response. OpenText Core Signature will retry delivering events in the case of a timeout or a 500 response from your server according to a set schedule. The wait times between retries are shown below.\n\n<table>\n    <tr>\n        <th>Retry Attempt #</th>\n        <th>Delay Before Attempting</th>\n    </tr>\n\t<tr>\n\t\t<td>1</td>\n\t\t<td>1 minute</td>\n\t</tr>\n    <tr>\n\t\t<td>2</td>\n\t\t<td>1 minute</td>\n\t</tr>\n    <tr>\n\t\t<td>3</td>\n\t\t<td>2 minutes</td>\n\t</tr>\n    <tr>\n\t\t<td>4</td>\n\t\t<td>3 minutes</td>\n\t</tr>\n    <tr>\n\t\t<td>5</td>\n\t\t<td>5 minutes</td>\n\t</tr>\n    <tr>\n\t\t<td>6</td>\n\t\t<td>8 minutes</td>\n\t</tr>\n    <tr>\n\t\t<td>7</td>\n\t\t<td>13 minutes</td>\n\t</tr>\n    <tr>\n\t\t<td>8</td>\n\t\t<td>21 minutes</td>\n\t</tr>\n    <tr>\n\t\t<td>9</td>\n\t\t<td>34 minutes</td>\n\t</tr>\n    <tr>\n\t\t<td>10</td>\n\t\t<td>55 minutes</td>\n\t</tr>\n    <tr>\n\t\t<td>11</td>\n\t\t<td>2 hours</td>\n\t</tr>\n    <tr>\n\t\t<td>12</td>\n\t\t<td>4 hours</td>\n\t</tr>\n    <tr>\n\t\t<td>13-27</td>\n\t\t<td>1 day</td>\n\t</tr>\n</table>\n\n### Callback Validation\n\nWhen you provide a `events_callback_url` we attempt a simple POST request to ensure that the url is reachable by our system. If the url is not reachable you will receive an error message in the response payload.\n\n### Event Types\n\nBy default, events will be generated as a document and its signature request progress through a signature request flow. The following event types are available:\n- `convert_error`: Document conversion error\n- `converted`: Document converted\n- `sent`: Document sent\n- `declined`: Document declined\n- `cancelled`: Document cancelled\n- `signed`: Document signed\n- `signer_signed`: Signer signed\n- `signer_email_bounced`: Signer email bounced\n- `signer_viewed_email`: Signer viewed email\n- `signer_viewed`: Signer viewed document\n- `signer_forwarded`: Signer forwarded document\n- `signer_downloaded`: Signer downloaded\n- `signrequest_received`: Signature request received\n\nIt should be noted that only the signer-specific events (`signer_signed`, `signer_email_bounced`, etc) will have signer information in the event.\n\nEvent status codes:\n- `ok`: ok\n- `error`: error\n\nThe event status will be `error` for the following events:\n- `convert_error`\n- `signer_email_bounced`\n\nThe document status field can have the following codes:\n- `co`: converting\n- `ne`: new\n- `se`: sent\n- `vi`: viewed\n- `si`: signed\n- `do`: downloaded\n- `sd`: signed & downloaded\n- `ca`: cancelled\n- `de`: declined\n- `ec`: error converting\n\nExample callback request:\n```json\n{\n    \"document\": {\n        \"api_used\": true,\n        \"attachments\": [],\n        \"external_id\": \"your_id_of_this_document\",\n        \"file_from_url\": \"url where OpenText Core Signature downloaded the document, if this functionality was used\",\n        \"name\": \"document.pdf\",\n        \"pdf\": null,\n        \"prefill_tags\": [],\n        \"security_hash\": null,\n        \"signing_log\": null,\n        \"signrequest\": null,\n        \"status\": \"co\",\n        \"template\": null,\n        \"url\": \"https://sign.core.opentext.com/api/v1/documents/f2bac751-4fa1-43f1-91de-a1b8905c239a/\",\n        \"user\": null,\n        \"uuid\": \"f2bac751-4fa1-43f1-91de-a1b8905c239a\"\n    },\n    \"event_hash\": \"89365cda10349ced9c3fd9c457372b37ad2e723c5b9f11a4d0b2c16724d8a2e7\",\n    \"event_time\": \"1537889008\",\n    \"event_type\": \"converted\",\n    \"signer\": null,\n    \"status\": \"ok\",\n    \"timestamp\": \"2018-09-25T15:23:28.836457Z\",\n    \"uuid\": \"ffffd4dd-89c7-4133-ba2d-960f65c8d395\"\n}\n```\n\nAll event data can also be fetched using the REST API [Events resource](#tag/events). This is a helpful tool to see how the data is structured when developing your application.\n\nYou can check the authenticity (that the event really came from Core Signature) by generating and comparing the `event_hash` that comes with the event. The `event_hash` is generated with the HMAC algorithm using your Token as a key in SHA256 digest mode.\n\nOpenSSL shell example:\n```bash\necho -n \"${event_time}${event_type}\" | openssl dgst -sha256 -hmac \"YOUR_TOKEN_HERE\"\n```\n\nWhich expands to:\n```bash\necho -n \"1537889008converted\" | openssl dgst -sha256 -hmac \"YOUR_TOKEN_HERE\"\n89365cda10349ced9c3fd9c457372b37ad2e723c5b9f11a4d0b2c16724d8a2e7\n```\n\nAlways use **SSL enabled endpoints**!\n\n## Event Webhooks\n\nTo receive only specific event callbacks, webhook subscriptions can be created. The resource takes an `event_type`, `callback_url` and optionally a `name` to easily identify what the webhook is used for. The [webhooks resource](#tag/webhooks) details all possible event types to which you can subscribe. Webhooks also receive the `signrequest_received` event, which can be used to notify users that they have received a new signature request.\n\n## Disable all Core Signature Email Events\n\nIt is possible to disable all Core Signature status emails as well as the email that contains the signed documents. When using this functionality, the following events will not generate a Core Signature email:\n\n- `sent`: Document sent\n- `signer_email_bounced`: Signer email bounced\n- `signer_viewed_email`: Signer viewed email\n- `signer_viewed`: Signer viewed document\n- `signer_signed`: Signer signed document\n- `signer_downloaded`: Signer downloaded document\n- `signed`: Document signed\n- `downloaded`: Document downloaded\n- `declined`: Document declined\n- `cancelled`: Document cancelled\n\nTo enable this feature set the `disable_emails` flag on the [signature request resource](#tag/signature_requests) to `true`.\n\nNote that event emails will only be disabled if there is an `events_callback_url` available for the document or a webhook has been registered for the event type, as your application is expected to notify users instead of Core Signature. If you are using webhooks, you need to register a webhook for each event type for which you do not wish to receive emails. The initial Core Signature email (which contains the link to sign) can only be disabled by using the [Embed url](#section/Additional-signing-methods/Embed-url) functionality.\n\n# Frontend API\n\nAnother option to help your users send signature requests is using the \"frontend\" API. This involves no token and is merely used to \"prefill\" the OpenText Core Signature box found at the homepage for your users.\n\nGET params for prefilling the box:\n```\napi=v1                                                      // The version of the API to use\nwho=mo                                                      // mo='me & others', m='only me', o='only others'\nsigners=first_email@example.com,second_email@example.com    // Emails of 'signers', comma separated\nfrom_email=you@yourcompany.com                              // Email of the person sending the signature request\ndoc_url=https%3A%2F%2Fsign.core.opentext.com%2Fstatic%2Fdemo%2Fsignature_request_demo_document.pdf  // The URL from which Core Signature can download the document\n```\n\nExample resulting URL:\n```\nhttps://sign.core.opentext.com/#/send-for-signature?api=v1&who=mo&signers=tech-support@opentext.com&doc_url=https%3A%2F%2Fsign.core.opentext.com%2Fstatic%2Fdemo%2Fsignature_request_demo_document.pdf\n```\n\nNote that you can also use prefill tags here by adding the parameter `prefill_tags`. The value should be Base64 encoded JSON. A JavaScript example:\n```javascript\nbtoa(JSON.stringify([{external_id: 'customer_city', text: 'New York'}]));\n// the output can be used with the parameter:\n// prefill_tags=W3siZXh0ZXJuYWxfaWQiOiJjdXN0b21lcl9jaXR5IiwidGV4dCI6Ik5ldyBZb3JrIn1d\n```\n\n## OpenText Core Signature JS Client\nTo use the Core Signature JavaScript library, include the following in your page:\n```html\n<script src=\"https://sign.core.opentext.com/ot-core-signature-js/v1/ot-core-signature-js.min.js\"></script>\n```\n\nOr, for async loading use:\n```html\n<script>\n!function(t,e,n,i){var s=function(e,n){t.CoreSignature&&t.CoreSignature.loaded||setTimeout(function(){t.CoreSignature.init(e,n)},50)};t.CoreSignature=t.CoreSignature||{loaded:0,init:s};var o=\"https:\"==e.location.protocol?\"https://\":\"http://\",u=e.createElement(\"script\");u.async=!0;var c=e.scripts[0];u.src=o+\"sign.core.opentext.com/ot-core-signnature-js/v1/ot-core-signature-js.min.js\",c.parentNode.insertBefore(u,c),t.CoreSignature.init(n,i)}(window,document,{\n  // this initial configuration is optional, may also be undefined\n}, function (CoreSignature) {\n  // This callback is optional, it may also be undefined\n  // The OpenText Core Signature library is loaded and also passed as first argument\n  // Execute your code here...\n});\n</script>\n```\n\nThe library uses [UMD](https://github.com/umdjs/umd) (Universal Module Definition).\n\n### Usage\n```javascript\n// same as the frontend API GET parameters, these are all optional. We recommend setting auth_provider and site to show the proper login.\nconst conf = {\n    api: 'v1',\n    who: 'mo',\n    signers: 'first_email@example.com,second_email@example.com',\n    close: true,    // Close the popup when done. Default: true\n    // or use next:\n    next: '',       // Redirect to this URL when done signing\n    auth_provider: 'opentext_ot2',\n    site: 'your_ot2_tenant_id'\n}\n// these are also optional, the popup will be centered in the window opening the popup\nconst popup_conf = {\n    width: 460,  // Width of the popup in pixels. Default: 460\n    height: 600, // Height of the popup in pixels. Default: The height of the window opening the popup\n}\n\n// To open a specific document, first create a document using the REST API with your backend\nconst doc_uuid = 'the-uuid-of-the-document';\nCoreSignature.browser.openSetupPopupWithDocUUID(doc_uuid, conf, popup_conf);\n\n// Create a document from a URL\nconst doc_url = 'https://sign.core.opentext.com/static/demo/signature_request_demo_document.pdf'\nCoreSignature.browser.openSetupPopupWithDocURL(doc_url, conf, popup_conf);\n\n// Create a document from a template UUID\nconst template_uuid = 'the-uuid-of-the-template'\nCoreSignature.browser.openSetupPopupWithTemplateUUID(template_uuid, conf, popup_conf);\n\n// Open a popup using custom params\nconst popup = CoreSignature.browser.openPopup(conf, popup_conf);\n\n// If your document contains template tags / placeholders that have an 'external_id',\n// it is possible to 'prefill' these for a particular signature request by updating your conf object:\nconf.prefill_tags = [{external_id: 'customer_city', text: 'New York'}];\n// Now all template tags with this external_id will be prefilled with 'New York'\n\n// All popup openers return an instance of the popup to which event callbacks can be registered (they can be chained)\n// The possible events are: 'opened', 'sent', 'signed', 'declined', 'finished', 'closed', 'any'\n// Note that 'sent', 'finished' and 'closed' can be called fast after each other when the popup autocloses (close: true)\n// When sending a signature request and the sender also needs to sign, you can receive the 'signed' or 'declined' event\n// after the 'sent' event (signature request created).\n// When the sender is done (sending and possibly siging) the 'finished' event is fired.\npopup = popup.on('closed', function (event_type, payload, event) {\n    // This would fire when the popup closes, allowing you to update your page on the event\n    console.log(event_type, payload, event);\n})\n\n// Shortcut to fire on all events ('any')\npopup.onAny(function (event_type, payload, event) {\n    // This would fire on all events\n    console.log(event_type, payload, event);\n})\n\n// To set a default configuration for all future calls\nCoreSignature.browser.setConfig({\n    // Add your configs here\n});\n\n// When creating a document for your users using our REST API and opening that document in the popup in response to clicking a button,\n// you might need to open the popup before you know the UUID of the document from your backend.\n// This is to prevent popup blockers from kicking in when doing async work before we open a popup.\n// For this use case, you can use the `openLoadingPopup` helper on click and use that already opened popup to load a document later.\n\n$('button#your_button').on('click', function () {           // Using jQuery in the following example (not required for ot-core-signature-js)\n    var popup = CoreSignature.browser.openLoadingPopup();   // Open a popup on button click right away\n    popup.onAny(function (event_type, payload, event) {\n        // All listeners created on the loading popup will also be registered on the popup events fired later after the call\n        // CoreSignature.browser.openPopupForDocUuid...\n        console.log('Event received: ' + event_type + ', payload: ' + JSON.stringify(payload);\n    });\n    // Async call to some endpoint on your backend that creates a document using the REST API.\n    $.post('/your-endpoint-to-create-a-document', {some: 'data'}).then(function(response){\n        // Instead of opening a new popup we use the one that is 'loading', as otherwise\n        // most browser popup blockers will block opening a new window here (the opening of the window comes too late after the user click).\n        // We assume here your endpoint returns the UUID of the document created in the response\n        CoreSignature.browser.openPopupForDocUuid(response.document_uuid, conf, {sr_popup: popup});\n        // `{sr_popup: popup}` makes the library use an existing popup instead of creating a new one\n    });\n});\n\nCoreSignature.browser.openPopupForDocUrl('https://sign.core.opentext.com/static/demo/signature_request_demo_document.pdf');\n```\n\n# Additional Signing Methods\n\n## Embed URL\n\nNormally, Core Signature will send the signature request email to signers containing a personal link to sign a document. This is how Core Signature validates an email address, and is the preferred signature request flow. However, if your application requires a continuous flow (in a sales flow for example) it is possible to generate an `embed_url` and redirect a signer to that link. Combining this with a `redirect_url` allows a continuous flow to be achieved.\n\nDoing this moves the responsibility of identifying an email address / user to your application. This also shows in the signing log, as Core Signature cannot guarantee that a document is signed by someone having access to an email address.\n\nTo generate the `embed_url` you need to declare the ID of the logged in user in YOUR application in the `embed_url_user_id` field. This ID will also show in the signing log for any users with unverified credentials.\n\nThe generated `embed_url` can only be used until the document is signed. Note that you are able to combine signers with and without a generated `embed_url`. The `order` field also behaves as you would expect. For example, if the first signer (order = 0) has an `embed_url` generated and the second (order = 1) not, the second signer will only receive the signature request email when the first one has signed.\n\nWhen using this `embed_url` in an `iframe`, you can add any of the following url parameters to hide some elements in the header:\n\n- `hide_decline=1` (hide the option to decline)\n- `hide_forward=1` (hide the forward button)\n- `hide_login=1` (hide the login button)\n- `hide_logo=1` (hide the logo)\n- `hide_title=1` (hide the document title in the header)\n\nBe aware that the `embed_url` may already contain other URL parameters. Also note that hiding the login button does not disable the login prompt for signers that already have a Core Signature account. This cannot be disabled.\n\nIf you also want to disable all other Core Signature emails, see [Disable all OpenText Core Signature email events](#section/Events/Disable-all-Core-Signature-Email-Events).\n\n## In Person Signing\n\nIn person signing can be achieved with the API by using the [Embed url](#section/Additional-signing-methods/Embed-url) in your signature requests. This allows for instant generation of a signing link, and in combination with the `approve_only` field also allows for in-person approving.\n\nNote that each in-person approving signer will need to have an `embed_url_user_id` set. The following is an example of such signer configuration.\n\n```json\n{\n    \"who\": \"mo\",\n    \"signers\": [\n        {\n           \"email\": \"signer@company.com\",\n           \"embed_url_user_id\": \"your ID\",\n           \"approve_only\": true\n        }\n    ]\n}\n```\n\nIn some cases, your application might want to generate one URL for both the sender of the document and the receiver to sign a document immediately after each other in person.\n\nThis can be achieved by the following signer configuration example, where you can redirect the user to the `embed_url` of the sender. After the sender has signed they will be redirected to the next `in_person` signer. Since an email will not be sent for an in person signer, you must use the `embed_url` to generate the signing link for the first signer. Then, the UI will handle the document as each in person signer signs in sequence.\n\n```json\n{\n    \"who\": \"mo\",\n    \"signers\": [\n        {\n           \"email\": \"you@yourcompany.com\",\n           \"order\": 1,\n           \"embed_url_user_id\": \"your ID\",\n        },\n        {\n            \"email\": \"otcoresupport@opentext.com\",\n            \"order\": 2,\n            \"in_person\": true\n        }\n    ]\n}\n```\nIt should be noted that when you have more than one in person signer, the first signer needs to have an `embed_url_user_id` set. If the sender is not of the signers, then the first in person signer also needs to have an `in_person` attribute set. The following configuration can be used with only others case.\n\n```json\n{\n    \"who\": \"o\",\n    \"signers\": [\n        {\n           \"email\": \"first+signer@company.com\",\n           \"embed_url_user_id\": \"your ID\",\n           \"in_person\": true\n        },\n        {\n           \"email\": \"second+signer@company.com\",\n           \"in_person\": true\n        }\n    ]\n}\n```\n\nThis way you can redirect the user to the `embed_url` of the signer. After the signer has signed they will be redirected to the next `in_person` signer. Since an email will not be sent for an in person signer, you must use the `embed_url` to generate the signing link for the first signer. Then, the UI will handle the document as each in person signer signs in sequence.\n\n# Integrations\n\nThe Core Signature API has the ability to support specific behaviours or logic you may require for your integration with our service. If you require additional functionality, please reach out to your representative.\n\nOnce an integration is established, the specific behaviour can be achieved by supplying your integration name when creating a document. By providing the integration `type` along with any necessary accompanying data, we can handle and apply any additional logic.\n\nFor example, you may desire for the sender's department to be shown in signature request emails in addition to their name. In that case, an implementation might include providing a `department` field to the API. The request to create a document would then include the following field, along with the regular fields:\n\n```json\n\"integrations\": [{\n    \"integration_data\": {\n        \"type\": \"your_integration_name\",\n        \"department\": \"department_name\"\n    }\n}]\n```\n\n# Branding\n\nOur customers have the ability to customize their branding using the Core Signature API. If a custom branding has been set for a tenant, that branding will always be used over the default Core Signature branding. It should be noted that only a tenant admin has the ability to make changes using this API.\n\n**NOTE:** Branding is always rendered in real time for users. So, if you modify the branding for your tenant, any in-flight signature requests will start showing the new branding in subsequent emails, UI pages, etc even if the branding was different when it was sent.\n\n## Product Logo\n\nTo update product logo using our API we support the following image types:\n\n`['jpg', 'jpeg', 'png', 'tiff', 'gif', \u2018bmp\u2019]`\n\n\nAny other image type will return a `400` Bad Request. The logo image should be a file in a multipart/form-data\nformat. Uploading file via URL is not supported. If an invalid request encoding is used, a `400` with the error message `ERROR_FILE_PARSING_FAILED` will be returned. The expected dimensions for the logo image is `480x47` pixels.\nAll images uploaded in our API will be rescaled to this size while preserving its original aspect ratios.\n\n## Product Name\nWe provide the ability to customize brand name through this API. Your custom product name will be displayed in document viewer, emails, and tool tip help texts appended with `(Powered by OpenText Core Signature)`. We support `product_name` input to be 100 characters long.\n\n# Defaults\n\nSimilar to branding, several functional aspects of the signing flow can be customized to make your signature flows as seamless as possible given your product's specific requirements.\n\n**NOTE:** Like branding, defaults are used in real time, so if you modify your defaults before a signer actions a document, they will see the new behaviours you've set.\n\n## Signer Login Behaviour\nThe login behaviour for signers can be customized via `login_modal` so that all signers have a frictionless signing experience. When set to `optional`, the login modal will appear for signers to choose if they want to login or skip and sign without authenticating. When set to `required`, signers **must** log in before being able to sign the document. When set to `bypassed`, upon accessing the document (including via clicking the signing link), signers will not see the login modal. Additionally, when the signer is in the signing UI they will not have the option to log in. The default behaviour is `optional`.\n\n## Signature Completion Redirect URL\nThe default URL to which signers will be redirected after successfully signing can be provided via the `signature_completion_redirect_url` field. This default can be overridden on a per-signature request basis when creating the signature request via `/signature-requests/` or `/signature-request-quick-create/`.\n",
        "version": "v1"
    },
    "host": "sign.core.opentext.com",
    "schemes": [
        "https"
    ],
    "basePath": "/api/v1",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "securityDefinitions": {
        "Token": {
            "in": "header",
            "type": "apiKey",
            "name": "Authorization"
        }
    },
    "security": [
        {
            "Token": []
        }
    ],
    "paths": {
        "/allowed-file-types/": {
            "get": {
                "operationId": "allowed-file-types_list",
                "summary": "Retrieve a list of allowed file types for upload",
                "description": "Quickly determine which file extensions are supported for uploads to Core Signature.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "allowed_file_types": {
                                    "description": "The list of allowed file types",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "allowed-file-types"
                ]
            },
            "parameters": []
        },
        "/brandings/": {
            "get": {
                "operationId": "brandings_list",
                "summary": "Retrieve a list of Branding customizations",
                "description": "",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Branding"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "brandings"
                ]
            },
            "post": {
                "operationId": "brandings_create",
                "summary": "Create a Branding customization",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "logo",
                                "product_name"
                            ],
                            "type": "object",
                            "properties": {
                                "logo": {
                                    "title": "Logo",
                                    "description": "The logo image to be uploaded",
                                    "type": "string",
                                    "format": "binary"
                                },
                                "help_link": {
                                    "title": "Help link",
                                    "description": "The custom help link to show signers when signing a document. The protocol must be included in the URL provided.",
                                    "type": "string"
                                },
                                "product_name": {
                                    "title": "Product name",
                                    "description": "The name of your product. This will be rendered as `{product_name}` (powered by OpenText Core Signature)`",
                                    "type": "string",
                                    "maxLength": 100
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "title": "Uuid",
                                    "type": "string"
                                },
                                "brand_context": {
                                    "title": "Brand context",
                                    "description": "The unique identifier for your branding customization.",
                                    "type": "string"
                                },
                                "from_email_address": {
                                    "title": "Email Domain",
                                    "description": "The from email address used when sending emails",
                                    "type": "string"
                                },
                                "help_link": {
                                    "title": "Help link",
                                    "description": "The custom help link to show signers when signing a document. The protocol must be include included in the URL provided.",
                                    "type": "string"
                                },
                                "logo": {
                                    "title": "Logo",
                                    "description": "The logo image to be uploaded.",
                                    "type": "string",
                                    "format": "binary"
                                },
                                "product_name": {
                                    "title": "Product name",
                                    "description": "The name of your product. This will be rendered as `{product_name} (powered by OpenText Core Signature)`",
                                    "type": "string",
                                    "maxLength": 100
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_NO_FILE_UPLOADED",
                                        "ERROR_DATA_IS_NOT_A_FILE",
                                        "ERROR_FILE_IS_NOT_AN_IMAGE",
                                        "ERROR_BRANDING_ALREADY_EXISTS",
                                        "ERROR_FILE_PARSING_FAILED",
                                        "ERROR_INVALID_URL_PROTOCOL",
                                        "ERROR_FIELD_REQUIRED",
                                        "ERROR_FIELD_MAY_NOT_BE_BLANK"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_NO_FILE_UPLOADED | ERROR_DATA_IS_NOT_A_FILE | ERROR_FILE_IS_NOT_AN_IMAGE | ERROR_BRANDING_ALREADY_EXISTS | ERROR_FILE_PARSING_FAILED | ERROR_INVALID_URL_PROTOCOL | ERROR_FIELD_REQUIRED | ERROR_FIELD_MAY_NOT_BE_BLANK"
                            }
                        }
                    }
                },
                "tags": [
                    "brandings"
                ]
            },
            "parameters": []
        },
        "/brandings/{uuid}/": {
            "get": {
                "operationId": "brandings_read",
                "summary": "Retrieve a Branding customization",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Branding"
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "brandings"
                ]
            },
            "put": {
                "operationId": "brandings_update",
                "summary": "Update a Branding customization",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "logo",
                                "product_name"
                            ],
                            "type": "object",
                            "properties": {
                                "logo": {
                                    "title": "Logo",
                                    "description": "The logo image to be uploaded",
                                    "type": "string",
                                    "format": "binary"
                                },
                                "help_link": {
                                    "title": "Help link",
                                    "description": "The custom help link to show signers when signing a document. The protocol must be included in the URL provided.",
                                    "type": "string"
                                },
                                "product_name": {
                                    "title": "Product name",
                                    "description": "The name of your product. This will be rendered as `{product_name}` (powered by OpenText Core Signature)`",
                                    "type": "string",
                                    "maxLength": 100
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "title": "Uuid",
                                    "type": "string"
                                },
                                "brand_context": {
                                    "title": "Brand context",
                                    "description": "The unique identifier for your branding customization.",
                                    "type": "string"
                                },
                                "from_email_address": {
                                    "title": "Email Domain",
                                    "description": "The from email address used when sending emails",
                                    "type": "string"
                                },
                                "help_link": {
                                    "title": "Help link",
                                    "description": "The custom help link to show signers when signing a document. The protocol must be include included in the URL provided.",
                                    "type": "string"
                                },
                                "logo": {
                                    "title": "Logo",
                                    "description": "The logo image to be uploaded.",
                                    "type": "string",
                                    "format": "binary"
                                },
                                "product_name": {
                                    "title": "Product name",
                                    "description": "The name of your product. This will be rendered as `{product_name} (powered by OpenText Core Signature)`",
                                    "type": "string",
                                    "maxLength": 100
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_CANNOT_UPDATE_DEFAULT_BRANDING"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_CANNOT_UPDATE_DEFAULT_BRANDING"
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_FILE_PARSING_FAILED",
                                        "ERROR_INVALID_URL_PROTOCOL",
                                        "ERROR_FIELD_REQUIRED",
                                        "ERROR_FIELD_MAY_NOT_BE_BLANK"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_FILE_PARSING_FAILED | ERROR_INVALID_URL_PROTOCOL | ERROR_FIELD_REQUIRED | ERROR_FIELD_MAY_NOT_BE_BLANK"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "brandings"
                ]
            },
            "patch": {
                "operationId": "brandings_partial_update",
                "summary": "Partially update a Branding customization",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "logo": {
                                    "title": "Logo",
                                    "description": "The logo image to be uploaded",
                                    "type": "string",
                                    "format": "binary"
                                },
                                "help_link": {
                                    "title": "Help link",
                                    "description": "The custom help link to show signers when signing a document. The protocol must be included in the URL provided.",
                                    "type": "string"
                                },
                                "product_name": {
                                    "title": "Product name",
                                    "description": "The name of your product. This will be rendered as `{product_name}` (powered by OpenText Core Signature)`",
                                    "type": "string",
                                    "maxLength": 100
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "title": "Uuid",
                                    "type": "string"
                                },
                                "brand_context": {
                                    "title": "Brand context",
                                    "description": "The unique identifier for your branding customization.",
                                    "type": "string"
                                },
                                "from_email_address": {
                                    "title": "Email Domain",
                                    "description": "The from email address used when sending emails",
                                    "type": "string"
                                },
                                "help_link": {
                                    "title": "Help link",
                                    "description": "The custom help link to show signers when signing a document. The protocol must be include included in the URL provided.",
                                    "type": "string"
                                },
                                "logo": {
                                    "title": "Logo",
                                    "description": "The logo image to be uploaded.",
                                    "type": "string",
                                    "format": "binary"
                                },
                                "product_name": {
                                    "title": "Product name",
                                    "description": "The name of your product. This will be rendered as `{product_name} (powered by OpenText Core Signature)`",
                                    "type": "string",
                                    "maxLength": 100
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_CANNOT_UPDATE_DEFAULT_BRANDING"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_CANNOT_UPDATE_DEFAULT_BRANDING"
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_FILE_PARSING_FAILED",
                                        "ERROR_INVALID_URL_PROTOCOL",
                                        "ERROR_FIELD_REQUIRED",
                                        "ERROR_FIELD_MAY_NOT_BE_BLANK"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_FILE_PARSING_FAILED | ERROR_INVALID_URL_PROTOCOL | ERROR_FIELD_REQUIRED | ERROR_FIELD_MAY_NOT_BE_BLANK"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "brandings"
                ]
            },
            "delete": {
                "operationId": "brandings_delete",
                "summary": "Delete a Branding customization",
                "description": "",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "403": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_CANNOT_DELETE_DEFAULT_BRANDING"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_CANNOT_DELETE_DEFAULT_BRANDING"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "brandings"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/defaults/signing-flow-customizations/": {
            "get": {
                "operationId": "defaults_signing-flow-customizations_list",
                "summary": "Retrieve a list of Signing Flow customizations",
                "description": "",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/SigningFlowCustomization"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "defaults"
                ]
            },
            "post": {
                "operationId": "defaults_signing-flow-customizations_create",
                "summary": "Create a Signing Flow customization",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "login_modal": {
                                    "title": "Login Modal",
                                    "description": "The behaviour of the login modal when a signer opens a document to sign. Choices are `required`: required, `optional`: optional, `bypassed`: bypassed",
                                    "type": "string"
                                },
                                "signature_completion_redirect_url": {
                                    "title": "Signature Completion Redirect URL",
                                    "description": "The URL to which the signer will be redirected after signing. Can be overriden by providing a `redirect_url` when creating a signature request. The protocol must be included in the URL provided.",
                                    "type": "string",
                                    "maxLength": 512
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "title": "UUID",
                                    "type": "string"
                                },
                                "customization_context": {
                                    "title": "Customization context",
                                    "description": "The unique identifier for your customization.",
                                    "type": "string"
                                },
                                "login_modal": {
                                    "title": "Login Modal",
                                    "description": "The behaviour of the login modal when a signer opens a document to sign",
                                    "type": "string"
                                },
                                "signature_completion_redirect_url": {
                                    "title": "Signature Completion Redirect URL",
                                    "description": "The URL to which the signer will be redirected after signing. Can be overriden by providing a `redirect_url` when creating a signature request. The protocol must be included in the URL provided.",
                                    "type": "string",
                                    "maxLength": 512
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_CUSTOMIZATION_ALREADY_EXISTS",
                                        "ERROR_INVALID_URL_PROTOCOL",
                                        "ERROR_EMPTY_REQUEST_BODY",
                                        "ERROR_FIELD_REQUIRED",
                                        "ERROR_FIELD_MAY_NOT_BE_BLANK"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_CUSTOMIZATION_ALREADY_EXISTS | ERROR_INVALID_URL_PROTOCOL | ERROR_EMPTY_REQUEST_BODY | ERROR_FIELD_REQUIRED | ERROR_FIELD_MAY_NOT_BE_BLANK"
                            }
                        }
                    }
                },
                "tags": [
                    "defaults"
                ]
            },
            "parameters": []
        },
        "/defaults/signing-flow-customizations/{uuid}/": {
            "get": {
                "operationId": "defaults_signing-flow-customizations_read",
                "summary": "Retrieve a Signing Flow customization",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SigningFlowCustomization"
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "defaults"
                ]
            },
            "put": {
                "operationId": "defaults_signing-flow-customizations_update",
                "summary": "Update a Signing Flow customization",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "login_modal": {
                                    "title": "Login Modal",
                                    "description": "The behaviour of the login modal when a signer opens a document to sign. Choices are `required`: required, `optional`: optional, `bypassed`: bypassed",
                                    "type": "string"
                                },
                                "signature_completion_redirect_url": {
                                    "title": "Signature Completion Redirect URL",
                                    "description": "The URL to which the signer will be redirected after signing. Can be overriden by providing a `redirect_url` when creating a signature request. The protocol must be included in the URL provided.",
                                    "type": "string",
                                    "maxLength": 512
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "title": "UUID",
                                    "type": "string"
                                },
                                "customization_context": {
                                    "title": "Customization context",
                                    "description": "The unique identifier for your customization.",
                                    "type": "string"
                                },
                                "login_modal": {
                                    "title": "Login Modal",
                                    "description": "The behaviour of the login modal when a signer opens a document to sign",
                                    "type": "string"
                                },
                                "signature_completion_redirect_url": {
                                    "title": "Signature Completion Redirect URL",
                                    "description": "The URL to which the signer will be redirected after signing. Can be overriden by providing a `redirect_url` when creating a signature request. The protocol must be included in the URL provided.",
                                    "type": "string",
                                    "maxLength": 512
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_INVALID_URL_PROTOCOL",
                                        "ERROR_EMPTY_REQUEST_BODY",
                                        "ERROR_FIELD_REQUIRED",
                                        "ERROR_FIELD_MAY_NOT_BE_BLANK"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_INVALID_URL_PROTOCOL | ERROR_EMPTY_REQUEST_BODY | ERROR_FIELD_REQUIRED | ERROR_FIELD_MAY_NOT_BE_BLANK"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "defaults"
                ]
            },
            "patch": {
                "operationId": "defaults_signing-flow-customizations_partial_update",
                "summary": "Partially update a Signing Flow customization",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "login_modal": {
                                    "title": "Login Modal",
                                    "description": "The behaviour of the login modal when a signer opens a document to sign. Choices are `required`: required, `optional`: optional, `bypassed`: bypassed",
                                    "type": "string"
                                },
                                "signature_completion_redirect_url": {
                                    "title": "Signature Completion Redirect URL",
                                    "description": "The URL to which the signer will be redirected after signing. Can be overriden by providing a `redirect_url` when creating a signature request. The protocol must be included in the URL provided.",
                                    "type": "string",
                                    "maxLength": 512
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "title": "UUID",
                                    "type": "string"
                                },
                                "customization_context": {
                                    "title": "Customization context",
                                    "description": "The unique identifier for your customization.",
                                    "type": "string"
                                },
                                "login_modal": {
                                    "title": "Login Modal",
                                    "description": "The behaviour of the login modal when a signer opens a document to sign",
                                    "type": "string"
                                },
                                "signature_completion_redirect_url": {
                                    "title": "Signature Completion Redirect URL",
                                    "description": "The URL to which the signer will be redirected after signing. Can be overriden by providing a `redirect_url` when creating a signature request. The protocol must be included in the URL provided.",
                                    "type": "string",
                                    "maxLength": 512
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_INVALID_URL_PROTOCOL",
                                        "ERROR_EMPTY_REQUEST_BODY",
                                        "ERROR_FIELD_REQUIRED",
                                        "ERROR_FIELD_MAY_NOT_BE_BLANK"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_INVALID_URL_PROTOCOL | ERROR_EMPTY_REQUEST_BODY | ERROR_FIELD_REQUIRED | ERROR_FIELD_MAY_NOT_BE_BLANK"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "defaults"
                ]
            },
            "delete": {
                "operationId": "defaults_signing-flow-customizations_delete",
                "summary": "Delete a Signing Flow customization",
                "description": "",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "defaults"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/document-attachments/": {
            "get": {
                "operationId": "document-attachments_list",
                "summary": "Retrieve a list of Document Attachments",
                "description": "",
                "parameters": [
                    {
                        "name": "document__uuid",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "document__external_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/DocumentAttachment"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "document-attachments"
                ]
            },
            "post": {
                "operationId": "document-attachments_create",
                "summary": "Create a Document Attachment",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DocumentAttachment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DocumentAttachment"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "This document already has a signature request created for it. Document attachments cannot be added anymore.",
                                        "Either a 'file', 'file_from_content', 'file_from_url' or a 'template' must be provided.",
                                        "When using 'file_from_content' a 'file_from_content_name' including the extension must be provided.",
                                        "INVALID_FILE_EXTENSION"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "This document already has a signature request created for it. Document attachments cannot be added anymore. | Either a 'file', 'file_from_content', 'file_from_url' or a 'template' must be provided. | When using 'file_from_content' a 'file_from_content_name' including the extension must be provided. | INVALID_FILE_EXTENSION"
                            }
                        }
                    }
                },
                "tags": [
                    "document-attachments"
                ]
            },
            "parameters": []
        },
        "/document-attachments/{uuid}/": {
            "get": {
                "operationId": "document-attachments_read",
                "summary": "Retrieve a Document Attachment",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DocumentAttachment"
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "document-attachments"
                ]
            },
            "delete": {
                "operationId": "document-attachments_delete",
                "summary": "Delete a Document Attachment",
                "description": "",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "403": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Cannot delete an attachment from a document with a signature request"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Cannot delete an attachment from a document with a signature request"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "document-attachments"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/documents-search/": {
            "get": {
                "operationId": "documents-search_list",
                "summary": "Search documents",
                "description": "A search interface for fast, indexed searching of documents. This can be useful to have your users search for\na document in your interface. Note that this indexed search only includes documents for which a signature request\nflow has been initiated (i.e a signature request has been sent). If you would like to retrieve information on\ndocuments which have only been uploaded, you can do this via the `/documents` endpoint.\n\n*Normal search:*\n\n- ?**q**={{query}}\n\nUsing this query parameter, you can find documents by their UUID / ID, name, or by the emails of people involved\nin the signature request. Document names are tokenized on whitespace, hyphens and underscores to also match partial\ndocument names.\n\n*Search in document name:*\n\n- ?**name**={{query}}\n\n**Note:** Searching by `name` returns exact results. For partial results, use the `q` parameter.\n\n*Available (extra) filters:*\n\n- ?**signer_emails**={{ signer@email.com }} (will filter documents that an email needed to sign/approve)\n- ?**status**={{ si }}\n- ?**who**={{ mo }}\n\nTo include multiple values for a filter field separate the values with a pipe (|). For example, to only search for\nsent documents and documents which have been viewed by a signer, use **status=se|vi** (sent and viewed).\n\n**Note:** Only valid query parameters from the list below will return meaningful results. By default, if any\nmalformed query parameter is provided, no filtering will occur and all documents will be returned (equivalent to a\n`GET /documents`)\n\n*Pagination:*\n\n- ?**page**={{ page_number: default 1 }}\n- ?**limit**={{ limit results: default 10, max 100 }}\n\n*Format:*\n\nBy default JSON is returned, to export data as csv or xls use the format parameter. Note that when using `csv`\nand `xls`, the data is returned as attachments in the response with the appropriate `Content-Type` header. You\nwill need to ensure you are saving these responses as files, since they will not be in JSON format. It should\nalso be noted that using page parameter in combination with format will return a `404` response as it's an\ninvalid request. To export a subset of data, format can be combined with filter field values.\n\n- ?**format**=csv\n- ?**format**=xls\n\nFor csv and xls the data can also be exported with each signer on a separate row. In this mode also the signer\ninputs that have an *external_id* specified on a tag will be exported. All external_id's found will be exported as\ncolumns. To use this mode add the **signer_data** parameter.\n\nIf an incorrect argument is provided to this parameter, a `400` response with empty headers is returned for\ncsv and xls formats.\n\n- ?**format**=csv&**signer_data**=1\n- ?**format**=xls&**signer_data**=1\n\nNote that all documents are only ordered by **created** (newest first) when `q` or `name` are\nnot used, else they are ordered by the strength of the match.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Normal search query",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Document name",
                        "type": "string"
                    },
                    {
                        "name": "signer_emails",
                        "in": "query",
                        "description": "Email needed to sign/approve",
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "`ne`: new, `se`: sent, `vi`: viewed, `si`: signed, `sd`: signed and downloaded, `ca`: cancelled, `de`: declined, `xp`: expired",
                        "type": "string"
                    },
                    {
                        "name": "who",
                        "in": "query",
                        "description": "`m`: only me, `mo`: me and others, `o`: only others",
                        "type": "string"
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Export format, can be `json` (default), `csv`, or `xls`",
                        "type": "string"
                    },
                    {
                        "name": "signer_data",
                        "in": "query",
                        "description": "Set to `1` to export with each signer on a separate row",
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/DocumentSearch"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "signer_data": {
                                    "type": "string",
                                    "enum": [
                                        "created,name,document status,from email,id,signer's email,needs_to_sign,                                                    email_viewed,viewed,cancelled,notify_only,approve_only,                                                    signed,signed_on,declined,declined_on,expired,                                                    expired_on"
                                    ]
                                }
                            }
                        }
                    }
                },
                "produces": [
                    "application/json",
                    "text/csv",
                    "application/vnd.ms-excel"
                ],
                "tags": [
                    "documents-search"
                ]
            },
            "parameters": []
        },
        "/documents/": {
            "get": {
                "operationId": "documents_list",
                "summary": "Retrieve a list of Documents",
                "description": "",
                "parameters": [
                    {
                        "name": "external_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "signrequest__who",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "signrequest__from_email",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "user__email",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "user__first_name",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "user__last_name",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Document"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "documents"
                ]
            },
            "post": {
                "operationId": "documents_create",
                "summary": "Create a Document",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Either a 'file', 'file_from_content', 'file_from_url' or a 'template' must be provided.",
                                        "When using 'file_from_content' a 'file_from_content_name' including the extension must be provided.",
                                        "ERROR_ONE_PREFILL_VALUE_REQUIRED",
                                        "INVALID_FILE_EXTENSION",
                                        "INVALID_URL",
                                        "Invalid hyperlink - Object does not exist",
                                        "CALLBACK_URL_CANNOT_BE_REACHED"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Either a 'file', 'file_from_content', 'file_from_url' or a 'template' must be provided. | When using 'file_from_content' a 'file_from_content_name' including the extension must be provided. | ERROR_ONE_PREFILL_VALUE_REQUIRED | INVALID_FILE_EXTENSION | INVALID_URL | Invalid hyperlink - Object does not exist | CALLBACK_URL_CANNOT_BE_REACHED"
                            }
                        }
                    }
                },
                "tags": [
                    "documents"
                ]
            },
            "parameters": []
        },
        "/documents/{uuid}/": {
            "get": {
                "operationId": "documents_read",
                "summary": "Retrieve a Document",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Document"
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "documents"
                ]
            },
            "delete": {
                "operationId": "documents_delete",
                "summary": "Delete a Document",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "force_delete": {
                                    "title": "Forces document deletion",
                                    "description": "If the document has an unfinished signature request, it will be cancelled. Then, the document will be deleted.",
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "403": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "DOCUMENT_HAS_UNFINISHED_SIGNATURE_REQUEST"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "DOCUMENT_HAS_UNFINISHED_SIGNATURE_REQUEST"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "documents"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/events/": {
            "get": {
                "operationId": "events_list",
                "summary": "Retrieve a list of Events",
                "description": "",
                "parameters": [
                    {
                        "name": "document__uuid",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "document__external_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "document__signrequest__who",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "document__signrequest__from_email",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "document__status",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "document__user__email",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "document__user__first_name",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "document__user__last_name",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "delivered",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "delivered_on",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timestamp",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "event_type",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Event"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ]
            },
            "parameters": []
        },
        "/events/{uuid}/": {
            "get": {
                "operationId": "events_read",
                "summary": "Retrieve an Event",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                },
                "tags": [
                    "events"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/signature-request-quick-create/": {
            "post": {
                "operationId": "signature-request-quick-create_create",
                "summary": "Quick create a signature request",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SignatureRequestQuickCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SignatureRequestQuickCreate"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Either a 'file', 'file_from_content', 'file_from_url' or a 'template' must be provided.",
                                        "When using 'file_from_content' a 'file_from_content_name' including the extension must be provided.",
                                        "ERROR_ONE_PREFILL_VALUE_REQUIRED",
                                        "INVALID_FILE_EXTENSION",
                                        "INVALID_URL",
                                        "Invalid hyperlink - Object does not exist",
                                        "CALLBACK_URL_CANNOT_BE_REACHED",
                                        "There was an error converting the document. Please retry using a different format.",
                                        "ERROR_EMBED_URL_USER_ID_IS_EMPTY",
                                        "ERROR_SIGNATURE_REQUEST_MUST_PREPARE_FOR_ALL_SIGNERS",
                                        "ERROR_SIGNER_MUST_ACTION_BUT_NEEDS_TO_SIGN_FALSE",
                                        "If the signature request is of mode 'Only Me', 'signers' needs to be empty or contain only 1 signer using the same email address as 'from_email'.",
                                        "'signers' is empty and the signature request is not of mode 'Only Me'"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Either a 'file', 'file_from_content', 'file_from_url' or a 'template' must be provided. | When using 'file_from_content' a 'file_from_content_name' including the extension must be provided. | ERROR_ONE_PREFILL_VALUE_REQUIRED | INVALID_FILE_EXTENSION | INVALID_URL | Invalid hyperlink - Object does not exist | CALLBACK_URL_CANNOT_BE_REACHED | There was an error converting the document. Please retry using a different format. | ERROR_EMBED_URL_USER_ID_IS_EMPTY | ERROR_SIGNATURE_REQUEST_MUST_PREPARE_FOR_ALL_SIGNERS | ERROR_SIGNER_MUST_ACTION_BUT_NEEDS_TO_SIGN_FALSE | If the signature request is of mode 'Only Me', 'signers' needs to be empty or contain only 1 signer using the same email address as 'from_email'. | 'signers' is empty and the signature request is not of mode 'Only Me'"
                            }
                        }
                    }
                },
                "tags": [
                    "signature-request-quick-create"
                ]
            },
            "parameters": []
        },
        "/signature-requests/": {
            "get": {
                "operationId": "signature-requests_list",
                "summary": "Retrieve a list of signature requests",
                "description": "",
                "parameters": [
                    {
                        "name": "who",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "from_email",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/SignatureRequest"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "signature-requests"
                ]
            },
            "post": {
                "operationId": "signature-requests_create",
                "summary": "Create a signature request",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SignatureRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SignatureRequest"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "This document already has a signature request created for it.",
                                        "There was an error converting the document. Please retry using a different format.",
                                        "ERROR_EMBED_URL_USER_ID_IS_EMPTY",
                                        "ERROR_SIGNATURE_REQUEST_MUST_PREPARE_FOR_ALL_SIGNERS",
                                        "ERROR_SIGNER_MUST_ACTION_BUT_NEEDS_TO_SIGN_FALSE",
                                        "If the signature request is of mode 'Only Me', 'signers' needs to be empty or contain only 1 signer using the same email address as 'from_email'.",
                                        "'signers' is empty and the signature request is not of mode 'Only Me'"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "This document already has a signature request created for it. | There was an error converting the document. Please retry using a different format. | ERROR_EMBED_URL_USER_ID_IS_EMPTY | ERROR_SIGNATURE_REQUEST_MUST_PREPARE_FOR_ALL_SIGNERS | ERROR_SIGNER_MUST_ACTION_BUT_NEEDS_TO_SIGN_FALSE | If the signature request is of mode 'Only Me', 'signers' needs to be empty or contain only 1 signer using the same email address as 'from_email'. | 'signers' is empty and the signature request is not of mode 'Only Me'"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "signature-requests"
                ]
            },
            "parameters": []
        },
        "/signature-requests/{uuid}/": {
            "get": {
                "operationId": "signature-requests_read",
                "summary": "Retrieve a signature request",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SignatureRequest"
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "signature-requests"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/signature-requests/{uuid}/cancel/": {
            "post": {
                "operationId": "signature-requests_cancel",
                "summary": "Cancel a signature request",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail",
                                "cancelled"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "OK"
                                    ]
                                },
                                "cancelled": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "SIGNATURE_REQUEST_CANCEL_NOT_ALLOWED"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "SIGNATURE_REQUEST_CANCEL_NOT_ALLOWED"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "signature-requests"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/signature-requests/{uuid}/resend/": {
            "post": {
                "operationId": "signature-requests_resend",
                "summary": "Resend a signature request",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "SIGNATURE_REQUEST_EMAIL_RESENT"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "SIGNATURE_REQUEST_EMAIL_RESENT"
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_SIGNATURE_REQUEST_FINISHED",
                                        "ERROR_SIGNATURE_REQUEST_RESENT_TOO_SOON"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_SIGNATURE_REQUEST_FINISHED | ERROR_SIGNATURE_REQUEST_RESENT_TOO_SOON"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "signature-requests"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/templates/": {
            "get": {
                "operationId": "templates_list",
                "summary": "Retrieve a list of Templates",
                "description": "",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Template"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "templates"
                ]
            },
            "post": {
                "operationId": "templates_create",
                "summary": "Create a Template",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "required": [
                                "doc_uuid"
                            ],
                            "type": "object",
                            "properties": {
                                "doc_uuid": {
                                    "title": "Document UUID",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "template_url": {
                                    "title": "Template URL",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "templates"
                ]
            },
            "parameters": []
        },
        "/templates/{uuid}/": {
            "get": {
                "operationId": "templates_read",
                "summary": "Retrieve a Template",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Template"
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "templates"
                ]
            },
            "delete": {
                "operationId": "templates_delete",
                "summary": "Delete a Template",
                "description": "",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "403": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "TEMPLATE_DELETE_NOT_ALLOWED"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "TEMPLATE_DELETE_NOT_ALLOWED"
                            }
                        }
                    },
                    "404": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "Not found."
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "Not found."
                            }
                        }
                    }
                },
                "tags": [
                    "templates"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/webhooks/": {
            "get": {
                "operationId": "webhooks_list",
                "summary": "Retrieve a list of Webhooks",
                "description": "",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "required": [
                                "count",
                                "results"
                            ],
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "integer"
                                },
                                "next": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "type": "string",
                                    "format": "uri",
                                    "x-nullable": true
                                },
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/WebhookSubscription"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "webhooks"
                ]
            },
            "post": {
                "operationId": "webhooks_create",
                "summary": "Create a Webhook",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebhookSubscription"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/WebhookSubscription"
                        }
                    },
                    "400": {
                        "description": "",
                        "schema": {
                            "required": [
                                "detail"
                            ],
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "enum": [
                                        "ERROR_DUPLICATE_WEBHOOK"
                                    ]
                                }
                            }
                        },
                        "examples": {
                            "application/json": {
                                "detail": "ERROR_DUPLICATE_WEBHOOK"
                            }
                        }
                    }
                },
                "tags": [
                    "webhooks"
                ]
            },
            "parameters": []
        },
        "/webhooks/{uuid}/": {
            "get": {
                "operationId": "webhooks_read",
                "summary": "Retrieve a Webhook",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/WebhookSubscription"
                        }
                    }
                },
                "tags": [
                    "webhooks"
                ]
            },
            "put": {
                "operationId": "webhooks_update",
                "summary": "Update a Webhook",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WebhookSubscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/WebhookSubscription"
                        }
                    }
                },
                "tags": [
                    "webhooks"
                ]
            },
            "patch": {
                "operationId": "webhooks_partial_update",
                "summary": "Partially update a Webhook",
                "description": "",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "title": "Name",
                                    "description": "A name to easily identify for what purpose the webhook is used.",
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "event_type": {
                                    "title": "Event Type",
                                    "description": "The type of event for which to listen.",
                                    "type": "string",
                                    "enum": [
                                        "convert_error",
                                        "converted",
                                        "sent",
                                        "declined",
                                        "cancelled",
                                        "expired",
                                        "signed",
                                        "viewed",
                                        "downloaded",
                                        "signer_signed",
                                        "signer_email_bounced",
                                        "signer_viewed_email",
                                        "signer_viewed",
                                        "signer_forwarded",
                                        "signer_downloaded",
                                        "signrequest_received"
                                    ],
                                    "maxLength": 50
                                },
                                "callback_url": {
                                    "title": "Callback URL",
                                    "description": "The callback URL to which we will POST events.",
                                    "type": "string",
                                    "maxLength": 2100
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "title": "Name",
                                    "description": "A name to easily identify for what purpose the webhook is used.",
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "event_type": {
                                    "title": "Event Type",
                                    "description": "The type of event for which to listen.",
                                    "type": "string",
                                    "enum": [
                                        "convert_error",
                                        "converted",
                                        "sent",
                                        "declined",
                                        "cancelled",
                                        "expired",
                                        "signed",
                                        "viewed",
                                        "downloaded",
                                        "signer_signed",
                                        "signer_email_bounced",
                                        "signer_viewed_email",
                                        "signer_viewed",
                                        "signer_forwarded",
                                        "signer_downloaded",
                                        "signrequest_received"
                                    ],
                                    "maxLength": 50
                                },
                                "callback_url": {
                                    "title": "Callback URL",
                                    "description": "The callback URL to which we will POST events.",
                                    "type": "string",
                                    "maxLength": 2100
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "webhooks"
                ]
            },
            "delete": {
                "operationId": "webhooks_delete",
                "summary": "Delete a Webhook",
                "description": "",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "tags": [
                    "webhooks"
                ]
            },
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ]
        }
    },
    "definitions": {
        "Branding": {
            "description": "Branding(id, uuid, brand_context, redirect_url, from_email_address, help_link, logo, product_name)",
            "required": [
                "product_name"
            ],
            "type": "object",
            "properties": {
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "brand_context": {
                    "title": "Brand context",
                    "description": "The unique identifier for your branding customization",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "from_email_address": {
                    "title": "From email address",
                    "description": "The from email address used when sending emails",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "help_link": {
                    "title": "Help link",
                    "description": "The custom help link to show signers when signing a document. The protocol must be included in the URL provided.",
                    "type": "string",
                    "minLength": 1
                },
                "logo": {
                    "title": "Logo",
                    "description": "The logo image to be uploaded",
                    "type": "string",
                    "readOnly": true,
                    "format": "uri"
                },
                "product_name": {
                    "title": "Product name",
                    "description": "The name of your product. This will be rendered as `{product_name} (powered by OpenText Core Signature)`",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "SigningFlowCustomization": {
            "description": "SigningFlowCustomization(id, uuid, customization_context, login_modal, signature_completion_redirect_url)",
            "type": "object",
            "properties": {
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "customization_context": {
                    "title": "Customization context",
                    "description": "The unique identifier for your signing flow customization",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "login_modal": {
                    "title": "Login modal",
                    "description": "The behaviour of the login modal when a signer opens a document to sign. `required`: required, `optional`: optional, `bypassed`: bypassed",
                    "type": "string",
                    "enum": [
                        "required",
                        "optional",
                        "bypassed"
                    ]
                },
                "signature_completion_redirect_url": {
                    "title": "Signature completion redirect url",
                    "description": "The URL to which the signer will be redirected after signing. Can be overriden by providing a `redirect_url` when creating a signature request. The protocol must be included in the URL provided.",
                    "type": "string",
                    "maxLength": 512,
                    "minLength": 1
                }
            }
        },
        "DocumentAttachment": {
            "description": "An Attachment that can be send together with a signature request (e.g. Terms of Use)",
            "required": [
                "document"
            ],
            "type": "object",
            "properties": {
                "url": {
                    "title": "Url",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true
                },
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "name": {
                    "title": "Name",
                    "description": "Defaults to filename",
                    "type": "string",
                    "maxLength": 255,
                    "x-nullable": true
                },
                "file": {
                    "title": "File",
                    "description": "A file which can be uploaded in a multipart/form-data request. This field is write only.",
                    "type": "string",
                    "readOnly": true,
                    "x-nullable": true,
                    "format": "uri"
                },
                "file_from_content": {
                    "title": "File from content",
                    "description": "Base64 encoded document content. This field is write only.",
                    "type": "string",
                    "x-nullable": true
                },
                "file_from_content_name": {
                    "title": "File from content name",
                    "description": "Filename, including extension. Required when using `file_from_content`. This field is write only.",
                    "type": "string",
                    "x-nullable": true
                },
                "file_from_url": {
                    "title": "File from url",
                    "description": "Publicly accessible URL of document to be downloaded by OpenText Core Signature",
                    "type": "string",
                    "format": "uri",
                    "maxLength": 2100,
                    "x-nullable": true
                },
                "document": {
                    "title": "Document",
                    "description": "The API URL at which you can retrieve the document.",
                    "type": "string",
                    "format": "uri"
                }
            }
        },
        "DocumentSearch": {
            "description": "",
            "required": [
                "who",
                "from_email"
            ],
            "type": "object",
            "properties": {
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "created": {
                    "title": "Created",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "status": {
                    "title": "Status",
                    "description": "`co`: converting, `ne`: new, `se`: sent, `vi`: viewed, `si`: signed, `do`: downloaded, `sd`: signed and downloaded, `ca`: cancelled, `de`: declined, `ec`: error converting, `xp`: expired",
                    "type": "string",
                    "maxLength": 2,
                    "minLength": 1
                },
                "who": {
                    "title": "Who",
                    "type": "string",
                    "minLength": 1
                },
                "name": {
                    "title": "Name",
                    "description": "Defaults to filename",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "from_email": {
                    "title": "From email",
                    "type": "string",
                    "minLength": 1
                },
                "signer_emails": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true
                },
                "status_display": {
                    "title": "Status display",
                    "description": "The document's status",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "created_timestamp": {
                    "title": "Created timestamp",
                    "description": "The time at which the document was created (uploaded)",
                    "type": "integer",
                    "readOnly": true
                },
                "finished_on_timestamp": {
                    "title": "Finished on timestamp",
                    "description": "The time at which the document's signature flow was completed",
                    "type": "integer",
                    "readOnly": true
                },
                "finished_on": {
                    "title": "Finished on",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                }
            }
        },
        "User": {
            "description": "User(id, password, last_login, is_superuser, location, currency, billing_details, digital_signatures_by_default, default_disable_blockchain_proof, default_show_blockchain_proof, email, email_domain, is_email_domain_payer, uuid, username, first_name, last_name, full_name, tenant_id, integration_root_id, role, is_staff, is_active, date_joined, last_active, integration_type, banned, terminated_on, auto_termination_after, termination_reason, termination_problem, has_registered, registered_on, language, require_prepared_docs, agreed_to_terms)",
            "type": "object",
            "properties": {
                "email": {
                    "title": "Email address",
                    "type": "string",
                    "format": "email",
                    "readOnly": true,
                    "minLength": 1
                },
                "first_name": {
                    "title": "First name",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "last_name": {
                    "title": "Last name",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "display_name": {
                    "title": "Display name",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                }
            },
            "readOnly": true
        },
        "InlinePrefillTags": {
            "description": "Used by the API to prefill tags / configure placeholders",
            "type": "object",
            "properties": {
                "external_id": {
                    "title": "External id",
                    "type": "string",
                    "maxLength": 255,
                    "x-nullable": true
                },
                "text": {
                    "title": "Text",
                    "type": "string",
                    "x-nullable": true
                },
                "checkbox_value": {
                    "title": "Checkbox value",
                    "type": "boolean",
                    "x-nullable": true
                },
                "date_value": {
                    "title": "Date value",
                    "type": "string",
                    "format": "date",
                    "x-nullable": true
                }
            }
        },
        "InlineIntegrationData": {
            "description": "IntegrationData(id, created, modified, integration, integration_data, document, template)",
            "type": "object",
            "properties": {
                "integration_data": {
                    "title": "Integration data",
                    "type": "object"
                }
            }
        },
        "RequiredAttachment": {
            "description": "A signature request can require the signers to add an attachment (e.g. passport)",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "title": "Name",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "signers": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true
                }
            }
        },
        "SignerInputs": {
            "description": "Any added signatures, snippets of text or company stamps are converted to images and stored here together with their position on the DocumentImage instance.",
            "required": [
                "page_index"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "title": "Type",
                    "description": "`s`: signature, `i`: initial, `n`: name `d`: date `t` text `c` checkbox",
                    "type": "string",
                    "enum": [
                        "s",
                        "i",
                        "n",
                        "d",
                        "t",
                        "c"
                    ],
                    "x-nullable": true
                },
                "page_index": {
                    "title": "Page index",
                    "description": "Indicator for which page this placeholder is on",
                    "type": "integer"
                },
                "text": {
                    "title": "Text",
                    "description": "Optional text value to be prefilled",
                    "type": "string"
                },
                "checkbox_value": {
                    "title": "Checkbox value",
                    "description": "Optional checkbox value to be prefilled",
                    "type": "boolean",
                    "x-nullable": true
                },
                "date_value": {
                    "title": "Date value",
                    "description": "Optional date value to be prefilled",
                    "type": "string",
                    "format": "date",
                    "x-nullable": true
                },
                "external_id": {
                    "title": "External id",
                    "description": "A human readable field describing what this placeholder is for",
                    "type": "string",
                    "maxLength": 255,
                    "x-nullable": true
                },
                "placeholder_uuid": {
                    "title": "Placeholder uuid",
                    "description": "The UUID of the placeholder, if added by the sender. Placeholders added by the signer will be null",
                    "type": "string",
                    "maxLength": 36,
                    "x-nullable": true
                }
            }
        },
        "SignerAttachment": {
            "description": "SignerAttachment(id, created, modified, security_hash, tierion_hash_item, lto_hash_item, name, hashed_name, file, file_from_url, uuid, signer, for_attachment)",
            "type": "object",
            "properties": {
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "name": {
                    "title": "Name",
                    "description": "Defaults to filename",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "file": {
                    "title": "File",
                    "type": "string",
                    "readOnly": true,
                    "x-nullable": true,
                    "format": "uri"
                },
                "for_attachment": {
                    "$ref": "#/definitions/RequiredAttachment"
                }
            }
        },
        "InlineDocumentSignerIntegrationData": {
            "description": "DocumentSignerIntegrationData(id, created, modified, integration, integration_data, signer, signer_conf)",
            "type": "object",
            "properties": {
                "integration_data": {
                    "title": "Integration data",
                    "type": "object"
                }
            }
        },
        "Signer": {
            "description": "A person who needs to sign a document or has signed a document.",
            "required": [
                "email"
            ],
            "type": "object",
            "properties": {
                "email": {
                    "title": "Email",
                    "description": "The signer's email address.",
                    "type": "string",
                    "format": "email",
                    "maxLength": 255,
                    "minLength": 1
                },
                "display_name": {
                    "title": "Display name",
                    "description": "The signer's display name, used in the UI during signing",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "first_name": {
                    "title": "First name",
                    "description": "The signer's first name.",
                    "type": "string",
                    "maxLength": 255
                },
                "last_name": {
                    "title": "Last name",
                    "description": "The signer's last name.",
                    "type": "string",
                    "maxLength": 255
                },
                "full_name": {
                    "title": "Full name",
                    "description": "The signer's full name that will override the user's first_name and last_name.",
                    "type": "string",
                    "maxLength": 255
                },
                "email_viewed": {
                    "title": "Email viewed",
                    "description": "The signer has viewed the request for signature email.",
                    "type": "boolean",
                    "readOnly": true
                },
                "viewed": {
                    "title": "Viewed",
                    "description": "The signer has viewed the document",
                    "type": "boolean",
                    "readOnly": true
                },
                "signed": {
                    "title": "Signed",
                    "description": "The signer has signed / approved the signature request.",
                    "type": "boolean",
                    "readOnly": true
                },
                "signed_on": {
                    "title": "Signed on",
                    "description": "The time at which the signer signed / approved the signature request.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "needs_to_sign": {
                    "title": "Needs to sign",
                    "description": "The signer needs to action the document.",
                    "type": "boolean",
                    "default": true
                },
                "approve_only": {
                    "title": "Approve only",
                    "description": "The signer only needs to approve the document, not sign it.",
                    "type": "boolean"
                },
                "notify_only": {
                    "title": "Notify only",
                    "description": "The signer will only be notified of updates to the signature request. They do not have to action the document.",
                    "type": "boolean"
                },
                "in_person": {
                    "title": "In person",
                    "description": "The signer will be signing the document in person, immediately after the previous signer",
                    "type": "boolean"
                },
                "order": {
                    "title": "Order",
                    "description": "The order in which the signer needs to sign. This is ignored in the case of a `notify_only` signer.",
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                },
                "language": {
                    "title": "Language",
                    "description": "The default language will be the same as the sender if not provided.",
                    "type": "string",
                    "enum": [
                        "en",
                        "fr",
                        "nl"
                    ],
                    "x-nullable": true
                },
                "force_language": {
                    "title": "Force language",
                    "description": "Whether the signer's language should override their browser and force the language of the frontend UI",
                    "type": "boolean",
                    "x-nullable": true
                },
                "emailed": {
                    "title": "Emailed",
                    "description": "The signer has been emailed the request for signature.",
                    "type": "boolean",
                    "readOnly": true
                },
                "declined": {
                    "title": "Declined",
                    "description": "The signer declined the signature request.",
                    "type": "boolean",
                    "readOnly": true
                },
                "declined_on": {
                    "title": "Declined on",
                    "description": "The time at which the signer declined the signature request.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "message": {
                    "title": "Message",
                    "description": "The reason the signer gave for declining the signature request.",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "forwarded": {
                    "title": "Forwarded",
                    "description": "The signer has forwarded the signature request.",
                    "type": "boolean",
                    "readOnly": true
                },
                "forwarded_on": {
                    "title": "Forwarded on",
                    "description": "The time at which the signer forwarded the signature request.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "forwarded_to_email": {
                    "title": "Forwarded to email",
                    "description": "The email address to which the signer forwarded the signature request.",
                    "type": "string",
                    "format": "email",
                    "readOnly": true,
                    "minLength": 1
                },
                "forwarded_reason": {
                    "title": "Forwarded reason",
                    "description": "The reason the signer gave for forwarding the signature request.",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "embed_url_user_id": {
                    "title": "Embed url user id",
                    "description": "The ID the sender provided when creating the signature request in order for the signing link for the signer to be generated.",
                    "type": "string",
                    "maxLength": 255,
                    "x-nullable": true
                },
                "inputs": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SignerInputs"
                    },
                    "readOnly": true
                },
                "embed_url": {
                    "title": "Embed url",
                    "description": "The signing URL for the signer.",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true,
                    "minLength": 1
                },
                "attachments": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SignerAttachment"
                    },
                    "readOnly": true
                },
                "redirect_url": {
                    "title": "Redirect url",
                    "description": "The URL to which the signer will be redirected after the document is finished",
                    "type": "string",
                    "format": "uri",
                    "maxLength": 2100,
                    "x-nullable": true
                },
                "integrations": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InlineDocumentSignerIntegrationData"
                    }
                },
                "password": {
                    "title": "Password",
                    "description": "Require the signer to enter this password before signing a document. This field is write only.",
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "InlineSignatureRequest": {
            "description": "SignRequest(id, created, modified, ip_address, ip_latitude, ip_longitude, ip_postal_code, ip_city, ip_country, ip_country_iso_code, ip_continent, ip_time_zone, user_agent_string, user_agent_os_family, user_agent_os_version, user_agent_browser_family, user_agent_browser_version, user_agent_device_family, user_agent_device_brand, user_agent_device_model, user_agent_is_mobile, user_agent_is_tablet, user_agent_is_touch_capable, user_agent_is_pc, user_agent_is_bot, who, disable_attachments, disable_text_signatures, disable_draw_signatures, disable_upload_signatures, disable_checkbox, disable_text, disable_date, disable_emails, text_message_verification_locked, disable_blockchain_proof, show_blockchain_proof, subject, message, send_reminders, redirect_url, uuid, document, from_email, segregation_identifier, from_email_name, mailed, mailed_on, is_being_prepared, use_digital_signatures, from_email_unverified, bulk_send, bundle)",
            "type": "object",
            "properties": {
                "from_email": {
                    "title": "From email",
                    "description": "Email of user sending the signature request (must be a validated email)",
                    "type": "string",
                    "format": "email",
                    "readOnly": true,
                    "minLength": 1
                },
                "from_email_name": {
                    "title": "From email name",
                    "description": "Name to be used in the `From` email header, e.g. `{from_email_name} <no-reply@sign.core.opentext.com>`",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "is_being_prepared": {
                    "title": "Is being prepared",
                    "description": "Have the sender of a signature request prepare the document before sending the request out, see: [prepare using the web interface](#section/Preparing-a-document/Prepare-using-the-web-interface)",
                    "type": "boolean",
                    "readOnly": true
                },
                "prepare_url": {
                    "title": "Prepare url",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true,
                    "minLength": 1
                },
                "redirect_url": {
                    "title": "Redirect url",
                    "description": "URL at which Core Signature will redirect to when a document is finished",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true,
                    "minLength": 1
                },
                "required_attachments": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RequiredAttachment"
                    },
                    "readOnly": true
                },
                "disable_attachments": {
                    "title": "Disable attachments",
                    "description": "Disable uploading/adding of attachments",
                    "type": "boolean",
                    "readOnly": true
                },
                "disable_text_signatures": {
                    "title": "Disable text signatures",
                    "description": "Disable usage of signatures generated by typing (text)",
                    "type": "boolean",
                    "readOnly": true
                },
                "disable_checkbox": {
                    "title": "Disable checkbox",
                    "description": "Disable adding of checkboxes",
                    "type": "boolean",
                    "readOnly": true
                },
                "disable_text": {
                    "title": "Disable text",
                    "description": "Disable adding of text",
                    "type": "boolean",
                    "readOnly": true
                },
                "disable_date": {
                    "title": "Disable date",
                    "description": "Disable adding of dates",
                    "type": "boolean",
                    "readOnly": true
                },
                "disable_emails": {
                    "title": "Disable emails",
                    "description": "Disable all Core Signature status emails as well as the email that contains the signed documents",
                    "type": "boolean",
                    "readOnly": true
                },
                "disable_upload_signatures": {
                    "title": "Disable upload signatures",
                    "description": "Disable usage of uploaded signatures (images)",
                    "type": "boolean",
                    "readOnly": true
                },
                "subject": {
                    "title": "Subject",
                    "description": "Subject of the Core Signature email",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "message": {
                    "title": "Message",
                    "description": "Message to include in Core Signature email, may contain the following html tags: `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "who": {
                    "title": "Who",
                    "description": "`m`: only me, `mo`: me and others, `o`: only others",
                    "type": "string",
                    "enum": [
                        "m",
                        "mo",
                        "o"
                    ],
                    "readOnly": true
                },
                "send_reminders": {
                    "title": "Send reminders",
                    "description": "Automatically remind signers to sign a document",
                    "type": "boolean",
                    "readOnly": true
                },
                "signers": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Signer"
                    },
                    "readOnly": true
                },
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                }
            },
            "readOnly": true
        },
        "SigningLog": {
            "description": "SigningLog(id, created, modified, security_hash, tierion_hash_item, lto_hash_item, pdf, document, language)",
            "type": "object",
            "properties": {
                "pdf": {
                    "title": "Pdf",
                    "description": "Temporary URL to signing log, expires in five minutes",
                    "type": "string",
                    "readOnly": true,
                    "x-nullable": true,
                    "format": "uri"
                },
                "security_hash": {
                    "title": "Security hash",
                    "description": "SHA256 hash of PDF contents",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                }
            },
            "readOnly": true
        },
        "Document": {
            "description": "The original document uploaded by the user.",
            "type": "object",
            "properties": {
                "url": {
                    "title": "Url",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true
                },
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "user": {
                    "description": "User(id, password, last_login, is_superuser, location, currency, billing_details, digital_signatures_by_default, default_disable_blockchain_proof, default_show_blockchain_proof, email, email_domain, is_email_domain_payer, uuid, username, first_name, last_name, full_name, tenant_id, integration_root_id, role, is_staff, is_active, date_joined, last_active, integration_type, banned, terminated_on, auto_termination_after, termination_reason, termination_problem, has_registered, registered_on, language, require_prepared_docs, agreed_to_terms)",
                    "type": "object",
                    "properties": {
                        "email": {
                            "title": "Email address",
                            "type": "string",
                            "format": "email",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "first_name": {
                            "title": "First name",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "last_name": {
                            "title": "Last name",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "display_name": {
                            "title": "Display name",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        }
                    },
                    "readOnly": true
                },
                "name": {
                    "title": "Name",
                    "description": "Defaults to filename",
                    "type": "string",
                    "maxLength": 200,
                    "x-nullable": true
                },
                "external_id": {
                    "title": "External id",
                    "description": "ID used to reference document in external system.",
                    "type": "string",
                    "maxLength": 255,
                    "x-nullable": true
                },
                "file": {
                    "title": "File",
                    "description": "A file which can be uploaded in a multipart/form-data request. This field is write only.",
                    "type": "string",
                    "readOnly": true,
                    "x-nullable": true,
                    "format": "uri"
                },
                "file_from_url": {
                    "title": "File from url",
                    "description": "Publicly accessible URL of document to be downloaded by OpenText Core Signature",
                    "type": "string",
                    "format": "uri",
                    "maxLength": 2100,
                    "x-nullable": true
                },
                "events_callback_url": {
                    "title": "Events callback url",
                    "description": "URL at which to receive [event callbacks](#section/Events/Events-callback) for this document. This field is write only.",
                    "type": "string",
                    "format": "uri",
                    "maxLength": 2100,
                    "x-nullable": true
                },
                "file_from_content": {
                    "title": "File from content",
                    "description": "Base64 encoded document content. This field is write only.",
                    "type": "string",
                    "x-nullable": true
                },
                "file_from_content_name": {
                    "title": "File from content name",
                    "description": "Filename, including extension. Required when using `file_from_content`. This field is write only.",
                    "type": "string",
                    "maxLength": 200,
                    "x-nullable": true
                },
                "template": {
                    "title": "Template",
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                },
                "prefill_tags": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InlinePrefillTags"
                    }
                },
                "integrations": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InlineIntegrationData"
                    }
                },
                "auto_delete_days": {
                    "title": "Auto delete days",
                    "description": "Number of days after which a finished document (signed/cancelled/declined) will be automatically deleted",
                    "type": "integer",
                    "maximum": 730,
                    "minimum": 1,
                    "x-nullable": true
                },
                "auto_expire_days": {
                    "title": "Auto expire days",
                    "description": "Number of days after which a non finished document will be automatically expired. The clock starts once a signature request process is initiated with this document.",
                    "type": "integer",
                    "maximum": 730,
                    "minimum": 1,
                    "x-nullable": true
                },
                "link_expire_days": {
                    "title": "Link expire days",
                    "description": "The number of days for which the download links in the Document Signed email will be valid. Afterwards, they will expire and unauthenticated signers will be unable to download the document.",
                    "type": "integer",
                    "maximum": 30,
                    "minimum": 1,
                    "x-nullable": true
                },
                "pdf": {
                    "title": "Pdf",
                    "description": "Temporary URL to signed document as PDF, expires in five minutes",
                    "type": "string",
                    "readOnly": true,
                    "format": "uri"
                },
                "status": {
                    "title": "Status",
                    "description": "`co`: converting, `ne`: new, `se`: sent, `vi`: viewed, `si`: signed, `sd`: signed and downloaded, `ca`: cancelled, `de`: declined, `ec`: error converting, `xp`: expired",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "signrequest": {
                    "description": "SignRequest(id, created, modified, ip_address, ip_latitude, ip_longitude, ip_postal_code, ip_city, ip_country, ip_country_iso_code, ip_continent, ip_time_zone, user_agent_string, user_agent_os_family, user_agent_os_version, user_agent_browser_family, user_agent_browser_version, user_agent_device_family, user_agent_device_brand, user_agent_device_model, user_agent_is_mobile, user_agent_is_tablet, user_agent_is_touch_capable, user_agent_is_pc, user_agent_is_bot, who, disable_attachments, disable_text_signatures, disable_draw_signatures, disable_upload_signatures, disable_checkbox, disable_text, disable_date, disable_emails, text_message_verification_locked, disable_blockchain_proof, show_blockchain_proof, subject, message, send_reminders, redirect_url, uuid, document, from_email, segregation_identifier, from_email_name, mailed, mailed_on, is_being_prepared, use_digital_signatures, from_email_unverified, bulk_send, bundle)",
                    "type": "object",
                    "properties": {
                        "from_email": {
                            "title": "From email",
                            "description": "Email of user sending the signature request (must be a validated email)",
                            "type": "string",
                            "format": "email",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "from_email_name": {
                            "title": "From email name",
                            "description": "Name to be used in the `From` email header, e.g. `{from_email_name} <no-reply@sign.core.opentext.com>`",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "is_being_prepared": {
                            "title": "Is being prepared",
                            "description": "Have the sender of a signature request prepare the document before sending the request out, see: [prepare using the web interface](#section/Preparing-a-document/Prepare-using-the-web-interface)",
                            "type": "boolean",
                            "readOnly": true
                        },
                        "prepare_url": {
                            "title": "Prepare url",
                            "type": "string",
                            "format": "uri",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "redirect_url": {
                            "title": "Redirect url",
                            "description": "URL at which Core Signature will redirect to when a document is finished",
                            "type": "string",
                            "format": "uri",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "required_attachments": {
                            "description": "",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RequiredAttachment"
                            },
                            "readOnly": true
                        },
                        "disable_attachments": {
                            "title": "Disable attachments",
                            "description": "Disable uploading/adding of attachments",
                            "type": "boolean",
                            "readOnly": true
                        },
                        "disable_text_signatures": {
                            "title": "Disable text signatures",
                            "description": "Disable usage of signatures generated by typing (text)",
                            "type": "boolean",
                            "readOnly": true
                        },
                        "disable_checkbox": {
                            "title": "Disable checkbox",
                            "description": "Disable adding of checkboxes",
                            "type": "boolean",
                            "readOnly": true
                        },
                        "disable_text": {
                            "title": "Disable text",
                            "description": "Disable adding of text",
                            "type": "boolean",
                            "readOnly": true
                        },
                        "disable_date": {
                            "title": "Disable date",
                            "description": "Disable adding of dates",
                            "type": "boolean",
                            "readOnly": true
                        },
                        "disable_emails": {
                            "title": "Disable emails",
                            "description": "Disable all Core Signature status emails as well as the email that contains the signed documents",
                            "type": "boolean",
                            "readOnly": true
                        },
                        "disable_upload_signatures": {
                            "title": "Disable upload signatures",
                            "description": "Disable usage of uploaded signatures (images)",
                            "type": "boolean",
                            "readOnly": true
                        },
                        "subject": {
                            "title": "Subject",
                            "description": "Subject of the Core Signature email",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "message": {
                            "title": "Message",
                            "description": "Message to include in Core Signature email, may contain the following html tags: `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "who": {
                            "title": "Who",
                            "description": "`m`: only me, `mo`: me and others, `o`: only others",
                            "type": "string",
                            "enum": [
                                "m",
                                "mo",
                                "o"
                            ],
                            "readOnly": true
                        },
                        "send_reminders": {
                            "title": "Send reminders",
                            "description": "Automatically remind signers to sign a document",
                            "type": "boolean",
                            "readOnly": true
                        },
                        "signers": {
                            "description": "",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Signer"
                            },
                            "readOnly": true
                        },
                        "uuid": {
                            "title": "Uuid",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        }
                    },
                    "readOnly": true
                },
                "api_used": {
                    "title": "Api used",
                    "description": "Indicates whether document was created using the API",
                    "type": "boolean",
                    "readOnly": true
                },
                "signing_log": {
                    "description": "SigningLog(id, created, modified, security_hash, tierion_hash_item, lto_hash_item, pdf, document, language)",
                    "type": "object",
                    "properties": {
                        "pdf": {
                            "title": "Pdf",
                            "description": "Temporary URL to signing log, expires in five minutes",
                            "type": "string",
                            "readOnly": true,
                            "x-nullable": true,
                            "format": "uri"
                        },
                        "security_hash": {
                            "title": "Security hash",
                            "description": "SHA256 hash of PDF contents",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        }
                    },
                    "readOnly": true
                },
                "security_hash": {
                    "title": "Security hash",
                    "description": "SHA256 hash of PDF contents",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "attachments": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DocumentAttachment"
                    },
                    "readOnly": true
                },
                "auto_delete_after": {
                    "title": "Auto delete after",
                    "description": "Date and time calculated using `auto_delete_days` after which a finished document (signed/cancelled/declined) will be automatically deleted. Calculated once the document is finished.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "auto_expire_after": {
                    "title": "Auto expire after",
                    "description": "Date and time calculated using `auto_expire_days` after which a non finished document will be automatically expired. Calculated once the document is sent for signature.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                }
            }
        },
        "Event": {
            "description": "Event(id, uuid, status, event_type, delivered, delivered_on, deliver_attempts, timestamp, team, user, document, signer, integration_partner, callback_url, callback_status_code, webhook)",
            "type": "object",
            "properties": {
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "status": {
                    "title": "Status",
                    "type": "string",
                    "enum": [
                        "ok",
                        "error"
                    ],
                    "readOnly": true
                },
                "event_type": {
                    "title": "Event type",
                    "type": "string",
                    "enum": [
                        "convert_error",
                        "converted",
                        "sent",
                        "declined",
                        "cancelled",
                        "expired",
                        "signed",
                        "viewed",
                        "downloaded",
                        "signer_signed",
                        "signer_email_bounced",
                        "signer_viewed_email",
                        "signer_viewed",
                        "signer_forwarded",
                        "signer_downloaded",
                        "signrequest_received"
                    ],
                    "readOnly": true
                },
                "delivered": {
                    "title": "Delivered",
                    "description": "If the event has been delivered.",
                    "type": "boolean",
                    "readOnly": true
                },
                "delivered_on": {
                    "title": "Delivered on",
                    "description": "The time at which the event was delivered.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "callback_status_code": {
                    "title": "Callback status code",
                    "description": "The status code returned by the callback URL to which we delivered the event.",
                    "type": "integer",
                    "readOnly": true
                },
                "timestamp": {
                    "title": "Timestamp",
                    "description": "The time at which the event was triggered. Datetime is shown in UTC.",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "document": {
                    "$ref": "#/definitions/Document"
                },
                "signer": {
                    "$ref": "#/definitions/Signer"
                }
            }
        },
        "SignatureRequestQuickCreate": {
            "description": "SignRequest(id, created, modified, ip_address, ip_latitude, ip_longitude, ip_postal_code, ip_city, ip_country, ip_country_iso_code, ip_continent, ip_time_zone, user_agent_string, user_agent_os_family, user_agent_os_version, user_agent_browser_family, user_agent_browser_version, user_agent_device_family, user_agent_device_brand, user_agent_device_model, user_agent_is_mobile, user_agent_is_tablet, user_agent_is_touch_capable, user_agent_is_pc, user_agent_is_bot, who, disable_attachments, disable_text_signatures, disable_draw_signatures, disable_upload_signatures, disable_checkbox, disable_text, disable_date, disable_emails, text_message_verification_locked, disable_blockchain_proof, show_blockchain_proof, subject, message, send_reminders, redirect_url, uuid, document, from_email, segregation_identifier, from_email_name, mailed, mailed_on, is_being_prepared, use_digital_signatures, from_email_unverified, bulk_send, bundle)",
            "required": [
                "signers"
            ],
            "type": "object",
            "properties": {
                "from_email": {
                    "title": "From email",
                    "description": "Email of user sending the signature request (must be a validated email)",
                    "type": "string",
                    "format": "email",
                    "readOnly": true,
                    "minLength": 1
                },
                "from_email_name": {
                    "title": "From email name",
                    "description": "Name to be used in the `From` email header, e.g. `{from_email_name} <no-reply@sign.core.opentext.com>`",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "is_being_prepared": {
                    "title": "Is being prepared",
                    "description": "Have the sender of a signature request prepare the document before sending the request out, see: [prepare using the web interface](#section/Preparing-a-document/Prepare-using-the-web-interface)",
                    "type": "boolean",
                    "x-nullable": true
                },
                "prepare_url": {
                    "title": "Prepare url",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true,
                    "minLength": 1
                },
                "redirect_url": {
                    "title": "Redirect url",
                    "description": "URL at which Core Signature will redirect to when a document is finished",
                    "type": "string",
                    "format": "uri",
                    "maxLength": 2100,
                    "x-nullable": true
                },
                "required_attachments": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RequiredAttachment"
                    }
                },
                "disable_attachments": {
                    "title": "Disable attachments",
                    "description": "Disable uploading/adding of attachments",
                    "type": "boolean"
                },
                "disable_text_signatures": {
                    "title": "Disable text signatures",
                    "description": "Disable usage of signatures generated by typing (text)",
                    "type": "boolean"
                },
                "disable_checkbox": {
                    "title": "Disable checkbox",
                    "description": "Disable adding of checkboxes",
                    "type": "boolean",
                    "x-nullable": true
                },
                "disable_text": {
                    "title": "Disable text",
                    "description": "Disable adding of text",
                    "type": "boolean"
                },
                "disable_date": {
                    "title": "Disable date",
                    "description": "Disable adding of dates",
                    "type": "boolean"
                },
                "disable_emails": {
                    "title": "Disable emails",
                    "description": "Disable all Core Signature status emails as well as the email that contains the signed documents",
                    "type": "boolean"
                },
                "disable_upload_signatures": {
                    "title": "Disable upload signatures",
                    "description": "Disable usage of uploaded signatures (images)",
                    "type": "boolean"
                },
                "subject": {
                    "title": "Subject",
                    "description": "Subject of the Core Signature email",
                    "type": "string",
                    "maxLength": 230,
                    "x-nullable": true
                },
                "message": {
                    "title": "Message",
                    "description": "Message to include in Core Signature email, may contain the following html tags: `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`",
                    "type": "string",
                    "maxLength": 5000,
                    "x-nullable": true
                },
                "who": {
                    "title": "Who",
                    "description": "`m`: only me, `mo`: me and others, `o`: only others",
                    "type": "string",
                    "enum": [
                        "m",
                        "mo",
                        "o"
                    ],
                    "default": "o",
                    "x-nullable": true
                },
                "send_reminders": {
                    "title": "Send reminders",
                    "description": "Automatically remind signers to sign a document",
                    "type": "boolean"
                },
                "signers": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Signer"
                    }
                },
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "url": {
                    "title": "Url",
                    "description": "The API URL at which you can retreive the signature request.",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true
                },
                "document": {
                    "title": "Document",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true
                },
                "name": {
                    "title": "Name",
                    "description": "Defaults to filename",
                    "type": "string",
                    "maxLength": 200,
                    "x-nullable": true
                },
                "external_id": {
                    "title": "External id",
                    "description": "ID used to reference document in external system.",
                    "type": "string",
                    "maxLength": 255,
                    "x-nullable": true
                },
                "file": {
                    "title": "File",
                    "description": "A file which can be uploaded in a multipart/form-data request. This field is write only.",
                    "type": "string",
                    "readOnly": true,
                    "x-nullable": true,
                    "format": "uri"
                },
                "file_from_url": {
                    "title": "File from url",
                    "description": "Publicly accessible URL of document to be downloaded by OpenText Core Signature",
                    "type": "string",
                    "format": "uri",
                    "maxLength": 2100,
                    "x-nullable": true
                },
                "events_callback_url": {
                    "title": "Events callback url",
                    "description": "URL at which to receive [event callbacks](#section/Events/Events-callback) for this document. This field is write only.",
                    "type": "string",
                    "format": "uri",
                    "maxLength": 2100,
                    "x-nullable": true
                },
                "file_from_content": {
                    "title": "File from content",
                    "description": "Base64 encoded document content. This field is write only.",
                    "type": "string",
                    "x-nullable": true
                },
                "file_from_content_name": {
                    "title": "File from content name",
                    "description": "Filename, including extension. Required when using `file_from_content`. This field is write only.",
                    "type": "string",
                    "maxLength": 200,
                    "x-nullable": true
                },
                "template": {
                    "title": "Template",
                    "description": "A URL to a template from which the document will be created.",
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                },
                "prefill_tags": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InlinePrefillTags"
                    }
                },
                "integrations": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InlineIntegrationData"
                    }
                },
                "auto_delete_days": {
                    "title": "Auto delete days",
                    "description": "Number of days after which a finished document (signed/cancelled/declined) will be automatically deleted",
                    "type": "integer",
                    "maximum": 730,
                    "minimum": 1,
                    "x-nullable": true
                },
                "auto_expire_days": {
                    "title": "Auto expire days",
                    "description": "Number of days after which a non finished document will be automatically expired. The clock starts once a signature request process is initiated with this document.",
                    "type": "integer",
                    "maximum": 730,
                    "minimum": 1,
                    "x-nullable": true
                },
                "link_expire_days": {
                    "title": "Link expire days",
                    "description": "The number of days for which the download links in the Document Signed email will be valid. Afterwards, they will expire and unauthenticated signers will be unable to download the document.",
                    "type": "integer",
                    "maximum": 30,
                    "minimum": 1,
                    "x-nullable": true
                }
            }
        },
        "SignatureRequest": {
            "description": "SignRequest(id, created, modified, ip_address, ip_latitude, ip_longitude, ip_postal_code, ip_city, ip_country, ip_country_iso_code, ip_continent, ip_time_zone, user_agent_string, user_agent_os_family, user_agent_os_version, user_agent_browser_family, user_agent_browser_version, user_agent_device_family, user_agent_device_brand, user_agent_device_model, user_agent_is_mobile, user_agent_is_tablet, user_agent_is_touch_capable, user_agent_is_pc, user_agent_is_bot, who, disable_attachments, disable_text_signatures, disable_draw_signatures, disable_upload_signatures, disable_checkbox, disable_text, disable_date, disable_emails, text_message_verification_locked, disable_blockchain_proof, show_blockchain_proof, subject, message, send_reminders, redirect_url, uuid, document, from_email, segregation_identifier, from_email_name, mailed, mailed_on, is_being_prepared, use_digital_signatures, from_email_unverified, bulk_send, bundle)",
            "required": [
                "signers",
                "document"
            ],
            "type": "object",
            "properties": {
                "from_email": {
                    "title": "From email",
                    "description": "Email of user sending the signature request (must be a validated email)",
                    "type": "string",
                    "format": "email",
                    "readOnly": true,
                    "minLength": 1
                },
                "from_email_name": {
                    "title": "From email name",
                    "description": "Name to be used in the `From` email header, e.g. `{from_email_name} <no-reply@sign.core.opentext.com>`",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "is_being_prepared": {
                    "title": "Is being prepared",
                    "description": "Have the sender of a signature request prepare the document before sending the request out, see: [prepare using the web interface](#section/Preparing-a-document/Prepare-using-the-web-interface)",
                    "type": "boolean",
                    "x-nullable": true
                },
                "prepare_url": {
                    "title": "Prepare url",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true,
                    "minLength": 1
                },
                "redirect_url": {
                    "title": "Redirect url",
                    "description": "URL at which Core Signature will redirect to when a document is finished",
                    "type": "string",
                    "format": "uri",
                    "maxLength": 2100,
                    "x-nullable": true
                },
                "required_attachments": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RequiredAttachment"
                    }
                },
                "disable_attachments": {
                    "title": "Disable attachments",
                    "description": "Disable uploading/adding of attachments",
                    "type": "boolean"
                },
                "disable_text_signatures": {
                    "title": "Disable text signatures",
                    "description": "Disable usage of signatures generated by typing (text)",
                    "type": "boolean"
                },
                "disable_checkbox": {
                    "title": "Disable checkbox",
                    "description": "Disable adding of checkboxes",
                    "type": "boolean",
                    "x-nullable": true
                },
                "disable_text": {
                    "title": "Disable text",
                    "description": "Disable adding of text",
                    "type": "boolean"
                },
                "disable_date": {
                    "title": "Disable date",
                    "description": "Disable adding of dates",
                    "type": "boolean"
                },
                "disable_emails": {
                    "title": "Disable emails",
                    "description": "Disable all Core Signature status emails as well as the email that contains the signed documents",
                    "type": "boolean"
                },
                "disable_upload_signatures": {
                    "title": "Disable upload signatures",
                    "description": "Disable usage of uploaded signatures (images)",
                    "type": "boolean"
                },
                "subject": {
                    "title": "Subject",
                    "description": "Subject of the Core Signature email",
                    "type": "string",
                    "maxLength": 230,
                    "x-nullable": true
                },
                "message": {
                    "title": "Message",
                    "description": "Message to include in Core Signature email, may contain the following html tags: `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`",
                    "type": "string",
                    "maxLength": 5000,
                    "x-nullable": true
                },
                "who": {
                    "title": "Who",
                    "description": "`m`: only me, `mo`: me and others, `o`: only others",
                    "type": "string",
                    "enum": [
                        "m",
                        "mo",
                        "o"
                    ],
                    "default": "o",
                    "x-nullable": true
                },
                "send_reminders": {
                    "title": "Send reminders",
                    "description": "Automatically remind signers to sign a document",
                    "type": "boolean"
                },
                "signers": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Signer"
                    }
                },
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "url": {
                    "title": "Url",
                    "description": "The API URL at which you can retreive the signature request.",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true
                },
                "document": {
                    "title": "Document",
                    "description": "The API URL at which you can retrieve the document.",
                    "type": "string",
                    "format": "uri"
                }
            }
        },
        "Placeholder": {
            "description": "PlaceHolder(id, created, modified, page_index, type, required, prefill, prefill_tag, signer, signer_conf, document_image, uuid, repeat_on_all, comment, multiline, text, checkbox_value, date_value, data_uri, x_pos_p, y_pos_p, width_p, height_p, from_tag, external_id)",
            "required": [
                "page_index",
                "prefill"
            ],
            "type": "object",
            "properties": {
                "uuid": {
                    "title": "Uuid",
                    "description": "The UUID of the placeholder, if added by the sender. Placeholders added by the signer will be null",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "type": {
                    "title": "Type",
                    "description": "`s`: signature, `i`: initial, `n`: name `d`: date `t` text `c` checkbox",
                    "type": "string",
                    "enum": [
                        "s",
                        "i",
                        "n",
                        "d",
                        "t",
                        "c"
                    ]
                },
                "page_index": {
                    "title": "Page index",
                    "description": "Indicator for which page this placeholder is on",
                    "type": "integer"
                },
                "prefill": {
                    "title": "Prefill",
                    "description": "If True or None we prefill date placeholders. If True we can also prefill text fields",
                    "type": "boolean"
                },
                "text": {
                    "title": "Text",
                    "description": "Optional text value to be prefilled",
                    "type": "string",
                    "x-nullable": true
                },
                "checkbox_value": {
                    "title": "Checkbox value",
                    "description": "Optional checkbox value to be pre filled",
                    "type": "boolean",
                    "x-nullable": true
                },
                "date_value": {
                    "title": "Date value",
                    "description": "Optional date value to be pre filled",
                    "type": "string",
                    "format": "date",
                    "x-nullable": true
                },
                "external_id": {
                    "title": "External id",
                    "description": "A human readable field describing what this placeholder is for",
                    "type": "string",
                    "maxLength": 255,
                    "x-nullable": true
                }
            }
        },
        "DocumentSignerTemplateConf": {
            "description": "Used to configure signers for templates when we do not have a real signer yet",
            "type": "object",
            "properties": {
                "signer_index": {
                    "title": "Signer index",
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": -2147483648
                },
                "needs_to_sign": {
                    "title": "Needs to sign",
                    "description": "The signer needs to action the document.",
                    "type": "boolean"
                },
                "approve_only": {
                    "title": "Approve only",
                    "description": "The signer only needs to approve the document, not sign it.",
                    "type": "boolean"
                },
                "notify_only": {
                    "title": "Notify only",
                    "description": "The signer will only be notified of updates to the signature request. They do not have to action the document.",
                    "type": "boolean"
                },
                "in_person": {
                    "title": "In person",
                    "description": "The signer will be signing the document in person, immediately after the previous signer",
                    "type": "boolean"
                },
                "order": {
                    "title": "Order",
                    "description": "The order in which the signer needs to sign. This is ignored in the case of a `notify_only` signer.",
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                },
                "placeholders": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Placeholder"
                    },
                    "readOnly": true
                }
            }
        },
        "Template": {
            "description": "Template for generating predefined documents / signrequest configurations",
            "type": "object",
            "properties": {
                "url": {
                    "title": "Url",
                    "description": "A URL to the template",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true
                },
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "name": {
                    "title": "Name",
                    "description": "Defaults to filename",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "user": {
                    "description": "User(id, password, last_login, is_superuser, location, currency, billing_details, digital_signatures_by_default, default_disable_blockchain_proof, default_show_blockchain_proof, email, email_domain, is_email_domain_payer, uuid, username, first_name, last_name, full_name, tenant_id, integration_root_id, role, is_staff, is_active, date_joined, last_active, integration_type, banned, terminated_on, auto_termination_after, termination_reason, termination_problem, has_registered, registered_on, language, require_prepared_docs, agreed_to_terms)",
                    "type": "object",
                    "properties": {
                        "email": {
                            "title": "Email address",
                            "type": "string",
                            "format": "email",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "first_name": {
                            "title": "First name",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "last_name": {
                            "title": "Last name",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        },
                        "display_name": {
                            "title": "Display name",
                            "type": "string",
                            "readOnly": true,
                            "minLength": 1
                        }
                    },
                    "readOnly": true
                },
                "who": {
                    "title": "Who",
                    "description": "`m`: only me, `mo`: me and others, `o`: only others",
                    "type": "string",
                    "enum": [
                        "m",
                        "mo",
                        "o"
                    ],
                    "readOnly": true
                },
                "subject": {
                    "title": "Subject",
                    "description": "Subject of the Core Signature email",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "message": {
                    "title": "Message",
                    "description": "Message to include in Core Signature email, may contain the following html tags: `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "send_reminders": {
                    "title": "Send reminders",
                    "description": "Automatically remind signers to sign a document",
                    "type": "boolean",
                    "readOnly": true
                },
                "auto_expire_days": {
                    "title": "Auto expire days",
                    "description": "Number of days after which a non finished document will be automatically expired. The clock starts once a signature request process is initiated with this template.",
                    "type": "integer",
                    "maximum": 730,
                    "minimum": 1,
                    "x-nullable": true
                },
                "link_expire_days": {
                    "title": "Link expire days",
                    "description": "Number of days after which the public download links will expire, requiring a signer to login to access the finished document and signing log.",
                    "type": "integer",
                    "maximum": 30,
                    "minimum": 1,
                    "x-nullable": true
                },
                "attachments": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SignerAttachment"
                    },
                    "readOnly": true
                },
                "signers": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DocumentSignerTemplateConf"
                    },
                    "readOnly": true
                }
            }
        },
        "WebhookSubscription": {
            "description": "Used to subscribe webhooks to certain events",
            "required": [
                "event_type",
                "callback_url"
            ],
            "type": "object",
            "properties": {
                "url": {
                    "title": "Url",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true
                },
                "uuid": {
                    "title": "Uuid",
                    "type": "string",
                    "readOnly": true,
                    "minLength": 1
                },
                "name": {
                    "title": "Name",
                    "description": "A name to easily identify for what purpose the webhook is used.",
                    "type": "string",
                    "maxLength": 255,
                    "x-nullable": true
                },
                "event_type": {
                    "title": "Event type",
                    "description": "The type of event for which to listen.",
                    "type": "string",
                    "enum": [
                        "convert_error",
                        "converted",
                        "sent",
                        "declined",
                        "cancelled",
                        "expired",
                        "signed",
                        "viewed",
                        "downloaded",
                        "signer_signed",
                        "signer_email_bounced",
                        "signer_viewed_email",
                        "signer_viewed",
                        "signer_forwarded",
                        "signer_downloaded",
                        "signrequest_received"
                    ]
                },
                "callback_url": {
                    "title": "Callback url",
                    "description": "The callback URL to which we will POST events.",
                    "type": "string",
                    "format": "uri",
                    "maxLength": 2100,
                    "minLength": 1
                },
                "created": {
                    "title": "Created",
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                }
            }
        }
    },
    "tags": [
        {
            "name": "allowed-file-types",
            "description": ""
        },
        {
            "name": "brandings",
            "description": ""
        },
        {
            "name": "defaults",
            "description": ""
        },
        {
            "name": "document-attachments",
            "description": ""
        },
        {
            "name": "documents",
            "description": ""
        },
        {
            "name": "documents-search",
            "description": ""
        },
        {
            "name": "events",
            "description": ""
        },
        {
            "name": "signature-request-quick-create",
            "description": ""
        },
        {
            "name": "signature-requests",
            "description": ""
        },
        {
            "name": "templates",
            "description": ""
        },
        {
            "name": "webhooks",
            "description": ""
        }
    ]
}